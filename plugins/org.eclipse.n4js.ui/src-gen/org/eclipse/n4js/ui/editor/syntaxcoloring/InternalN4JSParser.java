package org.eclipse.n4js.ui.editor.syntaxcoloring;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.n4js.services.N4JSGrammarAccess;
import org.eclipse.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
/**
 * Copyright (c) 2017 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "QuestionMarkFullStop", "QuestionMarkQuestionMark", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_HASH_BANG", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_VERSION", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=135;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=77;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=142;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_VERSION=165;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=139;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=138;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=132;
    public static final int RULE_TEMPLATE_HEAD=140;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=141;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=76;
    public static final int Project=20;
    public static final int RULE_HASH_BANG=131;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=74;
    public static final int RULE_REGEX_START=137;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int QuestionMarkQuestionMark=79;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=143;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int QuestionMarkFullStop=78;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=134;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=168;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=167;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=75;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=145;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=73;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=136;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=144;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=146;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int RULE_BACKSLASH_SEQUENCE=133;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=166;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=169;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;
        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }
     	private N4JSGrammarAccess grammarAccess;
        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
        }
    	protected boolean forcedRewind(int position) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScript();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleScript() throws RecognitionException {
        Token HashbangHASH_BANGTerminalRuleCall_1_0=null;
        InternalN4JSParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_2_0_0 = null;
        InternalN4JSParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_1_0 = null;
        try {
            {
            {
            int alt1=2;
            int LA1_0 = input.LA(1);
            if ( (LA1_0==RULE_HASH_BANG) ) {
                alt1=1;
            }
            switch (alt1) {
                case 1 :
                    {
                    {
                    HashbangHASH_BANGTerminalRuleCall_1_0=(Token)match(input,RULE_HASH_BANG,FOLLOW_3); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      				announce(HashbangHASH_BANGTerminalRuleCall_1_0, grammarAccess.getScriptAccess().getHashbangAssignment_1());
                    }
                    }
                    }
                    break;
            }
            loop2:
            do {
                int alt2=3;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==CommercialAtCommercialAt) ) {
                    alt2=1;
                }
                else if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||(LA2_0>=HyphenMinusHyphenMinus && LA2_0<=SolidusEqualsSign)||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=2;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_2_0_0=ruleScriptAnnotation();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      					announce((AnnotationsScriptAnnotationParserRuleCall_2_0_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_2_0_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_2_0_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_2_0_0.stop):null), grammarAccess.getScriptAccess().getAnnotationsAssignment_2_0());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	case 2 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    ScriptElementsScriptElementParserRuleCall_2_1_0=ruleScriptElement();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      					announce((ScriptElementsScriptElementParserRuleCall_2_1_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_1_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_1_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_1_0.stop):null), grammarAccess.getScriptAccess().getScriptElementsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleScriptElement_return retval = new InternalN4JSParser.ruleScriptElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;
        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.ruleN4TypeAliasDeclaration_return N4TypeAliasDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_5 = null;
        InternalN4JSParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_6 = null;
        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_7 = null;
        try {
            {
            int alt3=8;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4TypeAliasDeclarationParserRuleCall_4=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4TypeAliasDeclarationParserRuleCall_4!=null?((Token)N4TypeAliasDeclarationParserRuleCall_4.start):null), (N4TypeAliasDeclarationParserRuleCall_4!=null?((Token)N4TypeAliasDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getN4TypeAliasDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_5=ruleImportDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_5!=null?((Token)ImportDeclarationParserRuleCall_5.start):null), (ImportDeclarationParserRuleCall_5!=null?((Token)ImportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_5()); 
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_6=ruleExportDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_6!=null?((Token)ExportDeclarationParserRuleCall_6.start):null), (ExportDeclarationParserRuleCall_6!=null?((Token)ExportDeclarationParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_7=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_7!=null?((Token)RootStatementParserRuleCall_7.start):null), (RootStatementParserRuleCall_7!=null?((Token)RootStatementParserRuleCall_7.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_7()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_5=null;
        Token CommaKeyword_1_4_7_0=null;
        Token RightCurlyBracketKeyword_1_4_8=null;
        Token TypeKeyword_1_5_2=null;
        Token EqualsSignKeyword_1_5_5=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;
        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_1_3_0_0_5 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_6 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_3_0_0_7 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_1_3_0_1_5 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_6 = null;
        InternalN4JSParser.ruleInterfaceExtendsList_return InterfaceExtendsListParserRuleCall_1_3_0_1_7 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_1_4_4 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_5_3_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_5_4 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_5_6_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_4);
            AnnotationListParserRuleCall_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }
            }
            int alt21=6;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);
                        if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                            alt4=1;
                        }
                        switch (alt4) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_5);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop4;
                        }
                    } while (true);
                    pushFollow(FOLLOW_5);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    int alt15=2;
                    alt15 = dfa15.predict(input);
                    switch (alt15) {
                        case 1 :
                            {
                            {
                            loop5:
                            do {
                                int alt5=2;
                                int LA5_0 = input.LA(1);
                                if ( ((LA5_0>=Protected && LA5_0<=Abstract)||LA5_0==External||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Public||LA5_0==Static||LA5_0==Const) ) {
                                    alt5=1;
                                }
                                switch (alt5) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_6);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop5;
                                }
                            } while (true);
                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);
                            if ( (LA6_0==Tilde) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4());
                            }
                            }
                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);
                            if ( (LA7_0==RULE_VERSION) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    VersionDeclarationParserRuleCall_1_3_0_0_5=ruleVersionDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VersionDeclarationParserRuleCall_1_3_0_0_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_0_5.start):null), (VersionDeclarationParserRuleCall_1_3_0_0_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_0_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);
                            if ( (LA8_0==LessThanSign) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_3_0_0_6=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_6.start):null), (TypeVariablesParserRuleCall_1_3_0_0_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_6()); 
                                    }
                                    }
                                    break;
                            }
                            int alt9=2;
                            int LA9_0 = input.LA(1);
                            if ( (LA9_0==Implements||LA9_0==Extends) ) {
                                alt9=1;
                            }
                            switch (alt9) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    ClassExtendsImplementsParserRuleCall_1_3_0_0_7=ruleClassExtendsImplements();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsImplementsParserRuleCall_1_3_0_0_7!=null?((Token)ClassExtendsImplementsParserRuleCall_1_3_0_0_7.start):null), (ClassExtendsImplementsParserRuleCall_1_3_0_0_7!=null?((Token)ClassExtendsImplementsParserRuleCall_1_3_0_0_7.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsImplementsParserRuleCall_1_3_0_0_7()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            loop10:
                            do {
                                int alt10=2;
                                int LA10_0 = input.LA(1);
                                if ( ((LA10_0>=Protected && LA10_0<=Abstract)||LA10_0==External||(LA10_0>=Private && LA10_0<=Project)||LA10_0==Public||LA10_0==Static||LA10_0==Const) ) {
                                    alt10=1;
                                }
                                switch (alt10) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_10);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop10;
                                }
                            } while (true);
                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);
                            if ( (LA11_0==Tilde) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4());
                            }
                            }
                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);
                            if ( (LA12_0==RULE_VERSION) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    VersionDeclarationParserRuleCall_1_3_0_1_5=ruleVersionDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VersionDeclarationParserRuleCall_1_3_0_1_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_1_5.start):null), (VersionDeclarationParserRuleCall_1_3_0_1_5!=null?((Token)VersionDeclarationParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_3_0_1_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt13=2;
                            int LA13_0 = input.LA(1);
                            if ( (LA13_0==LessThanSign) ) {
                                alt13=1;
                            }
                            switch (alt13) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_3_0_1_6=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_6.start):null), (TypeVariablesParserRuleCall_1_3_0_1_6!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_6()); 
                                    }
                                    }
                                    break;
                            }
                            int alt14=2;
                            int LA14_0 = input.LA(1);
                            if ( (LA14_0==Implements||LA14_0==Extends) ) {
                                alt14=1;
                            }
                            switch (alt14) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    InterfaceExtendsListParserRuleCall_1_3_0_1_7=ruleInterfaceExtendsList();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceExtendsListParserRuleCall_1_3_0_1_7!=null?((Token)InterfaceExtendsListParserRuleCall_1_3_0_1_7.start):null), (InterfaceExtendsListParserRuleCall_1_3_0_1_7!=null?((Token)InterfaceExtendsListParserRuleCall_1_3_0_1_7.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceExtendsListParserRuleCall_1_3_0_1_7()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);
                        if ( ((LA16_0>=Protected && LA16_0<=Abstract)||LA16_0==External||(LA16_0>=Private && LA16_0<=Project)||LA16_0==Public||LA16_0==Static||LA16_0==Const) ) {
                            alt16=1;
                        }
                        switch (alt16) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_11);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop16;
                        }
                    } while (true);
                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_12);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3());
                    }
                    }
                    }
                    int alt17=2;
                    int LA17_0 = input.LA(1);
                    if ( (LA17_0==RULE_VERSION) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_13);
                            VersionDeclarationParserRuleCall_1_4_4=ruleVersionDeclaration();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((VersionDeclarationParserRuleCall_1_4_4!=null?((Token)VersionDeclarationParserRuleCall_1_4_4.start):null), (VersionDeclarationParserRuleCall_1_4_4!=null?((Token)VersionDeclarationParserRuleCall_1_4_4.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getVersionDeclarationParserRuleCall_1_4_4()); 
                            }
                            }
                            break;
                    }
                    LeftCurlyBracketKeyword_1_4_5=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftCurlyBracketKeyword_1_4_5, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_5());
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_6_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6());
                    }
                    }
                    }
                    loop18:
                    do {
                        int alt18=2;
                        int LA18_0 = input.LA(1);
                        if ( (LA18_0==Comma) ) {
                            alt18=1;
                        }
                        switch (alt18) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_7_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_4_7_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_7_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_7_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop18;
                        }
                    } while (true);
                    RightCurlyBracketKeyword_1_4_8=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_4_8, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_8());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);
                        if ( ((LA19_0>=Protected && LA19_0<=Abstract)||LA19_0==External||(LA19_0>=Private && LA19_0<=Project)||LA19_0==Public||LA19_0==Static) ) {
                            alt19=1;
                        }
                        switch (alt19) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_16);
                    	    ruleN4ModifierWithoutConst();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop19;
                        }
                    } while (true);
                    TypeKeyword_1_5_2=(Token)match(input,Type,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(TypeKeyword_1_5_2, grammarAccess.getAnnotatedScriptElementAccess().getTypeKeyword_1_5_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    NameBindingIdentifierParserRuleCall_1_5_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_5_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_5_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_5_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_5_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_5_3());
                    }
                    }
                    }
                    int alt20=2;
                    int LA20_0 = input.LA(1);
                    if ( (LA20_0==LessThanSign) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_18);
                            TypeVariablesParserRuleCall_1_5_4=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_5_4!=null?((Token)TypeVariablesParserRuleCall_1_5_4.start):null), (TypeVariablesParserRuleCall_1_5_4!=null?((Token)TypeVariablesParserRuleCall_1_5_4.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_5_4()); 
                            }
                            }
                            break;
                    }
                    EqualsSignKeyword_1_5_5=(Token)match(input,EqualsSign,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_5_5, grammarAccess.getAnnotatedScriptElementAccess().getEqualsSignKeyword_1_5_5());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_1_5_6_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredTypeRefTypeRefParserRuleCall_1_5_6_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_5_6_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_5_6_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_5_6_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getDeclaredTypeRefAssignment_1_5_6());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclaration_return retval = new InternalN4JSParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclarationImpl_return retval = new InternalN4JSParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);
        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;
        InternalN4JSParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;
        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;
        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;
        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_20); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
            }
            int alt24=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt24=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt24=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Type:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt24=3;
                }
                break;
            case Default:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);
                throw nvae;
            }
            switch (alt24) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_21); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_22);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_23);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt22=2;
                    int LA22_0 = input.LA(1);
                    if ( (LA22_0==From) && (synpred10_InternalN4JSParser())) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_22);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2());
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_24); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                    }
                    }
                    }
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              							announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0());
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_22);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0());
                            }
                            }
                            }
                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSParser.ruleExportFromClause_return retval = new InternalN4JSParser.ruleExportFromClause_return();
        retval.start = input.LT(1);
        Token FromKeyword_0=null;
        InternalN4JSParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;
        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_25); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSParser.ruleExportClause_return retval = new InternalN4JSParser.ruleExportClause_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_26); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
            }
            int alt27=2;
            int LA27_0 = input.LA(1);
            if ( ((LA27_0>=Intersection && LA27_0<=Implements)||(LA27_0>=Promisify && LA27_0<=Abstract)||LA27_0==External||(LA27_0>=Private && LA27_0<=Project)||LA27_0==Public||LA27_0==Static||LA27_0==Target||(LA27_0>=Async && LA27_0<=Await)||LA27_0==Union||(LA27_0>=Yield && LA27_0<=This)||LA27_0==From||LA27_0==Type||(LA27_0>=Get && LA27_0<=Let)||(LA27_0>=Out && LA27_0<=Set)||LA27_0==As||LA27_0==Of||LA27_0==RULE_IDENTIFIER) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0());
                    }
                    }
                    }
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);
                        if ( (LA25_0==Comma) ) {
                            int LA25_1 = input.LA(2);
                            if ( ((LA25_1>=Intersection && LA25_1<=Implements)||(LA25_1>=Promisify && LA25_1<=Abstract)||LA25_1==External||(LA25_1>=Private && LA25_1<=Project)||LA25_1==Public||LA25_1==Static||LA25_1==Target||(LA25_1>=Async && LA25_1<=Await)||LA25_1==Union||(LA25_1>=Yield && LA25_1<=This)||LA25_1==From||LA25_1==Type||(LA25_1>=Get && LA25_1<=Let)||(LA25_1>=Out && LA25_1<=Set)||LA25_1==As||LA25_1==Of||LA25_1==RULE_IDENTIFIER) ) {
                                alt25=1;
                            }
                        }
                        switch (alt25) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_8); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop25;
                        }
                    } while (true);
                    int alt26=2;
                    int LA26_0 = input.LA(1);
                    if ( (LA26_0==Comma) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleExportSpecifier_return retval = new InternalN4JSParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_28);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0());
            }
            }
            }
            int alt28=2;
            int LA28_0 = input.LA(1);
            if ( (LA28_0==As) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleExportableElement_return retval = new InternalN4JSParser.ruleExportableElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;
        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.ruleN4TypeAliasDeclaration_return N4TypeAliasDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_5 = null;
        InternalN4JSParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_6 = null;
        try {
            {
            int alt29=7;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4TypeAliasDeclarationParserRuleCall_4=ruleN4TypeAliasDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4TypeAliasDeclarationParserRuleCall_4!=null?((Token)N4TypeAliasDeclarationParserRuleCall_4.start):null), (N4TypeAliasDeclarationParserRuleCall_4!=null?((Token)N4TypeAliasDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getN4TypeAliasDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_5=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_5!=null?((Token)FunctionDeclarationParserRuleCall_5.start):null), (FunctionDeclarationParserRuleCall_5!=null?((Token)FunctionDeclarationParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getFunctionDeclarationParserRuleCall_5()); 
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_6=ruleExportedVariableStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_6!=null?((Token)ExportedVariableStatementParserRuleCall_6.start):null), (ExportedVariableStatementParserRuleCall_6!=null?((Token)ExportedVariableStatementParserRuleCall_6.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        Token TypeKeyword_1_4_2=null;
        Token EqualsSignKeyword_1_4_5=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_2_0_0_6 = null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;
        InternalN4JSParser.ruleInterfaceExtendsList_return InterfaceExtendsListParserRuleCall_1_2_0_1_6 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_4_4 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_6_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_29);
            AnnotationListParserRuleCall_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }
            }
            int alt46=5;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    {
                    {
                    loop30:
                    do {
                        int alt30=2;
                        int LA30_0 = input.LA(1);
                        if ( ((LA30_0>=Protected && LA30_0<=Abstract)||LA30_0==External||(LA30_0>=Private && LA30_0<=Project)||LA30_0==Public||LA30_0==Static||LA30_0==Const) ) {
                            alt30=1;
                        }
                        switch (alt30) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_5);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop30;
                        }
                    } while (true);
                    pushFollow(FOLLOW_5);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop31:
                    do {
                        int alt31=2;
                        alt31 = dfa31.predict(input);
                        switch (alt31) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_30);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop31;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_31);
                    ruleVariableStatementKeyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3());
                    }
                    }
                    }
                    loop32:
                    do {
                        int alt32=2;
                        int LA32_0 = input.LA(1);
                        if ( (LA32_0==Comma) ) {
                            alt32=1;
                        }
                        switch (alt32) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop32;
                        }
                    } while (true);
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    int alt41=2;
                    alt41 = dfa41.predict(input);
                    switch (alt41) {
                        case 1 :
                            {
                            {
                            loop33:
                            do {
                                int alt33=2;
                                int LA33_0 = input.LA(1);
                                if ( ((LA33_0>=Protected && LA33_0<=Abstract)||LA33_0==External||(LA33_0>=Private && LA33_0<=Project)||LA33_0==Public||LA33_0==Static||LA33_0==Const) ) {
                                    alt33=1;
                                }
                                switch (alt33) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_6);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop33;
                                }
                            } while (true);
                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                            }
                            int alt34=2;
                            int LA34_0 = input.LA(1);
                            if ( (LA34_0==Tilde) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4());
                            }
                            }
                            }
                            int alt35=2;
                            int LA35_0 = input.LA(1);
                            if ( (LA35_0==LessThanSign) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt36=2;
                            int LA36_0 = input.LA(1);
                            if ( (LA36_0==Implements||LA36_0==Extends) ) {
                                alt36=1;
                            }
                            switch (alt36) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    ClassExtendsImplementsParserRuleCall_1_2_0_0_6=ruleClassExtendsImplements();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsImplementsParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsImplementsParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsImplementsParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsImplementsParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsImplementsParserRuleCall_1_2_0_0_6()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            loop37:
                            do {
                                int alt37=2;
                                int LA37_0 = input.LA(1);
                                if ( ((LA37_0>=Protected && LA37_0<=Abstract)||LA37_0==External||(LA37_0>=Private && LA37_0<=Project)||LA37_0==Public||LA37_0==Static||LA37_0==Const) ) {
                                    alt37=1;
                                }
                                switch (alt37) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_10);
                            	    ruleN4Modifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop37;
                                }
                            } while (true);
                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_7); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                            }
                            int alt38=2;
                            int LA38_0 = input.LA(1);
                            if ( (LA38_0==Tilde) ) {
                                alt38=1;
                            }
                            switch (alt38) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_8);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4());
                            }
                            }
                            }
                            int alt39=2;
                            int LA39_0 = input.LA(1);
                            if ( (LA39_0==LessThanSign) ) {
                                alt39=1;
                            }
                            switch (alt39) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }
                                    }
                                    break;
                            }
                            int alt40=2;
                            int LA40_0 = input.LA(1);
                            if ( (LA40_0==Implements||LA40_0==Extends) ) {
                                alt40=1;
                            }
                            switch (alt40) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_9);
                                    InterfaceExtendsListParserRuleCall_1_2_0_1_6=ruleInterfaceExtendsList();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceExtendsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceExtendsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceExtendsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceExtendsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceExtendsListParserRuleCall_1_2_0_1_6()); 
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);
                        if ( ((LA42_0>=Protected && LA42_0<=Abstract)||LA42_0==External||(LA42_0>=Private && LA42_0<=Project)||LA42_0==Public||LA42_0==Static||LA42_0==Const) ) {
                            alt42=1;
                        }
                        switch (alt42) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_11);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop42;
                        }
                    } while (true);
                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3());
                    }
                    }
                    }
                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5());
                    }
                    }
                    }
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);
                        if ( (LA43_0==Comma) ) {
                            alt43=1;
                        }
                        switch (alt43) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop43;
                        }
                    } while (true);
                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);
                        if ( ((LA44_0>=Protected && LA44_0<=Abstract)||LA44_0==External||(LA44_0>=Private && LA44_0<=Project)||LA44_0==Public||LA44_0==Static) ) {
                            alt44=1;
                        }
                        switch (alt44) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_16);
                    	    ruleN4ModifierWithoutConst();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop44;
                        }
                    } while (true);
                    TypeKeyword_1_4_2=(Token)match(input,Type,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(TypeKeyword_1_4_2, grammarAccess.getAnnotatedExportableElementAccess().getTypeKeyword_1_4_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_4_3());
                    }
                    }
                    }
                    int alt45=2;
                    int LA45_0 = input.LA(1);
                    if ( (LA45_0==LessThanSign) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_18);
                            TypeVariablesParserRuleCall_1_4_4=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_4_4!=null?((Token)TypeVariablesParserRuleCall_1_4_4.start):null), (TypeVariablesParserRuleCall_1_4_4!=null?((Token)TypeVariablesParserRuleCall_1_4_4.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_4_4()); 
                            }
                            }
                            break;
                    }
                    EqualsSignKeyword_1_4_5=(Token)match(input,EqualsSign,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_4_5, grammarAccess.getAnnotatedExportableElementAccess().getEqualsSignKeyword_1_4_5());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_1_4_6_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_6_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_6_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_6_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_6_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getDeclaredTypeRefAssignment_1_4_6());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclaration_return retval = new InternalN4JSParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclarationImpl_return retval = new InternalN4JSParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);
        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_33); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
            }
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( ((LA47_0>=Intersection && LA47_0<=Implements)||(LA47_0>=Promisify && LA47_0<=Abstract)||LA47_0==External||(LA47_0>=Private && LA47_0<=Project)||LA47_0==Public||LA47_0==Static||LA47_0==Target||(LA47_0>=Async && LA47_0<=Await)||LA47_0==Union||(LA47_0>=Yield && LA47_0<=This)||LA47_0==From||LA47_0==Type||(LA47_0>=Get && LA47_0<=Let)||(LA47_0>=Out && LA47_0<=Set)||LA47_0==As||LA47_0==Of||LA47_0==Asterisk||LA47_0==LeftCurlyBracket||LA47_0==RULE_IDENTIFIER) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    pushFollow(FOLLOW_21);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_25); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_22);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSParser.ruleImportClause_return retval = new InternalN4JSParser.ruleImportClause_return();
        retval.start = input.LT(1);
        Token CommaKeyword_0_1_0=null;
        InternalN4JSParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;
        try {
            {
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( ((LA49_0>=Intersection && LA49_0<=Implements)||(LA49_0>=Promisify && LA49_0<=Abstract)||LA49_0==External||(LA49_0>=Private && LA49_0<=Project)||LA49_0==Public||LA49_0==Static||LA49_0==Target||(LA49_0>=Async && LA49_0<=Await)||LA49_0==Union||(LA49_0>=Yield && LA49_0<=This)||LA49_0==From||LA49_0==Type||(LA49_0>=Get && LA49_0<=Let)||(LA49_0>=Out && LA49_0<=Set)||LA49_0==As||LA49_0==Of||LA49_0==RULE_IDENTIFIER) ) {
                alt49=1;
            }
            else if ( (LA49_0==Asterisk||LA49_0==LeftCurlyBracket) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);
                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_34);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0());
                    }
                    }
                    }
                    int alt48=2;
                    int LA48_0 = input.LA(1);
                    if ( (LA48_0==Comma) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_35); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==Asterisk) ) {
                alt53=1;
            }
            else if ( (LA53_0==LeftCurlyBracket) ) {
                alt53=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);
                throw nvae;
            }
            switch (alt53) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_36); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                    }
                    int alt52=2;
                    int LA52_0 = input.LA(1);
                    if ( ((LA52_0>=Intersection && LA52_0<=With)||(LA52_0>=For && LA52_0<=Var)||(LA52_0>=As && LA52_0<=Of)||LA52_0==RULE_IDENTIFIER) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_15);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0());
                            }
                            }
                            }
                            loop50:
                            do {
                                int alt50=2;
                                int LA50_0 = input.LA(1);
                                if ( (LA50_0==Comma) ) {
                                    int LA50_1 = input.LA(2);
                                    if ( ((LA50_1>=Intersection && LA50_1<=With)||(LA50_1>=For && LA50_1<=Var)||(LA50_1>=As && LA50_1<=Of)||LA50_1==RULE_IDENTIFIER) ) {
                                        alt50=1;
                                    }
                                }
                                switch (alt50) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_15);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      							announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop50;
                                }
                            } while (true);
                            int alt51=2;
                            int LA51_0 = input.LA(1);
                            if ( (LA51_0==Comma) ) {
                                alt51=1;
                            }
                            switch (alt51) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      					announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamedImportSpecifier_return retval = new InternalN4JSParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;
        try {
            {
            int alt54=2;
            alt54 = dfa54.predict(input);
            switch (alt54) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_37);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0());
                    }
                    }
                    }
                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);
        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;
        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_37); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_8); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_38);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3());
            }
            }
            }
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==PlusSign) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleModuleSpecifier_return retval = new InternalN4JSParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleFunctionDeclaration_return retval = new InternalN4JSParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);
                if ( ((LA56_0>=Protected && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Const) ) {
                    alt56=1;
                }
                switch (alt56) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop56;
                }
            } while (true);
            pushFollow(FOLLOW_5);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_39);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }
            }
            }
            }
            int alt57=2;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionDeclaration_return retval = new InternalN4JSParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;
        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);
                if ( ((LA58_0>=Protected && LA58_0<=Abstract)||LA58_0==External||(LA58_0>=Private && LA58_0<=Project)||LA58_0==Public||LA58_0==Static||LA58_0==Const) ) {
                    alt58=1;
                }
                switch (alt58) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop58;
                }
            } while (true);
            pushFollow(FOLLOW_40);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_39);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }
            }
            }
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==Semicolon) ) {
                int LA59_1 = input.LA(2);
                if ( (synpred24_InternalN4JSParser()) ) {
                    alt59=1;
                }
            }
            else if ( (LA59_0==EOF) && (synpred24_InternalN4JSParser())) {
                alt59=1;
            }
            else if ( (LA59_0==RULE_EOL) && (synpred24_InternalN4JSParser())) {
                alt59=1;
            }
            else if ( (LA59_0==RULE_ML_COMMENT) && (synpred24_InternalN4JSParser())) {
                alt59=1;
            }
            else if ( (LA59_0==RightCurlyBracket) ) {
                int LA59_5 = input.LA(2);
                if ( (synpred24_InternalN4JSParser()) ) {
                    alt59=1;
                }
            }
            switch (alt59) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;
        try {
            {
            int alt60=2;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==Async) ) {
                int LA60_1 = input.LA(2);
                if ( ((LA60_1>=Intersection && LA60_1<=With)||(LA60_1>=For && LA60_1<=Var)||(LA60_1>=As && LA60_1<=Of)||LA60_1==Asterisk||LA60_1==LeftSquareBracket||LA60_1==RULE_DOUBLE||(LA60_1>=RULE_HEX_INT && LA60_1<=RULE_OCTAL_INT)||LA60_1==RULE_SCIENTIFIC_INT||LA60_1==RULE_IDENTIFIER||LA60_1==RULE_STRING||LA60_1==RULE_NO_LINE_TERMINATOR||LA60_1==RULE_INT) ) {
                    alt60=1;
                }
            }
            switch (alt60) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSParser.ruleFunctionImpl_return retval = new InternalN4JSParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);
        Token FunctionKeyword_0=null;
        InternalN4JSParser.ruleFunctionImplWithoutKeyword_return FunctionImplWithoutKeywordParserRuleCall_1 = null;
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            pushFollow(FOLLOW_2);
            FunctionImplWithoutKeywordParserRuleCall_1=ruleFunctionImplWithoutKeyword();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.start):null), (FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionImpl_return retval = new InternalN4JSParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);
        Token FunctionKeyword_0=null;
        InternalN4JSParser.norm3_FunctionImplWithoutKeyword_return FunctionImplWithoutKeywordParserRuleCall_1 = null;
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            pushFollow(FOLLOW_2);
            FunctionImplWithoutKeywordParserRuleCall_1=norm3_FunctionImplWithoutKeyword();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.start):null), (FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm6_FunctionImpl_return retval = new InternalN4JSParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);
        Token FunctionKeyword_0=null;
        InternalN4JSParser.norm6_FunctionImplWithoutKeyword_return FunctionImplWithoutKeywordParserRuleCall_1 = null;
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
            }
            pushFollow(FOLLOW_2);
            FunctionImplWithoutKeywordParserRuleCall_1=norm6_FunctionImplWithoutKeyword();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.start):null), (FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionImplWithoutKeywordParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFunctionImplWithoutKeyword_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionImplWithoutKeyword_return ruleFunctionImplWithoutKeyword() throws RecognitionException {
        InternalN4JSParser.ruleFunctionImplWithoutKeyword_return retval = new InternalN4JSParser.ruleFunctionImplWithoutKeyword_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==Asterisk) ) {
                alt61=1;
            }
            else if ( ((LA61_0>=Intersection && LA61_0<=Implements)||(LA61_0>=Promisify && LA61_0<=Abstract)||LA61_0==External||(LA61_0>=Private && LA61_0<=Project)||LA61_0==Public||LA61_0==Static||LA61_0==Target||(LA61_0>=Async && LA61_0<=Await)||LA61_0==Union||(LA61_0>=Yield && LA61_0<=This)||LA61_0==From||LA61_0==Type||(LA61_0>=Get && LA61_0<=Let)||(LA61_0>=Out && LA61_0<=Set)||LA61_0==As||LA61_0==Of||LA61_0==LeftParenthesis||LA61_0==LessThanSign||LA61_0==RULE_IDENTIFIER||LA61_0==RULE_VERSION) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);
                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm2_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm1_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=ruleFunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=ruleFunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm1_FunctionImplWithoutKeyword() throws RecognitionException {
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==Asterisk) ) {
                alt62=1;
            }
            else if ( ((LA62_0>=Intersection && LA62_0<=Implements)||(LA62_0>=Promisify && LA62_0<=Abstract)||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Target||(LA62_0>=Async && LA62_0<=Await)||LA62_0==Union||LA62_0==This||LA62_0==From||LA62_0==Type||(LA62_0>=Get && LA62_0<=Let)||(LA62_0>=Out && LA62_0<=Set)||LA62_0==As||LA62_0==Of||LA62_0==LeftParenthesis||LA62_0==LessThanSign||LA62_0==RULE_IDENTIFIER||LA62_0==RULE_VERSION) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);
                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm2_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm1_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=norm1_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=ruleFunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void norm2_FunctionImplWithoutKeyword() throws RecognitionException {
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==Asterisk) ) {
                alt63=1;
            }
            else if ( ((LA63_0>=Intersection && LA63_0<=Implements)||(LA63_0>=Promisify && LA63_0<=Abstract)||LA63_0==External||(LA63_0>=Private && LA63_0<=Project)||LA63_0==Public||LA63_0==Static||LA63_0==Target||(LA63_0>=Async && LA63_0<=Await)||LA63_0==Union||(LA63_0>=Yield && LA63_0<=This)||LA63_0==From||LA63_0==Type||(LA63_0>=Get && LA63_0<=Let)||(LA63_0>=Out && LA63_0<=Set)||LA63_0==As||LA63_0==Of||LA63_0==LeftParenthesis||LA63_0==LessThanSign||LA63_0==RULE_IDENTIFIER||LA63_0==RULE_VERSION) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);
                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm3_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm1_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=ruleFunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=ruleFunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm3_FunctionImplWithoutKeyword_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionImplWithoutKeyword_return norm3_FunctionImplWithoutKeyword() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionImplWithoutKeyword_return retval = new InternalN4JSParser.norm3_FunctionImplWithoutKeyword_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==Asterisk) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=Intersection && LA64_0<=Implements)||(LA64_0>=Promisify && LA64_0<=Abstract)||LA64_0==External||(LA64_0>=Private && LA64_0<=Project)||LA64_0==Public||LA64_0==Static||LA64_0==Target||(LA64_0>=Async && LA64_0<=Await)||LA64_0==Union||LA64_0==This||LA64_0==From||LA64_0==Type||(LA64_0>=Get && LA64_0<=Let)||(LA64_0>=Out && LA64_0<=Set)||LA64_0==As||LA64_0==Of||LA64_0==LeftParenthesis||LA64_0==LessThanSign||LA64_0==RULE_IDENTIFIER||LA64_0==RULE_VERSION) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);
                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm3_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm1_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=norm1_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=ruleFunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm4_FunctionImplWithoutKeyword() throws RecognitionException {
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==Asterisk) ) {
                alt65=1;
            }
            else if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Async && LA65_0<=Await)||LA65_0==Union||(LA65_0>=Yield && LA65_0<=This)||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||(LA65_0>=Out && LA65_0<=Set)||LA65_0==As||LA65_0==Of||LA65_0==LeftParenthesis||LA65_0==LessThanSign||LA65_0==RULE_IDENTIFIER||LA65_0==RULE_VERSION) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);
                throw nvae;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm2_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm3_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=ruleFunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=norm2_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void norm5_FunctionImplWithoutKeyword() throws RecognitionException {
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==Asterisk) ) {
                alt66=1;
            }
            else if ( ((LA66_0>=Intersection && LA66_0<=Implements)||(LA66_0>=Promisify && LA66_0<=Abstract)||LA66_0==External||(LA66_0>=Private && LA66_0<=Project)||LA66_0==Public||LA66_0==Static||LA66_0==Target||(LA66_0>=Async && LA66_0<=Await)||LA66_0==Union||LA66_0==This||LA66_0==From||LA66_0==Type||(LA66_0>=Get && LA66_0<=Let)||(LA66_0>=Out && LA66_0<=Set)||LA66_0==As||LA66_0==Of||LA66_0==LeftParenthesis||LA66_0==LessThanSign||LA66_0==RULE_IDENTIFIER||LA66_0==RULE_VERSION) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);
                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm2_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm3_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=norm1_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=norm2_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm6_FunctionImplWithoutKeyword_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_FunctionImplWithoutKeyword_return norm6_FunctionImplWithoutKeyword() throws RecognitionException {
        InternalN4JSParser.norm6_FunctionImplWithoutKeyword_return retval = new InternalN4JSParser.norm6_FunctionImplWithoutKeyword_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt67=2;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==Asterisk) ) {
                alt67=1;
            }
            else if ( ((LA67_0>=Intersection && LA67_0<=Implements)||(LA67_0>=Promisify && LA67_0<=Abstract)||LA67_0==External||(LA67_0>=Private && LA67_0<=Project)||LA67_0==Public||LA67_0==Static||LA67_0==Target||(LA67_0>=Async && LA67_0<=Await)||LA67_0==Union||(LA67_0>=Yield && LA67_0<=This)||LA67_0==From||LA67_0==Type||(LA67_0>=Get && LA67_0<=Let)||(LA67_0>=Out && LA67_0<=Set)||LA67_0==As||LA67_0==Of||LA67_0==LeftParenthesis||LA67_0==LessThanSign||LA67_0==RULE_IDENTIFIER||LA67_0==RULE_VERSION) ) {
                alt67=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);
                throw nvae;
            }
            switch (alt67) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm3_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm3_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=ruleFunctionHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=norm2_FunctionBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm7_FunctionImplWithoutKeyword() throws RecognitionException {
        Token GeneratorAsteriskKeyword_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_0_1 = null;
        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_0_2 = null;
        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_0 = null;
        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1 = null;
        try {
            {
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==Asterisk) ) {
                alt68=1;
            }
            else if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Async && LA68_0<=Await)||LA68_0==Union||LA68_0==This||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||(LA68_0>=Out && LA68_0<=Set)||LA68_0==As||LA68_0==Of||LA68_0==LeftParenthesis||LA68_0==LessThanSign||LA68_0==RULE_IDENTIFIER||LA68_0==RULE_VERSION) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);
                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_0=(Token)match(input,Asterisk,FOLLOW_43); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce(GeneratorAsteriskKeyword_0_0_0, grammarAccess.getFunctionImplWithoutKeywordAccess().getGeneratorAsteriskKeyword_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_0_1=norm3_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.start):null), (FunctionHeaderParserRuleCall_0_1!=null?((Token)FunctionHeaderParserRuleCall_0_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_0_2=norm3_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.start):null), (FunctionBodyParserRuleCall_0_2!=null?((Token)FunctionBodyParserRuleCall_0_2.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_0_2()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0=norm1_FunctionHeader();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.start):null), (FunctionHeaderParserRuleCall_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_0.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionHeaderParserRuleCall_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1=norm2_FunctionBody();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.start):null), (FunctionBodyParserRuleCall_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1.stop):null), grammarAccess.getFunctionImplWithoutKeywordAccess().getFunctionBodyParserRuleCall_1_1()); 
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSParser.ruleFunctionHeader_return retval = new InternalN4JSParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==LessThanSign) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    pushFollow(FOLLOW_44);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt70=2;
            int LA70_0 = input.LA(1);
            if ( ((LA70_0>=Intersection && LA70_0<=Implements)||(LA70_0>=Promisify && LA70_0<=Abstract)||LA70_0==External||(LA70_0>=Private && LA70_0<=Project)||LA70_0==Public||LA70_0==Static||LA70_0==Target||(LA70_0>=Async && LA70_0<=Await)||LA70_0==Union||(LA70_0>=Yield && LA70_0<=This)||LA70_0==From||LA70_0==Type||(LA70_0>=Get && LA70_0<=Let)||(LA70_0>=Out && LA70_0<=Set)||LA70_0==As||LA70_0==Of||LA70_0==RULE_IDENTIFIER) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_45);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==RULE_VERSION) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    pushFollow(FOLLOW_46);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_47);
            StrictFormalParametersParserRuleCall_3=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==Colon) && (synpred25_InternalN4JSParser())) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredReturnTypeRefParserRuleCall_4=ruleColonSepDeclaredReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionHeader_return retval = new InternalN4JSParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt73=2;
            int LA73_0 = input.LA(1);
            if ( (LA73_0==LessThanSign) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    {
                    pushFollow(FOLLOW_44);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( ((LA74_0>=Intersection && LA74_0<=Implements)||(LA74_0>=Promisify && LA74_0<=Abstract)||LA74_0==External||(LA74_0>=Private && LA74_0<=Project)||LA74_0==Public||LA74_0==Static||LA74_0==Target||(LA74_0>=Async && LA74_0<=Await)||LA74_0==Union||LA74_0==This||LA74_0==From||LA74_0==Type||(LA74_0>=Get && LA74_0<=Let)||(LA74_0>=Out && LA74_0<=Set)||LA74_0==As||LA74_0==Of||LA74_0==RULE_IDENTIFIER) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_45);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==RULE_VERSION) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    pushFollow(FOLLOW_46);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_47);
            StrictFormalParametersParserRuleCall_3=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt76=2;
            int LA76_0 = input.LA(1);
            if ( (LA76_0==Colon) && (synpred26_InternalN4JSParser())) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredReturnTypeRefParserRuleCall_4=ruleColonSepDeclaredReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionHeader_return retval = new InternalN4JSParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==LessThanSign) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    pushFollow(FOLLOW_43);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( ((LA78_0>=Intersection && LA78_0<=Implements)||(LA78_0>=Promisify && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||(LA78_0>=Yield && LA78_0<=This)||LA78_0==From||LA78_0==Type||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||LA78_0==RULE_IDENTIFIER) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_43);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt79=2;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==RULE_VERSION) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    pushFollow(FOLLOW_43);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_47);
            StrictFormalParametersParserRuleCall_3=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==Colon) && (synpred27_InternalN4JSParser())) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredReturnTypeRefParserRuleCall_4=ruleColonSepDeclaredReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionHeader_return retval = new InternalN4JSParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_3 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            int alt81=2;
            int LA81_0 = input.LA(1);
            if ( (LA81_0==LessThanSign) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    {
                    pushFollow(FOLLOW_43);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }
                    }
                    break;
            }
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( ((LA82_0>=Intersection && LA82_0<=Implements)||(LA82_0>=Promisify && LA82_0<=Abstract)||LA82_0==External||(LA82_0>=Private && LA82_0<=Project)||LA82_0==Public||LA82_0==Static||LA82_0==Target||(LA82_0>=Async && LA82_0<=Await)||LA82_0==Union||LA82_0==This||LA82_0==From||LA82_0==Type||(LA82_0>=Get && LA82_0<=Let)||(LA82_0>=Out && LA82_0<=Set)||LA82_0==As||LA82_0==Of||LA82_0==RULE_IDENTIFIER) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_43);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt83=2;
            int LA83_0 = input.LA(1);
            if ( (LA83_0==RULE_VERSION) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    {
                    pushFollow(FOLLOW_43);
                    VersionDeclarationParserRuleCall_2=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.start):null), (VersionDeclarationParserRuleCall_2!=null?((Token)VersionDeclarationParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getVersionDeclarationParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_47);
            StrictFormalParametersParserRuleCall_3=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.start):null), (StrictFormalParametersParserRuleCall_3!=null?((Token)StrictFormalParametersParserRuleCall_3.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_3()); 
            }
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==Colon) && (synpred28_InternalN4JSParser())) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredReturnTypeRefParserRuleCall_4=ruleColonSepDeclaredReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_4!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_4.stop):null), grammarAccess.getFunctionHeaderAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSParser.ruleFunctionBody_return retval = new InternalN4JSParser.ruleFunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;
        try {
            {
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionBody_return retval = new InternalN4JSParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;
        try {
            {
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionBody_return retval = new InternalN4JSParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionBody_return retval = new InternalN4JSParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;
        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_5);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
            }
            }
            }
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);
                if ( ((LA87_0>=Protected && LA87_0<=Abstract)||LA87_0==External||(LA87_0>=Private && LA87_0<=Project)||LA87_0==Public||LA87_0==Static||LA87_0==Const) ) {
                    alt87=1;
                }
                switch (alt87) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop87;
                }
            } while (true);
            pushFollow(FOLLOW_5);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;
        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_5);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
            }
            }
            }
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);
                if ( ((LA88_0>=Protected && LA88_0<=Abstract)||LA88_0==External||(LA88_0>=Private && LA88_0<=Project)||LA88_0==Public||LA88_0==Static||LA88_0==Const) ) {
                    alt88=1;
                }
                switch (alt88) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_5);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop88;
                }
            } while (true);
            pushFollow(FOLLOW_40);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleFunctionExpression_return retval = new InternalN4JSParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;
        InternalN4JSParser.norm6_FunctionImplWithoutKeyword_return FunctionImplWithoutKeywordParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_48); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
            }
            }
            }
            pushFollow(FOLLOW_49);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
            }
            }
            }
            pushFollow(FOLLOW_2);
            FunctionImplWithoutKeywordParserRuleCall_1=norm6_FunctionImplWithoutKeyword();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.start):null), (FunctionImplWithoutKeywordParserRuleCall_1!=null?((Token)FunctionImplWithoutKeywordParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionImplWithoutKeywordParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowExpression_return retval = new InternalN4JSParser.ruleArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt91=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt91=1;
                }
                break;
            case Async:
                {
                int LA91_2 = input.LA(2);
                if ( (LA91_2==RULE_NO_LINE_TERMINATOR) && (synpred39_InternalN4JSParser())) {
                    alt91=2;
                }
                else if ( (LA91_2==LeftParenthesis) && (synpred39_InternalN4JSParser())) {
                    alt91=2;
                }
                else if ( (LA91_2==EqualsSignGreaterThanSign) ) {
                    alt91=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt91=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);
                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt89=2;
                    int LA89_0 = input.LA(1);
                    if ( (LA89_0==Colon) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_46);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt90=2;
                    int LA90_0 = input.LA(1);
                    if ( (LA90_0==Colon) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt92=2;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ArrowExpression_return retval = new InternalN4JSParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt95=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt95=1;
                }
                break;
            case Async:
                {
                int LA95_2 = input.LA(2);
                if ( (LA95_2==RULE_NO_LINE_TERMINATOR) && (synpred45_InternalN4JSParser())) {
                    alt95=2;
                }
                else if ( (LA95_2==LeftParenthesis) && (synpred45_InternalN4JSParser())) {
                    alt95=2;
                }
                else if ( (LA95_2==EqualsSignGreaterThanSign) ) {
                    alt95=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt95=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);
                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt93=2;
                    int LA93_0 = input.LA(1);
                    if ( (LA93_0==Colon) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_46);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=ruleStrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt94=2;
                    int LA94_0 = input.LA(1);
                    if ( (LA94_0==Colon) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt96=2;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ArrowExpression_return retval = new InternalN4JSParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt99=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt99=1;
                }
                break;
            case Async:
                {
                int LA99_2 = input.LA(2);
                if ( (LA99_2==RULE_NO_LINE_TERMINATOR) && (synpred51_InternalN4JSParser())) {
                    alt99=2;
                }
                else if ( (LA99_2==LeftParenthesis) && (synpred51_InternalN4JSParser())) {
                    alt99=2;
                }
                else if ( (LA99_2==EqualsSignGreaterThanSign) ) {
                    alt99=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);
                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);
                    if ( (LA97_0==Colon) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_43);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt98=2;
                    int LA98_0 = input.LA(1);
                    if ( (LA98_0==Colon) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ArrowExpression_return retval = new InternalN4JSParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1 = null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1 = null;
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;
        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            int alt103=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt103=1;
                }
                break;
            case Async:
                {
                int LA103_2 = input.LA(2);
                if ( (LA103_2==RULE_NO_LINE_TERMINATOR) && (synpred57_InternalN4JSParser())) {
                    alt103=2;
                }
                else if ( (LA103_2==LeftParenthesis) && (synpred57_InternalN4JSParser())) {
                    alt103=2;
                }
                else if ( (LA103_2==EqualsSignGreaterThanSign) ) {
                    alt103=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt103=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);
                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_0_0=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.start):null), (StrictFormalParametersParserRuleCall_0_0_0_0_0!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_0_0()); 
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);
                    if ( (LA101_0==Colon) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_43);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_50);
                    StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2=norm1_StrictFormalParameters();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.start):null), (StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2!=null?((Token)StrictFormalParametersParserRuleCall_0_0_0_1_0_0_2.stop):null), grammarAccess.getArrowExpressionAccess().getStrictFormalParametersParserRuleCall_0_0_0_1_0_0_2()); 
                    }
                    }
                    }
                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);
                    if ( (LA102_0==Colon) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_51);
                            ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1=ruleColonSepDeclaredReturnTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1.stop):null), grammarAccess.getArrowExpressionAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_0_0_0_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                    }
                    }
                    }
                    }
                    break;
            }
            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
            }
            }
            }
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_27);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                    }
                    }
                    }
                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.ruleStrictFormalParameters_return retval = new InternalN4JSParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( ((LA106_0>=Intersection && LA106_0<=Implements)||(LA106_0>=Promisify && LA106_0<=Abstract)||LA106_0==External||(LA106_0>=Private && LA106_0<=Project)||LA106_0==Public||LA106_0==Static||LA106_0==Target||(LA106_0>=Async && LA106_0<=Await)||LA106_0==Union||(LA106_0>=Yield && LA106_0<=This)||LA106_0==From||LA106_0==Type||LA106_0==FullStopFullStopFullStop||(LA106_0>=Get && LA106_0<=Let)||(LA106_0>=Out && LA106_0<=Set)||LA106_0==As||LA106_0==Of||(LA106_0>=CommercialAt && LA106_0<=LeftSquareBracket)||LA106_0==LeftCurlyBracket||LA106_0==RULE_IDENTIFIER) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_58);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                    }
                    }
                    }
                    loop105:
                    do {
                        int alt105=2;
                        int LA105_0 = input.LA(1);
                        if ( (LA105_0==Comma) ) {
                            alt105=1;
                        }
                        switch (alt105) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_59); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_58);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop105;
                        }
                    } while (true);
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.norm1_StrictFormalParameters_return retval = new InternalN4JSParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
            }
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( ((LA108_0>=Intersection && LA108_0<=Implements)||(LA108_0>=Promisify && LA108_0<=Abstract)||LA108_0==External||(LA108_0>=Private && LA108_0<=Project)||LA108_0==Public||LA108_0==Static||LA108_0==Target||(LA108_0>=Async && LA108_0<=Await)||LA108_0==Union||LA108_0==This||LA108_0==From||LA108_0==Type||LA108_0==FullStopFullStopFullStop||(LA108_0>=Get && LA108_0<=Let)||(LA108_0>=Out && LA108_0<=Set)||LA108_0==As||LA108_0==Of||(LA108_0>=CommercialAt && LA108_0<=LeftSquareBracket)||LA108_0==LeftCurlyBracket||LA108_0==RULE_IDENTIFIER) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_58);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                    }
                    }
                    }
                    loop107:
                    do {
                        int alt107=2;
                        int LA107_0 = input.LA(1);
                        if ( (LA107_0==Comma) ) {
                            alt107=1;
                        }
                        switch (alt107) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_59); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_58);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop107;
                        }
                    } while (true);
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlockMinusBraces() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlockMinusBraces();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlockMinusBraces_return ruleBlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.ruleBlockMinusBraces_return retval = new InternalN4JSParser.ruleBlockMinusBraces_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);
                if ( ((LA109_0>=Intersection && LA109_0<=Implements)||(LA109_0>=Promisify && LA109_0<=Function)||(LA109_0>=Private && LA109_0<=Delete)||(LA109_0>=Import && LA109_0<=Break)||(LA109_0>=Class && LA109_0<=This)||(LA109_0>=From && LA109_0<=With)||(LA109_0>=For && LA109_0<=Var)||LA109_0==PlusSignPlusSign||(LA109_0>=HyphenMinusHyphenMinus && LA109_0<=SolidusEqualsSign)||(LA109_0>=As && LA109_0<=If)||LA109_0==Of||LA109_0==ExclamationMark||LA109_0==LeftParenthesis||LA109_0==PlusSign||LA109_0==HyphenMinus||LA109_0==Solidus||(LA109_0>=Semicolon && LA109_0<=LessThanSign)||(LA109_0>=CommercialAt && LA109_0<=LeftSquareBracket)||LA109_0==LeftCurlyBracket||LA109_0==Tilde||LA109_0==RULE_DOUBLE||(LA109_0>=RULE_HEX_INT && LA109_0<=RULE_LEGACY_OCTAL_INT)||LA109_0==RULE_SCIENTIFIC_INT||LA109_0==RULE_IDENTIFIER||LA109_0==RULE_STRING||(LA109_0>=RULE_TEMPLATE_HEAD && LA109_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA109_0==RULE_INT) ) {
                    alt109=1;
                }
                switch (alt109) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop109;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.norm1_BlockMinusBraces_return retval = new InternalN4JSParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);
                if ( ((LA110_0>=Intersection && LA110_0<=Implements)||(LA110_0>=Promisify && LA110_0<=Function)||(LA110_0>=Private && LA110_0<=Delete)||(LA110_0>=Import && LA110_0<=Break)||(LA110_0>=Class && LA110_0<=This)||(LA110_0>=From && LA110_0<=With)||(LA110_0>=For && LA110_0<=Var)||LA110_0==PlusSignPlusSign||(LA110_0>=HyphenMinusHyphenMinus && LA110_0<=SolidusEqualsSign)||(LA110_0>=As && LA110_0<=If)||LA110_0==Of||LA110_0==ExclamationMark||LA110_0==LeftParenthesis||LA110_0==PlusSign||LA110_0==HyphenMinus||LA110_0==Solidus||(LA110_0>=Semicolon && LA110_0<=LessThanSign)||(LA110_0>=CommercialAt && LA110_0<=LeftSquareBracket)||LA110_0==LeftCurlyBracket||LA110_0==Tilde||LA110_0==RULE_DOUBLE||(LA110_0>=RULE_HEX_INT && LA110_0<=RULE_LEGACY_OCTAL_INT)||LA110_0==RULE_SCIENTIFIC_INT||LA110_0==RULE_IDENTIFIER||LA110_0==RULE_STRING||(LA110_0>=RULE_TEMPLATE_HEAD && LA110_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA110_0==RULE_INT) ) {
                    alt110=1;
                }
                switch (alt110) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_60);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop110;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionDisguisedAsBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionDisguisedAsBlock_return ruleExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.ruleExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm1_AssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpressionStatement_return ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpressionStatement_return retval = new InternalN4JSParser.ruleAssignmentExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpressionStatement_return norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpressionStatement_return retval = new InternalN4JSParser.norm1_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExpression_return retval = new InternalN4JSParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_0_3 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;
        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;
        try {
            {
            {
            pushFollow(FOLLOW_61);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt113=2;
            int LA113_0 = input.LA(1);
            if ( (LA113_0==Class) ) {
                alt113=1;
            }
            else if ( (LA113_0==Function||LA113_0==Async) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);
                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt111=2;
                    int LA111_0 = input.LA(1);
                    if ( ((LA111_0>=Intersection && LA111_0<=Constructor)||(LA111_0>=Promisify && LA111_0<=Abstract)||LA111_0==External||(LA111_0>=Private && LA111_0<=Project)||LA111_0==Public||LA111_0==Static||LA111_0==Target||(LA111_0>=Async && LA111_0<=Await)||LA111_0==Union||(LA111_0>=Yield && LA111_0<=This)||LA111_0==From||LA111_0==Type||(LA111_0>=Get && LA111_0<=Let)||(LA111_0>=Out && LA111_0<=Set)||LA111_0==As||LA111_0==Of||LA111_0==RULE_IDENTIFIER) ) {
                        alt111=1;
                    }
                    else if ( (LA111_0==Implements) ) {
                        int LA111_2 = input.LA(2);
                        if ( (LA111_2==Implements||LA111_2==Extends||LA111_2==LeftCurlyBracket) ) {
                            alt111=1;
                        }
                    }
                    switch (alt111) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);
                    if ( (LA112_0==Implements||LA112_0==Extends) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_9);
                            ClassExtendsImplementsParserRuleCall_1_0_3=ruleClassExtendsImplements();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.start):null), (ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3()); 
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_49);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedExpression_return retval = new InternalN4JSParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;
        InternalN4JSParser.norm1_ClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_1_0_3 = null;
        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;
        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;
        try {
            {
            {
            pushFollow(FOLLOW_61);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==Class) ) {
                alt116=1;
            }
            else if ( (LA116_0==Function||LA116_0==Async) ) {
                alt116=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);
                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_63); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                    }
                    int alt114=2;
                    int LA114_0 = input.LA(1);
                    if ( ((LA114_0>=Intersection && LA114_0<=Constructor)||(LA114_0>=Promisify && LA114_0<=Abstract)||LA114_0==External||(LA114_0>=Private && LA114_0<=Project)||LA114_0==Public||LA114_0==Static||LA114_0==Target||(LA114_0>=Async && LA114_0<=Await)||LA114_0==Union||LA114_0==This||LA114_0==From||LA114_0==Type||(LA114_0>=Get && LA114_0<=Let)||(LA114_0>=Out && LA114_0<=Set)||LA114_0==As||LA114_0==Of||LA114_0==RULE_IDENTIFIER) ) {
                        alt114=1;
                    }
                    else if ( (LA114_0==Implements) ) {
                        int LA114_2 = input.LA(2);
                        if ( (LA114_2==Implements||LA114_2==Extends||LA114_2==LeftCurlyBracket) ) {
                            alt114=1;
                        }
                    }
                    switch (alt114) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_63);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt115=2;
                    int LA115_0 = input.LA(1);
                    if ( (LA115_0==Implements||LA115_0==Extends) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_63);
                            ClassExtendsImplementsParserRuleCall_1_0_3=norm1_ClassExtendsImplements();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.start):null), (ClassExtendsImplementsParserRuleCall_1_0_3!=null?((Token)ClassExtendsImplementsParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsImplementsParserRuleCall_1_0_3()); 
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_49);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariable_return retval = new InternalN4JSParser.ruleTypeVariable_return();
        retval.start = input.LT(1);
        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_2_1_0 = null;
        try {
            {
            {
            int alt117=3;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==Out) ) {
                alt117=1;
            }
            else if ( (LA117_0==In) ) {
                alt117=2;
            }
            switch (alt117) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_65);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1());
            }
            }
            }
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==Extends) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_2_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundAssignment_2_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleFormalParameter_return retval = new InternalN4JSParser.ruleFormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_FormalParameter_return retval = new InternalN4JSParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSParser.ruleBindingElementFragment_return retval = new InternalN4JSParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);
        Token VariadicFullStopFullStopFullStopKeyword_0_1_1_0=null;
        Token HasInitializerAssignmentEqualsSignKeyword_1_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_2_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_0_1_3 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==LeftCurlyBracket) && (synpred60_InternalN4JSParser())) {
                alt122=1;
            }
            else if ( (LA122_0==LeftSquareBracket) && (synpred60_InternalN4JSParser())) {
                alt122=1;
            }
            else if ( ((LA122_0>=Intersection && LA122_0<=Implements)||(LA122_0>=Promisify && LA122_0<=Abstract)||LA122_0==External||(LA122_0>=Private && LA122_0<=Project)||LA122_0==Public||LA122_0==Static||LA122_0==Target||(LA122_0>=Async && LA122_0<=Await)||LA122_0==Union||(LA122_0>=Yield && LA122_0<=This)||LA122_0==From||LA122_0==Type||LA122_0==FullStopFullStopFullStop||(LA122_0>=Get && LA122_0<=Let)||(LA122_0>=Out && LA122_0<=Set)||LA122_0==As||LA122_0==Of||LA122_0==CommercialAt||LA122_0==RULE_IDENTIFIER) ) {
                alt122=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);
                throw nvae;
            }
            switch (alt122) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_66);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop119:
                    do {
                        int alt119=2;
                        int LA119_0 = input.LA(1);
                        if ( (LA119_0==CommercialAt) ) {
                            alt119=1;
                        }
                        switch (alt119) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_67);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop119;
                        }
                    } while (true);
                    int alt120=2;
                    int LA120_0 = input.LA(1);
                    if ( (LA120_0==FullStopFullStopFullStop) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_1_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    NameBindingIdentifierParserRuleCall_0_1_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_2());
                    }
                    }
                    }
                    int alt121=2;
                    int LA121_0 = input.LA(1);
                    if ( (LA121_0==Colon) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_66);
                            ColonSepDeclaredTypeRefParserRuleCall_0_1_3=ruleColonSepDeclaredTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt124=2;
            int LA124_0 = input.LA(1);
            if ( (LA124_0==EqualsSign) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_1_0_0=(Token)match(input,EqualsSign,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(HasInitializerAssignmentEqualsSignKeyword_1_0_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    }
                    }
                    int alt123=2;
                    int LA123_0 = input.LA(1);
                    if ( ((LA123_0>=Intersection && LA123_0<=Implements)||(LA123_0>=Promisify && LA123_0<=Abstract)||(LA123_0>=External && LA123_0<=Function)||(LA123_0>=Private && LA123_0<=Delete)||(LA123_0>=Import && LA123_0<=Public)||LA123_0==Static||(LA123_0>=Target && LA123_0<=Await)||LA123_0==Class||(LA123_0>=False && LA123_0<=Super)||LA123_0==Union||(LA123_0>=Yield && LA123_0<=This)||(LA123_0>=From && LA123_0<=Void)||(LA123_0>=Get && LA123_0<=Set)||LA123_0==PlusSignPlusSign||(LA123_0>=HyphenMinusHyphenMinus && LA123_0<=SolidusEqualsSign)||LA123_0==As||LA123_0==Of||LA123_0==ExclamationMark||LA123_0==LeftParenthesis||LA123_0==PlusSign||LA123_0==HyphenMinus||LA123_0==Solidus||LA123_0==LessThanSign||(LA123_0>=CommercialAt && LA123_0<=LeftSquareBracket)||LA123_0==LeftCurlyBracket||LA123_0==Tilde||LA123_0==RULE_DOUBLE||(LA123_0>=RULE_HEX_INT && LA123_0<=RULE_LEGACY_OCTAL_INT)||LA123_0==RULE_SCIENTIFIC_INT||LA123_0==RULE_IDENTIFIER||LA123_0==RULE_STRING||(LA123_0>=RULE_TEMPLATE_HEAD && LA123_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA123_0==RULE_INT) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElementFragment_return retval = new InternalN4JSParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);
        Token VariadicFullStopFullStopFullStopKeyword_0_1_1_0=null;
        Token HasInitializerAssignmentEqualsSignKeyword_1_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_2_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_0_1_3 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            int alt128=2;
            int LA128_0 = input.LA(1);
            if ( (LA128_0==LeftCurlyBracket) && (synpred61_InternalN4JSParser())) {
                alt128=1;
            }
            else if ( (LA128_0==LeftSquareBracket) && (synpred61_InternalN4JSParser())) {
                alt128=1;
            }
            else if ( ((LA128_0>=Intersection && LA128_0<=Implements)||(LA128_0>=Promisify && LA128_0<=Abstract)||LA128_0==External||(LA128_0>=Private && LA128_0<=Project)||LA128_0==Public||LA128_0==Static||LA128_0==Target||(LA128_0>=Async && LA128_0<=Await)||LA128_0==Union||LA128_0==This||LA128_0==From||LA128_0==Type||LA128_0==FullStopFullStopFullStop||(LA128_0>=Get && LA128_0<=Let)||(LA128_0>=Out && LA128_0<=Set)||LA128_0==As||LA128_0==Of||LA128_0==CommercialAt||LA128_0==RULE_IDENTIFIER) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);
                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_66);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);
                        if ( (LA125_0==CommercialAt) ) {
                            alt125=1;
                        }
                        switch (alt125) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_67);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop125;
                        }
                    } while (true);
                    int alt126=2;
                    int LA126_0 = input.LA(1);
                    if ( (LA126_0==FullStopFullStopFullStop) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_1_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    NameBindingIdentifierParserRuleCall_0_1_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_2_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_2());
                    }
                    }
                    }
                    int alt127=2;
                    int LA127_0 = input.LA(1);
                    if ( (LA127_0==Colon) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_66);
                            ColonSepDeclaredTypeRefParserRuleCall_0_1_3=ruleColonSepDeclaredTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_0_1_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_0_1_3.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepDeclaredTypeRefParserRuleCall_0_1_3()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==EqualsSign) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_1_0_0=(Token)match(input,EqualsSign,FOLLOW_70); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(HasInitializerAssignmentEqualsSignKeyword_1_0_0, grammarAccess.getBindingElementFragmentAccess().getHasInitializerAssignmentEqualsSignKeyword_1_0_0());
                    }
                    }
                    }
                    int alt129=2;
                    int LA129_0 = input.LA(1);
                    if ( ((LA129_0>=Intersection && LA129_0<=Implements)||(LA129_0>=Promisify && LA129_0<=Abstract)||(LA129_0>=External && LA129_0<=Function)||(LA129_0>=Private && LA129_0<=Delete)||(LA129_0>=Import && LA129_0<=Public)||LA129_0==Static||(LA129_0>=Target && LA129_0<=Await)||LA129_0==Class||(LA129_0>=False && LA129_0<=Super)||LA129_0==Union||(LA129_0>=Yield && LA129_0<=This)||(LA129_0>=From && LA129_0<=Void)||(LA129_0>=Get && LA129_0<=Set)||LA129_0==PlusSignPlusSign||(LA129_0>=HyphenMinusHyphenMinus && LA129_0<=SolidusEqualsSign)||LA129_0==As||LA129_0==Of||LA129_0==ExclamationMark||LA129_0==LeftParenthesis||LA129_0==PlusSign||LA129_0==HyphenMinus||LA129_0==Solidus||LA129_0==LessThanSign||(LA129_0>=CommercialAt && LA129_0<=LeftSquareBracket)||LA129_0==LeftCurlyBracket||LA129_0==Tilde||LA129_0==RULE_DOUBLE||(LA129_0>=RULE_HEX_INT && LA129_0<=RULE_LEGACY_OCTAL_INT)||LA129_0==RULE_SCIENTIFIC_INT||LA129_0==RULE_IDENTIFIER||LA129_0==RULE_STRING||(LA129_0>=RULE_TEMPLATE_HEAD && LA129_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA129_0==RULE_INT) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSParser.ruleBlock_return retval = new InternalN4JSParser.ruleBlock_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);
                if ( ((LA131_0>=Intersection && LA131_0<=Implements)||(LA131_0>=Promisify && LA131_0<=Function)||(LA131_0>=Private && LA131_0<=Delete)||(LA131_0>=Import && LA131_0<=Break)||(LA131_0>=Class && LA131_0<=This)||(LA131_0>=From && LA131_0<=With)||(LA131_0>=For && LA131_0<=Var)||LA131_0==PlusSignPlusSign||(LA131_0>=HyphenMinusHyphenMinus && LA131_0<=SolidusEqualsSign)||(LA131_0>=As && LA131_0<=If)||LA131_0==Of||LA131_0==ExclamationMark||LA131_0==LeftParenthesis||LA131_0==PlusSign||LA131_0==HyphenMinus||LA131_0==Solidus||(LA131_0>=Semicolon && LA131_0<=LessThanSign)||(LA131_0>=CommercialAt && LA131_0<=LeftSquareBracket)||LA131_0==LeftCurlyBracket||LA131_0==Tilde||LA131_0==RULE_DOUBLE||(LA131_0>=RULE_HEX_INT && LA131_0<=RULE_LEGACY_OCTAL_INT)||LA131_0==RULE_SCIENTIFIC_INT||LA131_0==RULE_IDENTIFIER||LA131_0==RULE_STRING||(LA131_0>=RULE_TEMPLATE_HEAD && LA131_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA131_0==RULE_INT) ) {
                    alt131=1;
                }
                switch (alt131) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop131;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSParser.norm1_Block_return retval = new InternalN4JSParser.norm1_Block_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
            }
            }
            }
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);
                if ( ((LA132_0>=Intersection && LA132_0<=Implements)||(LA132_0>=Promisify && LA132_0<=Function)||(LA132_0>=Private && LA132_0<=Delete)||(LA132_0>=Import && LA132_0<=Break)||(LA132_0>=Class && LA132_0<=This)||(LA132_0>=From && LA132_0<=With)||(LA132_0>=For && LA132_0<=Var)||LA132_0==PlusSignPlusSign||(LA132_0>=HyphenMinusHyphenMinus && LA132_0<=SolidusEqualsSign)||(LA132_0>=As && LA132_0<=If)||LA132_0==Of||LA132_0==ExclamationMark||LA132_0==LeftParenthesis||LA132_0==PlusSign||LA132_0==HyphenMinus||LA132_0==Solidus||(LA132_0>=Semicolon && LA132_0<=LessThanSign)||(LA132_0>=CommercialAt && LA132_0<=LeftSquareBracket)||LA132_0==LeftCurlyBracket||LA132_0==Tilde||LA132_0==RULE_DOUBLE||(LA132_0>=RULE_HEX_INT && LA132_0<=RULE_LEGACY_OCTAL_INT)||LA132_0==RULE_SCIENTIFIC_INT||LA132_0==RULE_IDENTIFIER||LA132_0==RULE_STRING||(LA132_0>=RULE_TEMPLATE_HEAD && LA132_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA132_0==RULE_INT) ) {
                    alt132=1;
                }
                switch (alt132) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_56);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop132;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSParser.ruleRootStatement_return retval = new InternalN4JSParser.ruleRootStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBlock_return BlockParserRuleCall_0 = null;
        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;
        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;
        InternalN4JSParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;
        InternalN4JSParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;
        InternalN4JSParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;
        InternalN4JSParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;
        InternalN4JSParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;
        InternalN4JSParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;
        InternalN4JSParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;
        InternalN4JSParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;
        InternalN4JSParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;
        InternalN4JSParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;
        InternalN4JSParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;
        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;
        try {
            {
            int alt133=16;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSParser.norm1_RootStatement_return retval = new InternalN4JSParser.norm1_RootStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Block_return BlockParserRuleCall_0 = null;
        InternalN4JSParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;
        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;
        InternalN4JSParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;
        InternalN4JSParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;
        InternalN4JSParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;
        InternalN4JSParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;
        InternalN4JSParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;
        InternalN4JSParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;
        InternalN4JSParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;
        InternalN4JSParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;
        InternalN4JSParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;
        InternalN4JSParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;
        InternalN4JSParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;
        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;
        try {
            {
            int alt134=16;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSParser.ruleStatement_return retval = new InternalN4JSParser.ruleStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;
        try {
            {
            int alt135=2;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSParser.norm1_Statement_return retval = new InternalN4JSParser.norm1_Statement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;
        try {
            {
            int alt136=2;
            alt136 = dfa136.predict(input);
            switch (alt136) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm1_VariableStatement_return retval = new InternalN4JSParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_31);
            ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return retval;
            }
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_32);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
            }
            }
            }
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);
                if ( (LA137_0==Comma) ) {
                    alt137=1;
                }
                switch (alt137) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_32);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop137;
                }
            } while (true);
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm3_VariableStatement_return retval = new InternalN4JSParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_31);
            ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return retval;
            }
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_32);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
            }
            }
            }
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);
                if ( (LA138_0==Comma) ) {
                    alt138=1;
                }
                switch (alt138) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_32);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop138;
                }
            } while (true);
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableStatement_return retval = new InternalN4JSParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);
        Token CommaKeyword_4_0=null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;
        try {
            {
            {
            loop139:
            do {
                int alt139=2;
                alt139 = dfa139.predict(input);
                switch (alt139) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop139;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_31);
            ruleVariableStatementKeyword();
            state._fsp--;
            if (state.failed) return retval;
            }
            }
            {
            {
            pushFollow(FOLLOW_32);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3());
            }
            }
            }
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);
                if ( (LA140_0==Comma) ) {
                    alt140=1;
                }
                switch (alt140) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_32);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop140;
                }
            } while (true);
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt141=2;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==LeftCurlyBracket) && (synpred76_InternalN4JSParser())) {
                alt141=1;
            }
            else if ( (LA141_0==LeftSquareBracket) && (synpred76_InternalN4JSParser())) {
                alt141=1;
            }
            else if ( ((LA141_0>=Intersection && LA141_0<=Implements)||(LA141_0>=Promisify && LA141_0<=Abstract)||LA141_0==External||(LA141_0>=Private && LA141_0<=Project)||LA141_0==Public||LA141_0==Static||LA141_0==Target||(LA141_0>=Async && LA141_0<=Await)||LA141_0==Union||(LA141_0>=Yield && LA141_0<=This)||LA141_0==From||LA141_0==Type||(LA141_0>=Get && LA141_0<=Let)||(LA141_0>=Out && LA141_0<=Set)||LA141_0==As||LA141_0==Of||LA141_0==CommercialAt||LA141_0==RULE_IDENTIFIER) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);
                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt142=2;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==LeftCurlyBracket) && (synpred77_InternalN4JSParser())) {
                alt142=1;
            }
            else if ( (LA142_0==LeftSquareBracket) && (synpred77_InternalN4JSParser())) {
                alt142=1;
            }
            else if ( ((LA142_0>=Intersection && LA142_0<=Implements)||(LA142_0>=Promisify && LA142_0<=Abstract)||LA142_0==External||(LA142_0>=Private && LA142_0<=Project)||LA142_0==Public||LA142_0==Static||LA142_0==Target||(LA142_0>=Async && LA142_0<=Await)||LA142_0==Union||(LA142_0>=Yield && LA142_0<=This)||LA142_0==From||LA142_0==Type||(LA142_0>=Get && LA142_0<=Let)||(LA142_0>=Out && LA142_0<=Set)||LA142_0==As||LA142_0==Of||LA142_0==CommercialAt||LA142_0==RULE_IDENTIFIER) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);
                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt143=2;
            int LA143_0 = input.LA(1);
            if ( (LA143_0==LeftCurlyBracket) && (synpred78_InternalN4JSParser())) {
                alt143=1;
            }
            else if ( (LA143_0==LeftSquareBracket) && (synpred78_InternalN4JSParser())) {
                alt143=1;
            }
            else if ( ((LA143_0>=Intersection && LA143_0<=Implements)||(LA143_0>=Promisify && LA143_0<=Abstract)||LA143_0==External||(LA143_0>=Private && LA143_0<=Project)||LA143_0==Public||LA143_0==Static||LA143_0==Target||(LA143_0>=Async && LA143_0<=Await)||LA143_0==Union||LA143_0==This||LA143_0==From||LA143_0==Type||(LA143_0>=Get && LA143_0<=Let)||(LA143_0>=Out && LA143_0<=Set)||LA143_0==As||LA143_0==Of||LA143_0==CommercialAt||LA143_0==RULE_IDENTIFIER) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);
                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt144=2;
            int LA144_0 = input.LA(1);
            if ( (LA144_0==LeftCurlyBracket) && (synpred79_InternalN4JSParser())) {
                alt144=1;
            }
            else if ( (LA144_0==LeftSquareBracket) && (synpred79_InternalN4JSParser())) {
                alt144=1;
            }
            else if ( ((LA144_0>=Intersection && LA144_0<=Implements)||(LA144_0>=Promisify && LA144_0<=Abstract)||LA144_0==External||(LA144_0>=Private && LA144_0<=Project)||LA144_0==Public||LA144_0==Static||LA144_0==Target||(LA144_0>=Async && LA144_0<=Await)||LA144_0==Union||LA144_0==This||LA144_0==From||LA144_0==Type||(LA144_0>=Get && LA144_0<=Let)||(LA144_0>=Out && LA144_0<=Set)||LA144_0==As||LA144_0==Of||LA144_0==CommercialAt||LA144_0==RULE_IDENTIFIER) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);
                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==LeftCurlyBracket) && (synpred80_InternalN4JSParser())) {
                alt145=1;
            }
            else if ( (LA145_0==LeftSquareBracket) && (synpred80_InternalN4JSParser())) {
                alt145=1;
            }
            else if ( ((LA145_0>=Intersection && LA145_0<=Implements)||(LA145_0>=Promisify && LA145_0<=Abstract)||LA145_0==External||(LA145_0>=Private && LA145_0<=Project)||LA145_0==Public||LA145_0==Static||LA145_0==Target||(LA145_0>=Async && LA145_0<=Await)||LA145_0==Union||(LA145_0>=Yield && LA145_0<=This)||LA145_0==From||LA145_0==Type||(LA145_0>=Get && LA145_0<=Let)||(LA145_0>=Out && LA145_0<=Set)||LA145_0==As||LA145_0==Of||LA145_0==CommercialAt||LA145_0==RULE_IDENTIFIER) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);
                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt146=2;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==LeftCurlyBracket) && (synpred81_InternalN4JSParser())) {
                alt146=1;
            }
            else if ( (LA146_0==LeftSquareBracket) && (synpred81_InternalN4JSParser())) {
                alt146=1;
            }
            else if ( ((LA146_0>=Intersection && LA146_0<=Implements)||(LA146_0>=Promisify && LA146_0<=Abstract)||LA146_0==External||(LA146_0>=Private && LA146_0<=Project)||LA146_0==Public||LA146_0==Static||LA146_0==Target||(LA146_0>=Async && LA146_0<=Await)||LA146_0==Union||LA146_0==This||LA146_0==From||LA146_0==Type||(LA146_0>=Get && LA146_0<=Let)||(LA146_0>=Out && LA146_0<=Set)||LA146_0==As||LA146_0==Of||LA146_0==CommercialAt||LA146_0==RULE_IDENTIFIER) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);
                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableBinding_return retval = new InternalN4JSParser.ruleVariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableBinding_return retval = new InternalN4JSParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableBinding_return retval = new InternalN4JSParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableBinding_return retval = new InternalN4JSParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
            }
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableBinding_return retval = new InternalN4JSParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt147=2;
            int LA147_0 = input.LA(1);
            if ( (LA147_0==EqualsSign) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==EqualsSign) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableBinding_return retval = new InternalN4JSParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt149=2;
            int LA149_0 = input.LA(1);
            if ( (LA149_0==EqualsSign) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            int alt150=2;
            int LA150_0 = input.LA(1);
            if ( (LA150_0==EqualsSign) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclaration_return retval = new InternalN4JSParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclaration_return retval = new InternalN4JSParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclaration_return retval = new InternalN4JSParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return retval = new InternalN4JSParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclaration_return retval = new InternalN4JSParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return retval = new InternalN4JSParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop151:
            do {
                int alt151=2;
                alt151 = dfa151.predict(input);
                switch (alt151) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop151;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==EqualsSign) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop153:
            do {
                int alt153=2;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt154=2;
            int LA154_0 = input.LA(1);
            if ( (LA154_0==EqualsSign) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop155:
            do {
                int alt155=2;
                alt155 = dfa155.predict(input);
                switch (alt155) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==EqualsSign) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            loop157:
            do {
                int alt157=2;
                alt157 = dfa157.predict(input);
                switch (alt157) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop157;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
            }
            }
            }
            }
            int alt158=2;
            int LA158_0 = input.LA(1);
            if ( (LA158_0==EqualsSign) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop159:
            do {
                int alt159=2;
                alt159 = dfa159.predict(input);
                switch (alt159) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop159;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt160=2;
            int LA160_0 = input.LA(1);
            if ( (LA160_0==Colon) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    pushFollow(FOLLOW_66);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt161=2;
            int LA161_0 = input.LA(1);
            if ( (LA161_0==EqualsSign) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop162:
            do {
                int alt162=2;
                alt162 = dfa162.predict(input);
                switch (alt162) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop162;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt163=2;
            int LA163_0 = input.LA(1);
            if ( (LA163_0==Colon) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    pushFollow(FOLLOW_66);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt164=2;
            int LA164_0 = input.LA(1);
            if ( (LA164_0==EqualsSign) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop165:
            do {
                int alt165=2;
                alt165 = dfa165.predict(input);
                switch (alt165) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop165;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt166=2;
            int LA166_0 = input.LA(1);
            if ( (LA166_0==Colon) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    pushFollow(FOLLOW_66);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt167=2;
            int LA167_0 = input.LA(1);
            if ( (LA167_0==EqualsSign) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;
        try {
            {
            {
            loop168:
            do {
                int alt168=2;
                alt168 = dfa168.predict(input);
                switch (alt168) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_72);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop168;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_68);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
            }
            }
            }
            int alt169=2;
            int LA169_0 = input.LA(1);
            if ( (LA169_0==Colon) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    pushFollow(FOLLOW_66);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_0_0_1()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt170=2;
            int LA170_0 = input.LA(1);
            if ( (LA170_0==EqualsSign) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt171=2;
            int LA171_0 = input.LA(1);
            if ( (LA171_0==LeftCurlyBracket) && (synpred98_InternalN4JSParser())) {
                alt171=1;
            }
            else if ( (LA171_0==LeftSquareBracket) && (synpred98_InternalN4JSParser())) {
                alt171=1;
            }
            else if ( ((LA171_0>=Intersection && LA171_0<=Implements)||(LA171_0>=Promisify && LA171_0<=Abstract)||LA171_0==External||(LA171_0>=Private && LA171_0<=Project)||LA171_0==Public||LA171_0==Static||LA171_0==Target||(LA171_0>=Async && LA171_0<=Await)||LA171_0==Union||(LA171_0>=Yield && LA171_0<=This)||LA171_0==From||LA171_0==Type||(LA171_0>=Get && LA171_0<=Let)||(LA171_0>=Out && LA171_0<=Set)||LA171_0==As||LA171_0==Of||LA171_0==CommercialAt||LA171_0==RULE_IDENTIFIER) ) {
                alt171=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 171, 0, input);
                throw nvae;
            }
            switch (alt171) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;
        InternalN4JSParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;
        try {
            {
            int alt172=2;
            int LA172_0 = input.LA(1);
            if ( (LA172_0==LeftCurlyBracket) && (synpred99_InternalN4JSParser())) {
                alt172=1;
            }
            else if ( (LA172_0==LeftSquareBracket) && (synpred99_InternalN4JSParser())) {
                alt172=1;
            }
            else if ( ((LA172_0>=Intersection && LA172_0<=Implements)||(LA172_0>=Promisify && LA172_0<=Abstract)||LA172_0==External||(LA172_0>=Private && LA172_0<=Project)||LA172_0==Public||LA172_0==Static||LA172_0==Target||(LA172_0>=Async && LA172_0<=Await)||LA172_0==Union||LA172_0==This||LA172_0==From||LA172_0==Type||(LA172_0>=Get && LA172_0<=Let)||(LA172_0>=Out && LA172_0<=Set)||LA172_0==As||LA172_0==Of||LA172_0==CommercialAt||LA172_0==RULE_IDENTIFIER) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);
                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();
                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableBinding_return retval = new InternalN4JSParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_18);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
            }
            }
            }
            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSParser.ruleEmptyStatement_return retval = new InternalN4JSParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1=null;
        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleExpressionStatement_return retval = new InternalN4JSParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_22);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionStatement_return retval = new InternalN4JSParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_22);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSParser.ruleIfStatement_return retval = new InternalN4JSParser.ruleIfStatement_return();
        retval.start = input.LT(1);
        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_75);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
            }
            }
            }
            int alt173=2;
            int LA173_0 = input.LA(1);
            if ( (LA173_0==Else) ) {
                int LA173_1 = input.LA(2);
                if ( (synpred102_InternalN4JSParser()) ) {
                    alt173=1;
                }
            }
            switch (alt173) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IfStatement_return retval = new InternalN4JSParser.norm1_IfStatement_return();
        retval.start = input.LT(1);
        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;
        InternalN4JSParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_75);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
            }
            }
            }
            int alt174=2;
            int LA174_0 = input.LA(1);
            if ( (LA174_0==Else) ) {
                int LA174_1 = input.LA(2);
                if ( (synpred103_InternalN4JSParser()) ) {
                    alt174=1;
                }
            }
            switch (alt174) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSParser.ruleIterationStatement_return retval = new InternalN4JSParser.ruleIterationStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;
        InternalN4JSParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;
        InternalN4JSParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;
        try {
            {
            int alt175=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt175=1;
                }
                break;
            case While:
                {
                alt175=2;
                }
                break;
            case For:
                {
                alt175=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);
                throw nvae;
            }
            switch (alt175) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IterationStatement_return retval = new InternalN4JSParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;
        InternalN4JSParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;
        InternalN4JSParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;
        try {
            {
            int alt176=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt176=1;
                }
                break;
            case While:
                {
                alt176=2;
                }
                break;
            case For:
                {
                alt176=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);
                throw nvae;
            }
            switch (alt176) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSParser.ruleDoStatement_return retval = new InternalN4JSParser.ruleDoStatement_return();
        retval.start = input.LT(1);
        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_77);
            StatementStatementParserRuleCall_1_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
            }
            }
            }
            WhileKeyword_2=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
            }
            }
            }
            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_39); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt177=2;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSParser.norm1_DoStatement_return retval = new InternalN4JSParser.norm1_DoStatement_return();
        retval.start = input.LT(1);
        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_77);
            StatementStatementParserRuleCall_1_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
            }
            }
            }
            WhileKeyword_2=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
            }
            }
            }
            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_39); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
            }
            int alt178=2;
            int LA178_0 = input.LA(1);
            if ( (LA178_0==Semicolon) ) {
                int LA178_1 = input.LA(2);
                if ( (synpred105_InternalN4JSParser()) ) {
                    alt178=1;
                }
            }
            else if ( (LA178_0==EOF) && (synpred105_InternalN4JSParser())) {
                alt178=1;
            }
            else if ( (LA178_0==RULE_EOL) && (synpred105_InternalN4JSParser())) {
                alt178=1;
            }
            else if ( (LA178_0==RULE_ML_COMMENT) && (synpred105_InternalN4JSParser())) {
                alt178=1;
            }
            else if ( (LA178_0==RightCurlyBracket) ) {
                int LA178_5 = input.LA(2);
                if ( (synpred105_InternalN4JSParser()) ) {
                    alt178=1;
                }
            }
            switch (alt178) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSParser.ruleWhileStatement_return retval = new InternalN4JSParser.ruleWhileStatement_return();
        retval.start = input.LT(1);
        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WhileStatement_return retval = new InternalN4JSParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);
        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSParser.ruleForStatement_return retval = new InternalN4JSParser.ruleForStatement_return();
        retval.start = input.LT(1);
        Token ForKeyword_1=null;
        Token AwaitAwaitKeyword_2_0=null;
        Token LeftParenthesisKeyword_3=null;
        Token ForInInKeyword_4_0_0_1_0=null;
        Token RightParenthesisKeyword_4_0_0_3=null;
        Token ForInInKeyword_4_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_4_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_4_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_4_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_4_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_4_1_0_1_1_0_0=null;
        Token SemicolonKeyword_4_1_0_1_1_0_2=null;
        Token ForInInKeyword_4_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_4_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_4_1_0_2_0=null;
        Token SemicolonKeyword_4_1_0_2_2=null;
        Token RightParenthesisKeyword_4_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0_0_2_0 = null;
        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0 = null;
        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0 = null;
        InternalN4JSParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0 = null;
        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0 = null;
        InternalN4JSParser.ruleExpression_return InitExprExpressionParserRuleCall_4_1_0_1_0_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0 = null;
        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0_2_1_0 = null;
        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_4_1_0_2_3_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_5_0 = null;
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_78); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt179=2;
            int LA179_0 = input.LA(1);
            if ( (LA179_0==Await) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    {
                    {
                    AwaitAwaitKeyword_2_0=(Token)match(input,Await,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(AwaitAwaitKeyword_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_79); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt197=2;
            alt197 = dfa197.predict(input);
            switch (alt197) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_4_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    ForInInKeyword_4_0_0_1_0=(Token)match(input,In,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce(ForInInKeyword_4_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    ExpressionExpressionParserRuleCall_4_0_0_2_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((ExpressionExpressionParserRuleCall_4_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_4_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_0_0_2());
                    }
                    }
                    }
                    RightParenthesisKeyword_4_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(RightParenthesisKeyword_4_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt196=3;
                    alt196 = dfa196.predict(input);
                    switch (alt196) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_31);
                            ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return retval;
                            }
                            }
                            int alt188=2;
                            alt188 = dfa188.predict(input);
                            switch (alt188) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_4_1_0_0_1_0_0_0());
                                    }
                                    }
                                    }
                                    int alt180=2;
                                    int LA180_0 = input.LA(1);
                                    if ( (LA180_0==In) ) {
                                        alt180=1;
                                    }
                                    else if ( (LA180_0==Of) ) {
                                        alt180=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 180, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt180) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_4_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_4_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt181=2;
                                    alt181 = dfa181.predict(input);
                                    switch (alt181) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              											announce((ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_0_0_2());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_4_1_0_0_1_1_0());
                                    }
                                    }
                                    }
                                    int alt187=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt187=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt187=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt187=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 187, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt187) {
                                        case 1 :
                                            {
                                            {
                                            loop182:
                                            do {
                                                int alt182=2;
                                                int LA182_0 = input.LA(1);
                                                if ( (LA182_0==Comma) ) {
                                                    alt182=1;
                                                }
                                                switch (alt182) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_4_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      											announce(CommaKeyword_4_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_4_1_0_0_1_1_1_0_0_1());
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop182;
                                                }
                                            } while (true);
                                            SemicolonKeyword_4_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_4_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt183=2;
                                            int LA183_0 = input.LA(1);
                                            if ( ((LA183_0>=Intersection && LA183_0<=Implements)||(LA183_0>=Promisify && LA183_0<=Abstract)||(LA183_0>=External && LA183_0<=Function)||(LA183_0>=Private && LA183_0<=Delete)||(LA183_0>=Import && LA183_0<=Public)||LA183_0==Static||(LA183_0>=Target && LA183_0<=Await)||LA183_0==Class||(LA183_0>=False && LA183_0<=Super)||LA183_0==Union||(LA183_0>=Yield && LA183_0<=This)||(LA183_0>=From && LA183_0<=Void)||(LA183_0>=Get && LA183_0<=Set)||LA183_0==PlusSignPlusSign||(LA183_0>=HyphenMinusHyphenMinus && LA183_0<=SolidusEqualsSign)||LA183_0==As||LA183_0==Of||LA183_0==ExclamationMark||LA183_0==LeftParenthesis||LA183_0==PlusSign||LA183_0==HyphenMinus||LA183_0==Solidus||LA183_0==LessThanSign||(LA183_0>=CommercialAt && LA183_0<=LeftSquareBracket)||LA183_0==LeftCurlyBracket||LA183_0==Tilde||LA183_0==RULE_DOUBLE||(LA183_0>=RULE_HEX_INT && LA183_0<=RULE_LEGACY_OCTAL_INT)||LA183_0==RULE_SCIENTIFIC_INT||LA183_0==RULE_IDENTIFIER||LA183_0==RULE_STRING||(LA183_0>=RULE_TEMPLATE_HEAD && LA183_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA183_0==RULE_INT) ) {
                                                alt183=1;
                                            }
                                            switch (alt183) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_1_1_0_2());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            SemicolonKeyword_4_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_4_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt184=2;
                                            int LA184_0 = input.LA(1);
                                            if ( ((LA184_0>=Intersection && LA184_0<=Implements)||(LA184_0>=Promisify && LA184_0<=Abstract)||(LA184_0>=External && LA184_0<=Function)||(LA184_0>=Private && LA184_0<=Delete)||(LA184_0>=Import && LA184_0<=Public)||LA184_0==Static||(LA184_0>=Target && LA184_0<=Await)||LA184_0==Class||(LA184_0>=False && LA184_0<=Super)||LA184_0==Union||(LA184_0>=Yield && LA184_0<=This)||(LA184_0>=From && LA184_0<=Void)||(LA184_0>=Get && LA184_0<=Set)||LA184_0==PlusSignPlusSign||(LA184_0>=HyphenMinusHyphenMinus && LA184_0<=SolidusEqualsSign)||LA184_0==As||LA184_0==Of||LA184_0==ExclamationMark||LA184_0==LeftParenthesis||LA184_0==PlusSign||LA184_0==HyphenMinus||LA184_0==Solidus||LA184_0==LessThanSign||(LA184_0>=CommercialAt && LA184_0<=LeftSquareBracket)||LA184_0==LeftCurlyBracket||LA184_0==Tilde||LA184_0==RULE_DOUBLE||(LA184_0>=RULE_HEX_INT && LA184_0<=RULE_LEGACY_OCTAL_INT)||LA184_0==RULE_SCIENTIFIC_INT||LA184_0==RULE_IDENTIFIER||LA184_0==RULE_STRING||(LA184_0>=RULE_TEMPLATE_HEAD && LA184_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA184_0==RULE_INT) ) {
                                                alt184=1;
                                            }
                                            switch (alt184) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_73);
                                                    UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_4_1_0_0_1_1_1_0_4());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_4_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_4_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            }
                                            }
                                            int alt185=2;
                                            int LA185_0 = input.LA(1);
                                            if ( ((LA185_0>=Intersection && LA185_0<=Implements)||(LA185_0>=Promisify && LA185_0<=Abstract)||(LA185_0>=External && LA185_0<=Function)||(LA185_0>=Private && LA185_0<=Delete)||(LA185_0>=Import && LA185_0<=Public)||LA185_0==Static||(LA185_0>=Target && LA185_0<=Await)||LA185_0==Class||(LA185_0>=False && LA185_0<=Super)||LA185_0==Union||(LA185_0>=Yield && LA185_0<=This)||(LA185_0>=From && LA185_0<=Void)||(LA185_0>=Get && LA185_0<=Set)||LA185_0==PlusSignPlusSign||(LA185_0>=HyphenMinusHyphenMinus && LA185_0<=SolidusEqualsSign)||LA185_0==As||LA185_0==Of||LA185_0==ExclamationMark||LA185_0==LeftParenthesis||LA185_0==PlusSign||LA185_0==HyphenMinus||LA185_0==Solidus||LA185_0==LessThanSign||(LA185_0>=CommercialAt && LA185_0<=LeftSquareBracket)||LA185_0==LeftCurlyBracket||LA185_0==Tilde||LA185_0==RULE_DOUBLE||(LA185_0>=RULE_HEX_INT && LA185_0<=RULE_LEGACY_OCTAL_INT)||LA185_0==RULE_SCIENTIFIC_INT||LA185_0==RULE_IDENTIFIER||LA185_0==RULE_STRING||(LA185_0>=RULE_TEMPLATE_HEAD && LA185_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA185_0==RULE_INT) ) {
                                                alt185=1;
                                            }
                                            switch (alt185) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_73);
                                                    ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0=norm1_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_1_1_1_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            }
                                            }
                                            int alt186=2;
                                            int LA186_0 = input.LA(1);
                                            if ( ((LA186_0>=Intersection && LA186_0<=Implements)||(LA186_0>=Promisify && LA186_0<=Abstract)||(LA186_0>=External && LA186_0<=Function)||(LA186_0>=Private && LA186_0<=Delete)||(LA186_0>=Import && LA186_0<=Public)||LA186_0==Static||(LA186_0>=Target && LA186_0<=Await)||LA186_0==Class||(LA186_0>=False && LA186_0<=Super)||LA186_0==Union||(LA186_0>=Yield && LA186_0<=This)||(LA186_0>=From && LA186_0<=Void)||(LA186_0>=Get && LA186_0<=Set)||LA186_0==PlusSignPlusSign||(LA186_0>=HyphenMinusHyphenMinus && LA186_0<=SolidusEqualsSign)||LA186_0==As||LA186_0==Of||LA186_0==ExclamationMark||LA186_0==LeftParenthesis||LA186_0==PlusSign||LA186_0==HyphenMinus||LA186_0==Solidus||LA186_0==LessThanSign||(LA186_0>=CommercialAt && LA186_0<=LeftSquareBracket)||LA186_0==LeftCurlyBracket||LA186_0==Tilde||LA186_0==RULE_DOUBLE||(LA186_0>=RULE_HEX_INT && LA186_0<=RULE_LEGACY_OCTAL_INT)||LA186_0==RULE_SCIENTIFIC_INT||LA186_0==RULE_IDENTIFIER||LA186_0==RULE_STRING||(LA186_0>=RULE_TEMPLATE_HEAD && LA186_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA186_0==RULE_INT) ) {
                                                alt186=1;
                                            }
                                            switch (alt186) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_73);
                                                    ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_1_1_2_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_4_1_0_1_0_0=ruleExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((InitExprExpressionParserRuleCall_4_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_4_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_4_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_4_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_4_1_0_1_0());
                            }
                            }
                            }
                            int alt193=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt193=1;
                                }
                                break;
                            case In:
                                {
                                alt193=2;
                                }
                                break;
                            case Of:
                                {
                                alt193=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 193, 0, input);
                                throw nvae;
                            }
                            switch (alt193) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_4_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_4_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt189=2;
                                    int LA189_0 = input.LA(1);
                                    if ( ((LA189_0>=Intersection && LA189_0<=Implements)||(LA189_0>=Promisify && LA189_0<=Abstract)||(LA189_0>=External && LA189_0<=Function)||(LA189_0>=Private && LA189_0<=Delete)||(LA189_0>=Import && LA189_0<=Public)||LA189_0==Static||(LA189_0>=Target && LA189_0<=Await)||LA189_0==Class||(LA189_0>=False && LA189_0<=Super)||LA189_0==Union||(LA189_0>=Yield && LA189_0<=This)||(LA189_0>=From && LA189_0<=Void)||(LA189_0>=Get && LA189_0<=Set)||LA189_0==PlusSignPlusSign||(LA189_0>=HyphenMinusHyphenMinus && LA189_0<=SolidusEqualsSign)||LA189_0==As||LA189_0==Of||LA189_0==ExclamationMark||LA189_0==LeftParenthesis||LA189_0==PlusSign||LA189_0==HyphenMinus||LA189_0==Solidus||LA189_0==LessThanSign||(LA189_0>=CommercialAt && LA189_0<=LeftSquareBracket)||LA189_0==LeftCurlyBracket||LA189_0==Tilde||LA189_0==RULE_DOUBLE||(LA189_0>=RULE_HEX_INT && LA189_0<=RULE_LEGACY_OCTAL_INT)||LA189_0==RULE_SCIENTIFIC_INT||LA189_0==RULE_IDENTIFIER||LA189_0==RULE_STRING||(LA189_0>=RULE_TEMPLATE_HEAD && LA189_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA189_0==RULE_INT) ) {
                                        alt189=1;
                                    }
                                    switch (alt189) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_1_1_0_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    SemicolonKeyword_4_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_4_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt190=2;
                                    int LA190_0 = input.LA(1);
                                    if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Abstract)||(LA190_0>=External && LA190_0<=Function)||(LA190_0>=Private && LA190_0<=Delete)||(LA190_0>=Import && LA190_0<=Public)||LA190_0==Static||(LA190_0>=Target && LA190_0<=Await)||LA190_0==Class||(LA190_0>=False && LA190_0<=Super)||LA190_0==Union||(LA190_0>=Yield && LA190_0<=This)||(LA190_0>=From && LA190_0<=Void)||(LA190_0>=Get && LA190_0<=Set)||LA190_0==PlusSignPlusSign||(LA190_0>=HyphenMinusHyphenMinus && LA190_0<=SolidusEqualsSign)||LA190_0==As||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_HEX_INT && LA190_0<=RULE_LEGACY_OCTAL_INT)||LA190_0==RULE_SCIENTIFIC_INT||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_STRING||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_INT) ) {
                                        alt190=1;
                                    }
                                    switch (alt190) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_4_1_0_1_1_0_3());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_4_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForInInKeyword_4_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    }
                                    }
                                    int alt191=2;
                                    int LA191_0 = input.LA(1);
                                    if ( ((LA191_0>=Intersection && LA191_0<=Implements)||(LA191_0>=Promisify && LA191_0<=Abstract)||(LA191_0>=External && LA191_0<=Function)||(LA191_0>=Private && LA191_0<=Delete)||(LA191_0>=Import && LA191_0<=Public)||LA191_0==Static||(LA191_0>=Target && LA191_0<=Await)||LA191_0==Class||(LA191_0>=False && LA191_0<=Super)||LA191_0==Union||(LA191_0>=Yield && LA191_0<=This)||(LA191_0>=From && LA191_0<=Void)||(LA191_0>=Get && LA191_0<=Set)||LA191_0==PlusSignPlusSign||(LA191_0>=HyphenMinusHyphenMinus && LA191_0<=SolidusEqualsSign)||LA191_0==As||LA191_0==Of||LA191_0==ExclamationMark||LA191_0==LeftParenthesis||LA191_0==PlusSign||LA191_0==HyphenMinus||LA191_0==Solidus||LA191_0==LessThanSign||(LA191_0>=CommercialAt && LA191_0<=LeftSquareBracket)||LA191_0==LeftCurlyBracket||LA191_0==Tilde||LA191_0==RULE_DOUBLE||(LA191_0>=RULE_HEX_INT && LA191_0<=RULE_LEGACY_OCTAL_INT)||LA191_0==RULE_SCIENTIFIC_INT||LA191_0==RULE_IDENTIFIER||LA191_0==RULE_STRING||(LA191_0>=RULE_TEMPLATE_HEAD && LA191_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA191_0==RULE_INT) ) {
                                        alt191=1;
                                    }
                                    switch (alt191) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0=norm1_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_1_1_1_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_4_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_82); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForOfOfKeyword_4_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    }
                                    }
                                    int alt192=2;
                                    int LA192_0 = input.LA(1);
                                    if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||(LA192_0>=Import && LA192_0<=Public)||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||(LA192_0>=HyphenMinusHyphenMinus && LA192_0<=SolidusEqualsSign)||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                        alt192=1;
                                    }
                                    switch (alt192) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0=norm1_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_1_1_2_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_4_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_85); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_4_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt194=2;
                            int LA194_0 = input.LA(1);
                            if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||(LA194_0>=External && LA194_0<=Function)||(LA194_0>=Private && LA194_0<=Delete)||(LA194_0>=Import && LA194_0<=Public)||LA194_0==Static||(LA194_0>=Target && LA194_0<=Await)||LA194_0==Class||(LA194_0>=False && LA194_0<=Super)||LA194_0==Union||(LA194_0>=Yield && LA194_0<=This)||(LA194_0>=From && LA194_0<=Void)||(LA194_0>=Get && LA194_0<=Set)||LA194_0==PlusSignPlusSign||(LA194_0>=HyphenMinusHyphenMinus && LA194_0<=SolidusEqualsSign)||LA194_0==As||LA194_0==Of||LA194_0==ExclamationMark||LA194_0==LeftParenthesis||LA194_0==PlusSign||LA194_0==HyphenMinus||LA194_0==Solidus||LA194_0==LessThanSign||(LA194_0>=CommercialAt && LA194_0<=LeftSquareBracket)||LA194_0==LeftCurlyBracket||LA194_0==Tilde||LA194_0==RULE_DOUBLE||(LA194_0>=RULE_HEX_INT && LA194_0<=RULE_LEGACY_OCTAL_INT)||LA194_0==RULE_SCIENTIFIC_INT||LA194_0==RULE_IDENTIFIER||LA194_0==RULE_STRING||(LA194_0>=RULE_TEMPLATE_HEAD && LA194_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA194_0==RULE_INT) ) {
                                alt194=1;
                            }
                            switch (alt194) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_4_1_0_2_1_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((ExpressionExpressionParserRuleCall_4_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_2_1());
                                    }
                                    }
                                    }
                                    break;
                            }
                            SemicolonKeyword_4_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_82); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_4_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt195=2;
                            int LA195_0 = input.LA(1);
                            if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||(LA195_0>=Import && LA195_0<=Public)||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||(LA195_0>=HyphenMinusHyphenMinus && LA195_0<=SolidusEqualsSign)||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                alt195=1;
                            }
                            switch (alt195) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_73);
                                    UpdateExprExpressionParserRuleCall_4_1_0_2_3_0=norm1_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((UpdateExprExpressionParserRuleCall_4_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_4_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_4_1_0_2_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    RightParenthesisKeyword_4_1_1=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_4_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_5_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_5_0!=null?((Token)StatementStatementParserRuleCall_5_0.start):null), (StatementStatementParserRuleCall_5_0!=null?((Token)StatementStatementParserRuleCall_5_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ForStatement_return retval = new InternalN4JSParser.norm1_ForStatement_return();
        retval.start = input.LT(1);
        Token ForKeyword_1=null;
        Token AwaitAwaitKeyword_2_0=null;
        Token LeftParenthesisKeyword_3=null;
        Token ForInInKeyword_4_0_0_1_0=null;
        Token RightParenthesisKeyword_4_0_0_3=null;
        Token ForInInKeyword_4_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_4_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_4_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_4_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_4_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_4_1_0_1_1_0_0=null;
        Token SemicolonKeyword_4_1_0_1_1_0_2=null;
        Token ForInInKeyword_4_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_4_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_4_1_0_2_0=null;
        Token SemicolonKeyword_4_1_0_2_2=null;
        Token RightParenthesisKeyword_4_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0_0_2_0 = null;
        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0 = null;
        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0 = null;
        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0 = null;
        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0 = null;
        InternalN4JSParser.norm2_Expression_return InitExprExpressionParserRuleCall_4_1_0_1_0_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0 = null;
        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0_2_1_0 = null;
        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_4_1_0_2_3_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_5_0 = null;
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_78); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
            }
            int alt198=2;
            int LA198_0 = input.LA(1);
            if ( (LA198_0==Await) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    {
                    {
                    AwaitAwaitKeyword_2_0=(Token)match(input,Await,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(AwaitAwaitKeyword_2_0, grammarAccess.getForStatementAccess().getAwaitAwaitKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_3());
            }
            int alt216=2;
            alt216 = dfa216.predict(input);
            switch (alt216) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_80);
                    InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0=ruleLetIdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_4_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    ForInInKeyword_4_0_0_1_0=(Token)match(input,In,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce(ForInInKeyword_4_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_0_0_1_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    ExpressionExpressionParserRuleCall_4_0_0_2_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((ExpressionExpressionParserRuleCall_4_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_4_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_0_0_2());
                    }
                    }
                    }
                    RightParenthesisKeyword_4_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(RightParenthesisKeyword_4_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_0_0_3());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    int alt215=3;
                    alt215 = dfa215.predict(input);
                    switch (alt215) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_31);
                            ruleVariableStatementKeyword();
                            state._fsp--;
                            if (state.failed) return retval;
                            }
                            }
                            int alt207=2;
                            alt207 = dfa207.predict(input);
                            switch (alt207) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_4_1_0_0_1_0_0_0());
                                    }
                                    }
                                    }
                                    int alt199=2;
                                    int LA199_0 = input.LA(1);
                                    if ( (LA199_0==In) ) {
                                        alt199=1;
                                    }
                                    else if ( (LA199_0==Of) ) {
                                        alt199=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 199, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt199) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_4_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_89); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_4_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_0_0_1_0_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_89); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_0_0_1_1_0());
                                            }
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    int alt200=2;
                                    alt200 = dfa200.predict(input);
                                    switch (alt200) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              											announce((ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_0_0_2());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_83);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_4_1_0_0_1_1_0());
                                    }
                                    }
                                    }
                                    int alt206=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt206=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt206=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt206=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 206, 0, input);
                                        throw nvae;
                                    }
                                    switch (alt206) {
                                        case 1 :
                                            {
                                            {
                                            loop201:
                                            do {
                                                int alt201=2;
                                                int LA201_0 = input.LA(1);
                                                if ( (LA201_0==Comma) ) {
                                                    alt201=1;
                                                }
                                                switch (alt201) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_4_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_31); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      											announce(CommaKeyword_4_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_4_1_0_0_1_1_1_0_0_0());
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_84);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();
                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_4_1_0_0_1_1_1_0_0_1());
                                            	    }
                                            	    }
                                            	    }
                                            	    }
                                            	    break;
                                            	default :
                                            	    break loop201;
                                                }
                                            } while (true);
                                            SemicolonKeyword_4_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_90); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_4_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_1());
                                            }
                                            int alt202=2;
                                            int LA202_0 = input.LA(1);
                                            if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||(LA202_0>=Import && LA202_0<=Public)||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||(LA202_0>=Get && LA202_0<=Set)||LA202_0==PlusSignPlusSign||(LA202_0>=HyphenMinusHyphenMinus && LA202_0<=SolidusEqualsSign)||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||LA202_0==PlusSign||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_HEX_INT && LA202_0<=RULE_LEGACY_OCTAL_INT)||LA202_0==RULE_SCIENTIFIC_INT||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_STRING||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_INT) ) {
                                                alt202=1;
                                            }
                                            switch (alt202) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_86);
                                                    ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_1_1_0_2());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            SemicolonKeyword_4_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce(SemicolonKeyword_4_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_0_1_1_1_0_3());
                                            }
                                            int alt203=2;
                                            int LA203_0 = input.LA(1);
                                            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||(LA203_0>=Import && LA203_0<=Public)||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||(LA203_0>=HyphenMinusHyphenMinus && LA203_0<=SolidusEqualsSign)||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                                alt203=1;
                                            }
                                            switch (alt203) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_73);
                                                    UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_4_1_0_0_1_1_1_0_4());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_4_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_89); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForInInKeyword_4_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_0_1_1_1_1_0_0());
                                            }
                                            }
                                            }
                                            int alt204=2;
                                            int LA204_0 = input.LA(1);
                                            if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||(LA204_0>=Import && LA204_0<=Public)||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||(LA204_0>=HyphenMinusHyphenMinus && LA204_0<=SolidusEqualsSign)||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {
                                                alt204=1;
                                            }
                                            switch (alt204) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_73);
                                                    ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0=norm3_Expression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_1_1_1_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_89); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              												announce(ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_0_1_1_1_2_0_0());
                                            }
                                            }
                                            }
                                            int alt205=2;
                                            int LA205_0 = input.LA(1);
                                            if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||(LA205_0>=Import && LA205_0<=Public)||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||(LA205_0>=Get && LA205_0<=Set)||LA205_0==PlusSignPlusSign||(LA205_0>=HyphenMinusHyphenMinus && LA205_0<=SolidusEqualsSign)||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||LA205_0==PlusSign||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_HEX_INT && LA205_0<=RULE_LEGACY_OCTAL_INT)||LA205_0==RULE_SCIENTIFIC_INT||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_STRING||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_INT) ) {
                                                alt205=1;
                                            }
                                            switch (alt205) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_73);
                                                    ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();
                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_0_1_1_1_2_1());
                                                    }
                                                    }
                                                    }
                                                    break;
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_87);
                            InitExprExpressionParserRuleCall_4_1_0_1_0_0=norm2_Expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((InitExprExpressionParserRuleCall_4_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_4_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_4_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_4_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_4_1_0_1_0());
                            }
                            }
                            }
                            int alt212=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt212=1;
                                }
                                break;
                            case In:
                                {
                                alt212=2;
                                }
                                break;
                            case Of:
                                {
                                alt212=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 0, input);
                                throw nvae;
                            }
                            switch (alt212) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_4_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_90); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_4_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_0());
                                    }
                                    int alt208=2;
                                    int LA208_0 = input.LA(1);
                                    if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||(LA208_0>=External && LA208_0<=Function)||(LA208_0>=Private && LA208_0<=Delete)||(LA208_0>=Import && LA208_0<=Public)||LA208_0==Static||(LA208_0>=Target && LA208_0<=Await)||LA208_0==Class||(LA208_0>=False && LA208_0<=Super)||LA208_0==Union||(LA208_0>=Yield && LA208_0<=This)||(LA208_0>=From && LA208_0<=Void)||(LA208_0>=Get && LA208_0<=Set)||LA208_0==PlusSignPlusSign||(LA208_0>=HyphenMinusHyphenMinus && LA208_0<=SolidusEqualsSign)||LA208_0==As||LA208_0==Of||LA208_0==ExclamationMark||LA208_0==LeftParenthesis||LA208_0==PlusSign||LA208_0==HyphenMinus||LA208_0==Solidus||LA208_0==LessThanSign||(LA208_0>=CommercialAt && LA208_0<=LeftSquareBracket)||LA208_0==LeftCurlyBracket||LA208_0==Tilde||LA208_0==RULE_DOUBLE||(LA208_0>=RULE_HEX_INT && LA208_0<=RULE_LEGACY_OCTAL_INT)||LA208_0==RULE_SCIENTIFIC_INT||LA208_0==RULE_IDENTIFIER||LA208_0==RULE_STRING||(LA208_0>=RULE_TEMPLATE_HEAD && LA208_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA208_0==RULE_INT) ) {
                                        alt208=1;
                                    }
                                    switch (alt208) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_86);
                                            ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_1_1_0_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    SemicolonKeyword_4_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce(SemicolonKeyword_4_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_1_1_0_2());
                                    }
                                    int alt209=2;
                                    int LA209_0 = input.LA(1);
                                    if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||(LA209_0>=External && LA209_0<=Function)||(LA209_0>=Private && LA209_0<=Delete)||(LA209_0>=Import && LA209_0<=Public)||LA209_0==Static||(LA209_0>=Target && LA209_0<=Await)||LA209_0==Class||(LA209_0>=False && LA209_0<=Super)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||(LA209_0>=From && LA209_0<=Void)||(LA209_0>=Get && LA209_0<=Set)||LA209_0==PlusSignPlusSign||(LA209_0>=HyphenMinusHyphenMinus && LA209_0<=SolidusEqualsSign)||LA209_0==As||LA209_0==Of||LA209_0==ExclamationMark||LA209_0==LeftParenthesis||LA209_0==PlusSign||LA209_0==HyphenMinus||LA209_0==Solidus||LA209_0==LessThanSign||(LA209_0>=CommercialAt && LA209_0<=LeftSquareBracket)||LA209_0==LeftCurlyBracket||LA209_0==Tilde||LA209_0==RULE_DOUBLE||(LA209_0>=RULE_HEX_INT && LA209_0<=RULE_LEGACY_OCTAL_INT)||LA209_0==RULE_SCIENTIFIC_INT||LA209_0==RULE_IDENTIFIER||LA209_0==RULE_STRING||(LA209_0>=RULE_TEMPLATE_HEAD && LA209_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA209_0==RULE_INT) ) {
                                        alt209=1;
                                    }
                                    switch (alt209) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_4_1_0_1_1_0_3());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_4_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_89); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForInInKeyword_4_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_4_1_0_1_1_1_0_0());
                                    }
                                    }
                                    }
                                    int alt210=2;
                                    int LA210_0 = input.LA(1);
                                    if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||(LA210_0>=Import && LA210_0<=Public)||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||(LA210_0>=HyphenMinusHyphenMinus && LA210_0<=SolidusEqualsSign)||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||LA210_0==PlusSign||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_HEX_INT && LA210_0<=RULE_LEGACY_OCTAL_INT)||LA210_0==RULE_SCIENTIFIC_INT||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_STRING||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_INT) ) {
                                        alt210=1;
                                    }
                                    switch (alt210) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0=norm3_Expression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_1_1_1_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_4_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_89); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      										announce(ForOfOfKeyword_4_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_4_1_0_1_1_2_0_0());
                                    }
                                    }
                                    }
                                    int alt211=2;
                                    int LA211_0 = input.LA(1);
                                    if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||(LA211_0>=Import && LA211_0<=Public)||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||(LA211_0>=HyphenMinusHyphenMinus && LA211_0<=SolidusEqualsSign)||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                                        alt211=1;
                                    }
                                    switch (alt211) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_73);
                                            ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0=norm3_AssignmentExpression();
                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                              										announce((ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_1_1_2_1());
                                            }
                                            }
                                            }
                                            break;
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_4_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_90); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_4_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_0());
                            }
                            int alt213=2;
                            int LA213_0 = input.LA(1);
                            if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||(LA213_0>=Import && LA213_0<=Public)||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||(LA213_0>=Get && LA213_0<=Set)||LA213_0==PlusSignPlusSign||(LA213_0>=HyphenMinusHyphenMinus && LA213_0<=SolidusEqualsSign)||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||LA213_0==PlusSign||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                                alt213=1;
                            }
                            switch (alt213) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_86);
                                    ExpressionExpressionParserRuleCall_4_1_0_2_1_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((ExpressionExpressionParserRuleCall_4_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_4_1_0_2_1());
                                    }
                                    }
                                    }
                                    break;
                            }
                            SemicolonKeyword_4_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_89); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(SemicolonKeyword_4_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_4_1_0_2_2());
                            }
                            int alt214=2;
                            int LA214_0 = input.LA(1);
                            if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Abstract)||(LA214_0>=External && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||(LA214_0>=Import && LA214_0<=Public)||LA214_0==Static||(LA214_0>=Target && LA214_0<=Await)||LA214_0==Class||(LA214_0>=False && LA214_0<=Super)||LA214_0==Union||(LA214_0>=Yield && LA214_0<=This)||(LA214_0>=From && LA214_0<=Void)||(LA214_0>=Get && LA214_0<=Set)||LA214_0==PlusSignPlusSign||(LA214_0>=HyphenMinusHyphenMinus && LA214_0<=SolidusEqualsSign)||LA214_0==As||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||LA214_0==PlusSign||LA214_0==HyphenMinus||LA214_0==Solidus||LA214_0==LessThanSign||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_HEX_INT && LA214_0<=RULE_LEGACY_OCTAL_INT)||LA214_0==RULE_SCIENTIFIC_INT||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_STRING||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_INT) ) {
                                alt214=1;
                            }
                            switch (alt214) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_73);
                                    UpdateExprExpressionParserRuleCall_4_1_0_2_3_0=norm3_Expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                      								announce((UpdateExprExpressionParserRuleCall_4_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_4_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_4_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_4_1_0_2_3());
                                    }
                                    }
                                    }
                                    break;
                            }
                            }
                            }
                            break;
                    }
                    RightParenthesisKeyword_4_1_1=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_4_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_4_1_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_5_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_5_0!=null?((Token)StatementStatementParserRuleCall_5_0.start):null), (StatementStatementParserRuleCall_5_0!=null?((Token)StatementStatementParserRuleCall_5_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleLetIdentifierRef_return retval = new InternalN4JSParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleLetAsIdentifier_return retval = new InternalN4JSParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);
        Token LetKeyword=null;
        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSParser.ruleContinueStatement_return retval = new InternalN4JSParser.ruleContinueStatement_return();
        retval.start = input.LT(1);
        Token ContinueKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt217=2;
            int LA217_0 = input.LA(1);
            if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||LA217_0==External||(LA217_0>=Private && LA217_0<=Project)||LA217_0==Public||LA217_0==Static||LA217_0==Target||(LA217_0>=Async && LA217_0<=Await)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||LA217_0==From||LA217_0==Type||(LA217_0>=Get && LA217_0<=Let)||(LA217_0>=Out && LA217_0<=Set)||LA217_0==As||LA217_0==Of||LA217_0==RULE_IDENTIFIER) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ContinueStatement_return retval = new InternalN4JSParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);
        Token ContinueKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
            }
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Abstract)||LA218_0==External||(LA218_0>=Private && LA218_0<=Project)||LA218_0==Public||LA218_0==Static||LA218_0==Target||(LA218_0>=Async && LA218_0<=Await)||LA218_0==Union||LA218_0==This||LA218_0==From||LA218_0==Type||(LA218_0>=Get && LA218_0<=Let)||(LA218_0>=Out && LA218_0<=Set)||LA218_0==As||LA218_0==Of||LA218_0==RULE_IDENTIFIER) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSParser.ruleBreakStatement_return retval = new InternalN4JSParser.ruleBreakStatement_return();
        retval.start = input.LT(1);
        Token BreakKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt219=2;
            int LA219_0 = input.LA(1);
            if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Abstract)||LA219_0==External||(LA219_0>=Private && LA219_0<=Project)||LA219_0==Public||LA219_0==Static||LA219_0==Target||(LA219_0>=Async && LA219_0<=Await)||LA219_0==Union||(LA219_0>=Yield && LA219_0<=This)||LA219_0==From||LA219_0==Type||(LA219_0>=Get && LA219_0<=Let)||(LA219_0>=Out && LA219_0<=Set)||LA219_0==As||LA219_0==Of||LA219_0==RULE_IDENTIFIER) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSParser.norm1_BreakStatement_return retval = new InternalN4JSParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);
        Token BreakKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_91); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
            }
            int alt220=2;
            int LA220_0 = input.LA(1);
            if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||LA220_0==External||(LA220_0>=Private && LA220_0<=Project)||LA220_0==Public||LA220_0==Static||LA220_0==Target||(LA220_0>=Async && LA220_0<=Await)||LA220_0==Union||LA220_0==This||LA220_0==From||LA220_0==Type||(LA220_0>=Get && LA220_0<=Let)||(LA220_0>=Out && LA220_0<=Set)||LA220_0==As||LA220_0==Of||LA220_0==RULE_IDENTIFIER) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSParser.ruleReturnStatement_return retval = new InternalN4JSParser.ruleReturnStatement_return();
        retval.start = input.LT(1);
        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt221=2;
            int LA221_0 = input.LA(1);
            if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||(LA221_0>=External && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||(LA221_0>=Import && LA221_0<=Public)||LA221_0==Static||(LA221_0>=Target && LA221_0<=Await)||LA221_0==Class||(LA221_0>=False && LA221_0<=Super)||LA221_0==Union||(LA221_0>=Yield && LA221_0<=This)||(LA221_0>=From && LA221_0<=Void)||(LA221_0>=Get && LA221_0<=Set)||LA221_0==PlusSignPlusSign||(LA221_0>=HyphenMinusHyphenMinus && LA221_0<=SolidusEqualsSign)||LA221_0==As||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||LA221_0==PlusSign||LA221_0==HyphenMinus||LA221_0==Solidus||LA221_0==LessThanSign||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_HEX_INT && LA221_0<=RULE_LEGACY_OCTAL_INT)||LA221_0==RULE_SCIENTIFIC_INT||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_STRING||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_INT) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ReturnStatement_return retval = new InternalN4JSParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);
        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
            }
            int alt222=2;
            int LA222_0 = input.LA(1);
            if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||(LA222_0>=External && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||(LA222_0>=Import && LA222_0<=Public)||LA222_0==Static||(LA222_0>=Target && LA222_0<=Await)||LA222_0==Class||(LA222_0>=False && LA222_0<=Super)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||(LA222_0>=From && LA222_0<=Void)||(LA222_0>=Get && LA222_0<=Set)||LA222_0==PlusSignPlusSign||(LA222_0>=HyphenMinusHyphenMinus && LA222_0<=SolidusEqualsSign)||LA222_0==As||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||LA222_0==PlusSign||LA222_0==HyphenMinus||LA222_0==Solidus||LA222_0==LessThanSign||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_HEX_INT && LA222_0<=RULE_LEGACY_OCTAL_INT)||LA222_0==RULE_SCIENTIFIC_INT||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_STRING||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_INT) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_22);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSParser.ruleWithStatement_return retval = new InternalN4JSParser.ruleWithStatement_return();
        retval.start = input.LT(1);
        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WithStatement_return retval = new InternalN4JSParser.norm1_WithStatement_return();
        retval.start = input.LT(1);
        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSParser.ruleSwitchStatement_return retval = new InternalN4JSParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);
        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;
        InternalN4JSParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;
        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_94); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);
                if ( (LA223_0==Case) ) {
                    alt223=1;
                }
                switch (alt223) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_94);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop223;
                }
            } while (true);
            int alt225=2;
            int LA225_0 = input.LA(1);
            if ( (LA225_0==Default) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                    }
                    }
                    }
                    loop224:
                    do {
                        int alt224=2;
                        int LA224_0 = input.LA(1);
                        if ( (LA224_0==Case) ) {
                            alt224=1;
                        }
                        switch (alt224) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_95);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop224;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSParser.norm1_SwitchStatement_return retval = new InternalN4JSParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);
        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;
        InternalN4JSParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;
        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
            }
            }
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_94); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
            }
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);
                if ( (LA226_0==Case) ) {
                    alt226=1;
                }
                switch (alt226) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_94);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop226;
                }
            } while (true);
            int alt228=2;
            int LA228_0 = input.LA(1);
            if ( (LA228_0==Default) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                    }
                    }
                    }
                    loop227:
                    do {
                        int alt227=2;
                        int LA227_0 = input.LA(1);
                        if ( (LA227_0==Case) ) {
                            alt227=1;
                        }
                        switch (alt227) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_95);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop227;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSParser.ruleCaseClause_return retval = new InternalN4JSParser.ruleCaseClause_return();
        retval.start = input.LT(1);
        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_96);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
            }
            }
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);
                if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Function)||(LA229_0>=Private && LA229_0<=Delete)||(LA229_0>=Import && LA229_0<=Break)||(LA229_0>=Class && LA229_0<=This)||(LA229_0>=From && LA229_0<=With)||(LA229_0>=For && LA229_0<=Var)||LA229_0==PlusSignPlusSign||(LA229_0>=HyphenMinusHyphenMinus && LA229_0<=SolidusEqualsSign)||(LA229_0>=As && LA229_0<=If)||LA229_0==Of||LA229_0==ExclamationMark||LA229_0==LeftParenthesis||LA229_0==PlusSign||LA229_0==HyphenMinus||LA229_0==Solidus||(LA229_0>=Semicolon && LA229_0<=LessThanSign)||(LA229_0>=CommercialAt && LA229_0<=LeftSquareBracket)||LA229_0==LeftCurlyBracket||LA229_0==Tilde||LA229_0==RULE_DOUBLE||(LA229_0>=RULE_HEX_INT && LA229_0<=RULE_LEGACY_OCTAL_INT)||LA229_0==RULE_SCIENTIFIC_INT||LA229_0==RULE_IDENTIFIER||LA229_0==RULE_STRING||(LA229_0>=RULE_TEMPLATE_HEAD && LA229_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA229_0==RULE_INT) ) {
                    alt229=1;
                }
                switch (alt229) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop229;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSParser.norm1_CaseClause_return retval = new InternalN4JSParser.norm1_CaseClause_return();
        retval.start = input.LT(1);
        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_96);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
            }
            }
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
            }
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);
                if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Function)||(LA230_0>=Private && LA230_0<=Delete)||(LA230_0>=Import && LA230_0<=Break)||(LA230_0>=Class && LA230_0<=This)||(LA230_0>=From && LA230_0<=With)||(LA230_0>=For && LA230_0<=Var)||LA230_0==PlusSignPlusSign||(LA230_0>=HyphenMinusHyphenMinus && LA230_0<=SolidusEqualsSign)||(LA230_0>=As && LA230_0<=If)||LA230_0==Of||LA230_0==ExclamationMark||LA230_0==LeftParenthesis||LA230_0==PlusSign||LA230_0==HyphenMinus||LA230_0==Solidus||(LA230_0>=Semicolon && LA230_0<=LessThanSign)||(LA230_0>=CommercialAt && LA230_0<=LeftSquareBracket)||LA230_0==LeftCurlyBracket||LA230_0==Tilde||LA230_0==RULE_DOUBLE||(LA230_0>=RULE_HEX_INT && LA230_0<=RULE_LEGACY_OCTAL_INT)||LA230_0==RULE_SCIENTIFIC_INT||LA230_0==RULE_IDENTIFIER||LA230_0==RULE_STRING||(LA230_0>=RULE_TEMPLATE_HEAD && LA230_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA230_0==RULE_INT) ) {
                    alt230=1;
                }
                switch (alt230) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_60);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop230;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSParser.ruleDefaultClause_return retval = new InternalN4JSParser.ruleDefaultClause_return();
        retval.start = input.LT(1);
        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_3); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);
                if ( ((LA231_0>=Intersection && LA231_0<=Implements)||(LA231_0>=Promisify && LA231_0<=Function)||(LA231_0>=Private && LA231_0<=Delete)||(LA231_0>=Import && LA231_0<=Break)||(LA231_0>=Class && LA231_0<=This)||(LA231_0>=From && LA231_0<=With)||(LA231_0>=For && LA231_0<=Var)||LA231_0==PlusSignPlusSign||(LA231_0>=HyphenMinusHyphenMinus && LA231_0<=SolidusEqualsSign)||(LA231_0>=As && LA231_0<=If)||LA231_0==Of||LA231_0==ExclamationMark||LA231_0==LeftParenthesis||LA231_0==PlusSign||LA231_0==HyphenMinus||LA231_0==Solidus||(LA231_0>=Semicolon && LA231_0<=LessThanSign)||(LA231_0>=CommercialAt && LA231_0<=LeftSquareBracket)||LA231_0==LeftCurlyBracket||LA231_0==Tilde||LA231_0==RULE_DOUBLE||(LA231_0>=RULE_HEX_INT && LA231_0<=RULE_LEGACY_OCTAL_INT)||LA231_0==RULE_SCIENTIFIC_INT||LA231_0==RULE_IDENTIFIER||LA231_0==RULE_STRING||(LA231_0>=RULE_TEMPLATE_HEAD && LA231_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA231_0==RULE_INT) ) {
                    alt231=1;
                }
                switch (alt231) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop231;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSParser.norm1_DefaultClause_return retval = new InternalN4JSParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);
        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_60); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
            }
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);
                if ( ((LA232_0>=Intersection && LA232_0<=Implements)||(LA232_0>=Promisify && LA232_0<=Function)||(LA232_0>=Private && LA232_0<=Delete)||(LA232_0>=Import && LA232_0<=Break)||(LA232_0>=Class && LA232_0<=This)||(LA232_0>=From && LA232_0<=With)||(LA232_0>=For && LA232_0<=Var)||LA232_0==PlusSignPlusSign||(LA232_0>=HyphenMinusHyphenMinus && LA232_0<=SolidusEqualsSign)||(LA232_0>=As && LA232_0<=If)||LA232_0==Of||LA232_0==ExclamationMark||LA232_0==LeftParenthesis||LA232_0==PlusSign||LA232_0==HyphenMinus||LA232_0==Solidus||(LA232_0>=Semicolon && LA232_0<=LessThanSign)||(LA232_0>=CommercialAt && LA232_0<=LeftSquareBracket)||LA232_0==LeftCurlyBracket||LA232_0==Tilde||LA232_0==RULE_DOUBLE||(LA232_0>=RULE_HEX_INT && LA232_0<=RULE_LEGACY_OCTAL_INT)||LA232_0==RULE_SCIENTIFIC_INT||LA232_0==RULE_IDENTIFIER||LA232_0==RULE_STRING||(LA232_0>=RULE_TEMPLATE_HEAD && LA232_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA232_0==RULE_INT) ) {
                    alt232=1;
                }
                switch (alt232) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_60);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop232;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSParser.ruleLabelledStatement_return retval = new InternalN4JSParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_96);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
            }
            }
            }
            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSParser.norm1_LabelledStatement_return retval = new InternalN4JSParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_96);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
            }
            }
            }
            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_76); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSParser.ruleThrowStatement_return retval = new InternalN4JSParser.ruleThrowStatement_return();
        retval.start = input.LT(1);
        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_22);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ThrowStatement_return retval = new InternalN4JSParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);
        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_22);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
            }
            }
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSParser.ruleTryStatement_return retval = new InternalN4JSParser.ruleTryStatement_return();
        retval.start = input.LT(1);
        Token TryKeyword_0=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;
        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;
        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_97);
            BlockBlockParserRuleCall_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
            }
            }
            }
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==Catch) ) {
                alt234=1;
            }
            else if ( (LA234_0==Finally) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);
                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_98);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                    }
                    }
                    }
                    int alt233=2;
                    int LA233_0 = input.LA(1);
                    if ( (LA233_0==Finally) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSParser.norm1_TryStatement_return retval = new InternalN4JSParser.norm1_TryStatement_return();
        retval.start = input.LT(1);
        Token TryKeyword_0=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;
        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;
        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_97);
            BlockBlockParserRuleCall_1_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
            }
            }
            }
            int alt236=2;
            int LA236_0 = input.LA(1);
            if ( (LA236_0==Catch) ) {
                alt236=1;
            }
            else if ( (LA236_0==Finally) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);
                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_98);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                    }
                    }
                    }
                    int alt235=2;
                    int LA235_0 = input.LA(1);
                    if ( (LA235_0==Finally) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSParser.ruleCatchBlock_return retval = new InternalN4JSParser.ruleCatchBlock_return();
        retval.start = input.LT(1);
        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_73);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSParser.norm1_CatchBlock_return retval = new InternalN4JSParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);
        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_99); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_73);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSParser.ruleCatchVariable_return retval = new InternalN4JSParser.ruleCatchVariable_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        try {
            {
            int alt237=3;
            alt237 = dfa237.predict(input);
            switch (alt237) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_96);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1()); 
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSParser.norm1_CatchVariable_return retval = new InternalN4JSParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_1_0_1 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        try {
            {
            int alt238=3;
            alt238 = dfa238.predict(input);
            switch (alt238) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_96);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_1_0_1=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.start):null), (ColonSepDeclaredTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepDeclaredTypeRefParserRuleCall_1_0_1()); 
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSParser.ruleFinallyBlock_return retval = new InternalN4JSParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);
        Token FinallyKeyword_1=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSParser.norm1_FinallyBlock_return retval = new InternalN4JSParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);
        Token FinallyKeyword_1=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSParser.ruleDebuggerStatement_return retval = new InternalN4JSParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);
        Token DebuggerKeyword_1=null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;
        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_22); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryExpression_return retval = new InternalN4JSParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;
        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;
        InternalN4JSParser.ruleJSXFragment_return JSXFragmentParserRuleCall_3 = null;
        InternalN4JSParser.ruleJSXElement_return JSXElementParserRuleCall_4 = null;
        InternalN4JSParser.ruleImportCallExpression_return ImportCallExpressionParserRuleCall_5 = null;
        InternalN4JSParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_6 = null;
        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_7 = null;
        InternalN4JSParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_8 = null;
        InternalN4JSParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_9 = null;
        InternalN4JSParser.ruleParenExpression_return ParenExpressionParserRuleCall_10 = null;
        InternalN4JSParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_11 = null;
        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_12 = null;
        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_13 = null;
        InternalN4JSParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_14 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_15 = null;
        try {
            {
            int alt239=16;
            alt239 = dfa239.predict(input);
            switch (alt239) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXFragmentParserRuleCall_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.start):null), (JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.start):null), (JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportCallExpressionParserRuleCall_5=ruleImportCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.start):null), (ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_6=ruleParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.start):null), (ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.start):null), (LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_8=ruleArrayLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.start):null), (ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_9=ruleObjectLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.start):null), (ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_10=ruleParenExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.start):null), (ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_11=ruleAnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.start):null), (AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.start):null), (FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.start):null), (AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13()); 
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_14=ruleN4ClassExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.start):null), (N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_15=ruleTemplateLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.start):null), (TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PrimaryExpression_return retval = new InternalN4JSParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;
        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;
        InternalN4JSParser.ruleJSXFragment_return JSXFragmentParserRuleCall_3 = null;
        InternalN4JSParser.ruleJSXElement_return JSXElementParserRuleCall_4 = null;
        InternalN4JSParser.norm1_ImportCallExpression_return ImportCallExpressionParserRuleCall_5 = null;
        InternalN4JSParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_6 = null;
        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_7 = null;
        InternalN4JSParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_8 = null;
        InternalN4JSParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_9 = null;
        InternalN4JSParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_10 = null;
        InternalN4JSParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_11 = null;
        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_12 = null;
        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_13 = null;
        InternalN4JSParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_14 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_15 = null;
        try {
            {
            int alt240=16;
            alt240 = dfa240.predict(input);
            switch (alt240) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXFragmentParserRuleCall_3=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.start):null), (JSXFragmentParserRuleCall_3!=null?((Token)JSXFragmentParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXFragmentParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_4=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.start):null), (JSXElementParserRuleCall_4!=null?((Token)JSXElementParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getJSXElementParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportCallExpressionParserRuleCall_5=norm1_ImportCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.start):null), (ImportCallExpressionParserRuleCall_5!=null?((Token)ImportCallExpressionParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getImportCallExpressionParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_6=norm1_ParameterizedCallExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.start):null), (ParameterizedCallExpressionParserRuleCall_6!=null?((Token)ParameterizedCallExpressionParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_6()); 
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_7=ruleLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.start):null), (LiteralParserRuleCall_7!=null?((Token)LiteralParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_7()); 
                    }
                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_8=norm1_ArrayLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.start):null), (ArrayLiteralParserRuleCall_8!=null?((Token)ArrayLiteralParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_8()); 
                    }
                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_9=norm1_ObjectLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.start):null), (ObjectLiteralParserRuleCall_9!=null?((Token)ObjectLiteralParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_9()); 
                    }
                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_10=norm1_ParenExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.start):null), (ParenExpressionParserRuleCall_10!=null?((Token)ParenExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_10()); 
                    }
                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_11=norm1_AnnotatedExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.start):null), (AnnotatedExpressionParserRuleCall_11!=null?((Token)AnnotatedExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_11()); 
                    }
                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_12=ruleFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.start):null), (FunctionExpressionParserRuleCall_12!=null?((Token)FunctionExpressionParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_12()); 
                    }
                    }
                    break;
                case 14 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_13=ruleAsyncFunctionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.start):null), (AsyncFunctionExpressionParserRuleCall_13!=null?((Token)AsyncFunctionExpressionParserRuleCall_13.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_13()); 
                    }
                    }
                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_14=norm1_N4ClassExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.start):null), (N4ClassExpressionParserRuleCall_14!=null?((Token)N4ClassExpressionParserRuleCall_14.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_14()); 
                    }
                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_15=norm1_TemplateLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.start):null), (TemplateLiteralParserRuleCall_15!=null?((Token)TemplateLiteralParserRuleCall_15.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_15()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSParser.ruleParenExpression_return retval = new InternalN4JSParser.ruleParenExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParenExpression_return retval = new InternalN4JSParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_73);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierRef_return retval = new InternalN4JSParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_1_2 = null;
        try {
            {
            int alt241=2;
            alt241 = dfa241.predict(input);
            switch (alt241) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_100);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_1_1());
                    }
                    }
                    }
                    pushFollow(FOLLOW_2);
                    VersionRequestParserRuleCall_1_2=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.start):null), (VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.stop):null), grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSParser.norm1_IdentifierRef_return retval = new InternalN4JSParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_1_2 = null;
        try {
            {
            int alt242=2;
            alt242 = dfa242.predict(input);
            switch (alt242) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_100);
                    IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment_1_1());
                    }
                    }
                    }
                    pushFollow(FOLLOW_2);
                    VersionRequestParserRuleCall_1_2=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.start):null), (VersionRequestParserRuleCall_1_2!=null?((Token)VersionRequestParserRuleCall_1_2.stop):null), grammarAccess.getIdentifierRefAccess().getVersionRequestParserRuleCall_1_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSParser.ruleSuperLiteral_return retval = new InternalN4JSParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);
        Token SuperKeyword_1=null;
        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSParser.ruleThisLiteral_return retval = new InternalN4JSParser.ruleThisLiteral_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSParser.ruleArrayLiteral_return retval = new InternalN4JSParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);
                if ( (LA243_0==Comma) ) {
                    alt243=1;
                }
                switch (alt243) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_101);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop243;
                }
            } while (true);
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( ((LA248_0>=Intersection && LA248_0<=Implements)||(LA248_0>=Promisify && LA248_0<=Abstract)||(LA248_0>=External && LA248_0<=Function)||(LA248_0>=Private && LA248_0<=Delete)||(LA248_0>=Import && LA248_0<=Public)||LA248_0==Static||(LA248_0>=Target && LA248_0<=Await)||LA248_0==Class||(LA248_0>=False && LA248_0<=Super)||LA248_0==Union||(LA248_0>=Yield && LA248_0<=This)||(LA248_0>=From && LA248_0<=Void)||LA248_0==FullStopFullStopFullStop||(LA248_0>=Get && LA248_0<=Set)||LA248_0==PlusSignPlusSign||(LA248_0>=HyphenMinusHyphenMinus && LA248_0<=SolidusEqualsSign)||LA248_0==As||LA248_0==Of||LA248_0==ExclamationMark||LA248_0==LeftParenthesis||LA248_0==PlusSign||LA248_0==HyphenMinus||LA248_0==Solidus||LA248_0==LessThanSign||(LA248_0>=CommercialAt && LA248_0<=LeftSquareBracket)||LA248_0==LeftCurlyBracket||LA248_0==Tilde||LA248_0==RULE_DOUBLE||(LA248_0>=RULE_HEX_INT && LA248_0<=RULE_LEGACY_OCTAL_INT)||LA248_0==RULE_SCIENTIFIC_INT||LA248_0==RULE_IDENTIFIER||LA248_0==RULE_STRING||(LA248_0>=RULE_TEMPLATE_HEAD && LA248_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA248_0==RULE_INT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_102);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop245:
                    do {
                        int alt245=2;
                        alt245 = dfa245.predict(input);
                        switch (alt245) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_103); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop244:
                    	    do {
                    	        int alt244=2;
                    	        int LA244_0 = input.LA(1);
                    	        if ( (LA244_0==Comma) ) {
                    	            alt244=1;
                    	        }
                    	        switch (alt244) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_103);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop244;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_102);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop245;
                        }
                    } while (true);
                    int alt247=2;
                    int LA247_0 = input.LA(1);
                    if ( (LA247_0==Comma) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            }
                            }
                            loop246:
                            do {
                                int alt246=2;
                                int LA246_0 = input.LA(1);
                                if ( (LA246_0==Comma) ) {
                                    alt246=1;
                                }
                                switch (alt246) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_102);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop246;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayLiteral_return retval = new InternalN4JSParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);
                if ( (LA249_0==Comma) ) {
                    alt249=1;
                }
                switch (alt249) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_104);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop249;
                }
            } while (true);
            int alt254=2;
            int LA254_0 = input.LA(1);
            if ( ((LA254_0>=Intersection && LA254_0<=Implements)||(LA254_0>=Promisify && LA254_0<=Abstract)||(LA254_0>=External && LA254_0<=Function)||(LA254_0>=Private && LA254_0<=Delete)||(LA254_0>=Import && LA254_0<=Public)||LA254_0==Static||(LA254_0>=Target && LA254_0<=Await)||LA254_0==Class||(LA254_0>=False && LA254_0<=Super)||LA254_0==Union||(LA254_0>=Yield && LA254_0<=This)||(LA254_0>=From && LA254_0<=Void)||LA254_0==FullStopFullStopFullStop||(LA254_0>=Get && LA254_0<=Set)||LA254_0==PlusSignPlusSign||(LA254_0>=HyphenMinusHyphenMinus && LA254_0<=SolidusEqualsSign)||LA254_0==As||LA254_0==Of||LA254_0==ExclamationMark||LA254_0==LeftParenthesis||LA254_0==PlusSign||LA254_0==HyphenMinus||LA254_0==Solidus||LA254_0==LessThanSign||(LA254_0>=CommercialAt && LA254_0<=LeftSquareBracket)||LA254_0==LeftCurlyBracket||LA254_0==Tilde||LA254_0==RULE_DOUBLE||(LA254_0>=RULE_HEX_INT && LA254_0<=RULE_LEGACY_OCTAL_INT)||LA254_0==RULE_SCIENTIFIC_INT||LA254_0==RULE_IDENTIFIER||LA254_0==RULE_STRING||(LA254_0>=RULE_TEMPLATE_HEAD && LA254_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA254_0==RULE_INT) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_102);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop251:
                    do {
                        int alt251=2;
                        alt251 = dfa251.predict(input);
                        switch (alt251) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_105); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop250:
                    	    do {
                    	        int alt250=2;
                    	        int LA250_0 = input.LA(1);
                    	        if ( (LA250_0==Comma) ) {
                    	            alt250=1;
                    	        }
                    	        switch (alt250) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_105);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop250;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_102);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop251;
                        }
                    } while (true);
                    int alt253=2;
                    int LA253_0 = input.LA(1);
                    if ( (LA253_0==Comma) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                            }
                            }
                            }
                            loop252:
                            do {
                                int alt252=2;
                                int LA252_0 = input.LA(1);
                                if ( (LA252_0==Comma) ) {
                                    alt252=1;
                                }
                                switch (alt252) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_102);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop252;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSParser.ruleArrayPadding_return retval = new InternalN4JSParser.ruleArrayPadding_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1=null;
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSParser.ruleArrayElement_return retval = new InternalN4JSParser.ruleArrayElement_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt255=2;
            int LA255_0 = input.LA(1);
            if ( (LA255_0==FullStopFullStopFullStop) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayElement_return retval = new InternalN4JSParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt256=2;
            int LA256_0 = input.LA(1);
            if ( (LA256_0==FullStopFullStopFullStop) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSParser.ruleObjectLiteral_return retval = new InternalN4JSParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;
        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( ((LA259_0>=Intersection && LA259_0<=With)||LA259_0==FullStopFullStopFullStop||(LA259_0>=For && LA259_0<=Var)||(LA259_0>=As && LA259_0<=Of)||LA259_0==LeftParenthesis||LA259_0==Asterisk||LA259_0==LessThanSign||(LA259_0>=QuestionMark && LA259_0<=LeftSquareBracket)||LA259_0==LeftCurlyBracket||LA259_0==Tilde||LA259_0==RULE_DOUBLE||(LA259_0>=RULE_HEX_INT && LA259_0<=RULE_OCTAL_INT)||LA259_0==RULE_SCIENTIFIC_INT||LA259_0==RULE_IDENTIFIER||LA259_0==RULE_STRING||LA259_0==RULE_INT) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                    }
                    }
                    }
                    loop257:
                    do {
                        int alt257=2;
                        int LA257_0 = input.LA(1);
                        if ( (LA257_0==Comma) ) {
                            int LA257_1 = input.LA(2);
                            if ( ((LA257_1>=Intersection && LA257_1<=With)||LA257_1==FullStopFullStopFullStop||(LA257_1>=For && LA257_1<=Var)||(LA257_1>=As && LA257_1<=Of)||LA257_1==LeftParenthesis||LA257_1==Asterisk||LA257_1==LessThanSign||(LA257_1>=QuestionMark && LA257_1<=LeftSquareBracket)||LA257_1==LeftCurlyBracket||LA257_1==Tilde||LA257_1==RULE_DOUBLE||(LA257_1>=RULE_HEX_INT && LA257_1<=RULE_OCTAL_INT)||LA257_1==RULE_SCIENTIFIC_INT||LA257_1==RULE_IDENTIFIER||LA257_1==RULE_STRING||LA257_1==RULE_INT) ) {
                                alt257=1;
                            }
                        }
                        switch (alt257) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_107); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop257;
                        }
                    } while (true);
                    int alt258=2;
                    int LA258_0 = input.LA(1);
                    if ( (LA258_0==Comma) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectLiteral_return retval = new InternalN4JSParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;
        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt262=2;
            int LA262_0 = input.LA(1);
            if ( ((LA262_0>=Intersection && LA262_0<=With)||LA262_0==FullStopFullStopFullStop||(LA262_0>=For && LA262_0<=Var)||(LA262_0>=As && LA262_0<=Of)||LA262_0==LeftParenthesis||LA262_0==Asterisk||LA262_0==LessThanSign||(LA262_0>=QuestionMark && LA262_0<=LeftSquareBracket)||LA262_0==LeftCurlyBracket||LA262_0==Tilde||LA262_0==RULE_DOUBLE||(LA262_0>=RULE_HEX_INT && LA262_0<=RULE_OCTAL_INT)||LA262_0==RULE_SCIENTIFIC_INT||LA262_0==RULE_IDENTIFIER||LA262_0==RULE_STRING||LA262_0==RULE_INT) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                    }
                    }
                    }
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);
                        if ( (LA260_0==Comma) ) {
                            int LA260_1 = input.LA(2);
                            if ( ((LA260_1>=Intersection && LA260_1<=With)||LA260_1==FullStopFullStopFullStop||(LA260_1>=For && LA260_1<=Var)||(LA260_1>=As && LA260_1<=Of)||LA260_1==LeftParenthesis||LA260_1==Asterisk||LA260_1==LessThanSign||(LA260_1>=QuestionMark && LA260_1<=LeftSquareBracket)||LA260_1==LeftCurlyBracket||LA260_1==Tilde||LA260_1==RULE_DOUBLE||(LA260_1>=RULE_HEX_INT && LA260_1<=RULE_OCTAL_INT)||LA260_1==RULE_SCIENTIFIC_INT||LA260_1==RULE_IDENTIFIER||LA260_1==RULE_STRING||LA260_1==RULE_INT) ) {
                                alt260=1;
                            }
                        }
                        switch (alt260) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_107); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop260;
                        }
                    } while (true);
                    int alt261=2;
                    int LA261_0 = input.LA(1);
                    if ( (LA261_0==Comma) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignment_return retval = new InternalN4JSParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;
        InternalN4JSParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;
        InternalN4JSParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;
        InternalN4JSParser.rulePropertySpread_return PropertySpreadParserRuleCall_6 = null;
        try {
            {
            int alt263=7;
            alt263 = dfa263.predict(input);
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertySpreadParserRuleCall_6=rulePropertySpread();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.start):null), (PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyAssignment_return retval = new InternalN4JSParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;
        InternalN4JSParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;
        InternalN4JSParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;
        InternalN4JSParser.norm1_PropertySpread_return PropertySpreadParserRuleCall_6 = null;
        try {
            {
            int alt264=7;
            alt264 = dfa264.predict(input);
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertySpreadParserRuleCall_6=norm1_PropertySpread();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.start):null), (PropertySpreadParserRuleCall_6!=null?((Token)PropertySpreadParserRuleCall_6.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySpreadParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);
        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_2_1_0=null;
        Token LeftParenthesisKeyword_1_2_2=null;
        Token RightParenthesisKeyword_1_2_4=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token FullStopFullStopFullStopKeyword_1_5_1=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;
        InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_5_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_108);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt272=6;
            alt272 = dfa272.predict(input);
            switch (alt272) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt265=2;
                    alt265 = dfa265.predict(input);
                    switch (alt265) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_96);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                    }
                    }
                    }
                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_110);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                    }
                    }
                    }
                    }
                    }
                    int alt266=2;
                    int LA266_0 = input.LA(1);
                    if ( (LA266_0==QuestionMark) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_2_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_2_1_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_2_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_2_2, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    FparFormalParameterParserRuleCall_1_2_3_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.start):null), (FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_2_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_2_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_5_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.start):null), (BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_5());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt267=2;
                    int LA267_0 = input.LA(1);
                    if ( (LA267_0==LessThanSign) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_111);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }
                            }
                            break;
                    }
                    int alt268=2;
                    alt268 = dfa268.predict(input);
                    switch (alt268) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_111);
                            DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredReturnTypeRefAssignment_1_3_0_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt269=2;
                    int LA269_0 = input.LA(1);
                    if ( (LA269_0==Asterisk) ) {
                        alt269=1;
                    }
                    else if ( ((LA269_0>=Intersection && LA269_0<=With)||(LA269_0>=For && LA269_0<=Var)||(LA269_0>=As && LA269_0<=Of)||LA269_0==LeftSquareBracket||LA269_0==RULE_DOUBLE||(LA269_0>=RULE_HEX_INT && LA269_0<=RULE_OCTAL_INT)||LA269_0==RULE_SCIENTIFIC_INT||LA269_0==RULE_IDENTIFIER||LA269_0==RULE_STRING||LA269_0==RULE_INT) ) {
                        alt269=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 269, 0, input);
                        throw nvae;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_43);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_46);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt270=2;
                    int LA270_0 = input.LA(1);
                    if ( (LA270_0==Semicolon) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    int alt271=2;
                    alt271 = dfa271.predict(input);
                    switch (alt271) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_113);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0=rulePropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_2());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    FullStopFullStopFullStopKeyword_1_5_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(FullStopFullStopFullStopKeyword_1_5_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_5_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_5_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);
        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_2_1_0=null;
        Token LeftParenthesisKeyword_1_2_2=null;
        Token RightParenthesisKeyword_1_2_4=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token FullStopFullStopFullStopKeyword_1_5_1=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;
        InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_5_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_108);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt280=6;
            alt280 = dfa280.predict(input);
            switch (alt280) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt273=2;
                    alt273 = dfa273.predict(input);
                    switch (alt273) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_96);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                    }
                    }
                    }
                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_110);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                    }
                    }
                    }
                    }
                    }
                    int alt274=2;
                    int LA274_0 = input.LA(1);
                    if ( (LA274_0==QuestionMark) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_2_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_2_1_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredOptionalQuestionMarkKeyword_1_2_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_2_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_2_2, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    FparFormalParameterParserRuleCall_1_2_3_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.start):null), (FparFormalParameterParserRuleCall_1_2_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_3_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_2_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_2_4, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_4());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_5_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.start):null), (BodyBlockParserRuleCall_1_2_5_0!=null?((Token)BodyBlockParserRuleCall_1_2_5_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_5());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt275=2;
                    int LA275_0 = input.LA(1);
                    if ( (LA275_0==LessThanSign) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_111);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }
                            }
                            break;
                    }
                    int alt276=2;
                    alt276 = dfa276.predict(input);
                    switch (alt276) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_111);
                            DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredReturnTypeRefAssignment_1_3_0_0_2());
                            }
                            }
                            }
                            break;
                    }
                    int alt277=2;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==Asterisk) ) {
                        alt277=1;
                    }
                    else if ( ((LA277_0>=Intersection && LA277_0<=With)||(LA277_0>=For && LA277_0<=Var)||(LA277_0>=As && LA277_0<=Of)||LA277_0==LeftSquareBracket||LA277_0==RULE_DOUBLE||(LA277_0>=RULE_HEX_INT && LA277_0<=RULE_OCTAL_INT)||LA277_0==RULE_SCIENTIFIC_INT||LA277_0==RULE_IDENTIFIER||LA277_0==RULE_STRING||LA277_0==RULE_INT) ) {
                        alt277=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 0, input);
                        throw nvae;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_43);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_46);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==Semicolon) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    int alt279=2;
                    alt279 = dfa279.predict(input);
                    switch (alt279) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_113);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                            }
                            }
                            }
                            break;
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0=norm1_PropertyNameValuePairSingleNamePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_2());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    FullStopFullStopFullStopKeyword_1_5_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(FullStopFullStopFullStopKeyword_1_5_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getFullStopFullStopFullStopKeyword_1_5_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_5_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_5_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_5_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_4_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_4_1_1 = null;
        try {
            {
            {
            {
            {
            int alt281=2;
            int LA281_0 = input.LA(1);
            if ( (LA281_0==LessThanSign) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    pushFollow(FOLLOW_111);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }
                    }
                    break;
            }
            int alt282=2;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_111);
                    DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredReturnTypeRefAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_111);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_3=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3()); 
            }
            int alt283=2;
            int LA283_0 = input.LA(1);
            if ( (LA283_0==Asterisk) ) {
                alt283=1;
            }
            else if ( ((LA283_0>=Intersection && LA283_0<=With)||(LA283_0>=For && LA283_0<=Var)||(LA283_0>=As && LA283_0<=Of)||LA283_0==LeftSquareBracket||LA283_0==RULE_DOUBLE||(LA283_0>=RULE_HEX_INT && LA283_0<=RULE_OCTAL_INT)||LA283_0==RULE_SCIENTIFIC_INT||LA283_0==RULE_IDENTIFIER||LA283_0==RULE_STRING||LA283_0==RULE_INT) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_43);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_46);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsAndBodyParserRuleCall_0_0_4_1_1=ruleMethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==Semicolon) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_4_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_4_1_1 = null;
        try {
            {
            {
            {
            {
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==LessThanSign) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_111);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }
                    }
                    break;
            }
            int alt286=2;
            alt286 = dfa286.predict(input);
            switch (alt286) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_111);
                    DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredReturnTypeRefAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_111);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_3=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3()); 
            }
            int alt287=2;
            int LA287_0 = input.LA(1);
            if ( (LA287_0==Asterisk) ) {
                alt287=1;
            }
            else if ( ((LA287_0>=Intersection && LA287_0<=With)||(LA287_0>=For && LA287_0<=Var)||(LA287_0>=As && LA287_0<=Of)||LA287_0==LeftSquareBracket||LA287_0==RULE_DOUBLE||(LA287_0>=RULE_HEX_INT && LA287_0<=RULE_OCTAL_INT)||LA287_0==RULE_SCIENTIFIC_INT||LA287_0==RULE_IDENTIFIER||LA287_0==RULE_STRING||LA287_0==RULE_INT) ) {
                alt287=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);
                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_43);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_46);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsAndBodyParserRuleCall_0_0_4_1_1=ruleMethodParamsAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_4_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_4_1_1()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt288=2;
            int LA288_0 = input.LA(1);
            if ( (LA288_0==Semicolon) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePair_return retval = new InternalN4JSParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_0_0_3_0=null;
        Token ColonKeyword_0_0_4=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            int alt289=2;
            alt289 = dfa289.predict(input);
            switch (alt289) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_114);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            int alt290=2;
            int LA290_0 = input.LA(1);
            if ( (LA290_0==QuestionMark) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_0_0_3_0=(Token)match(input,QuestionMark,FOLLOW_96); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(DeclaredOptionalQuestionMarkKeyword_0_0_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    }
                    }
                    break;
            }
            ColonKeyword_0_0_4=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_0_0_3_0=null;
        Token ColonKeyword_0_0_4=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            int alt291=2;
            alt291 = dfa291.predict(input);
            switch (alt291) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_109);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_114);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            int alt292=2;
            int LA292_0 = input.LA(1);
            if ( (LA292_0==QuestionMark) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_0_0_3_0=(Token)match(input,QuestionMark,FOLLOW_96); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(DeclaredOptionalQuestionMarkKeyword_0_0_3_0, grammarAccess.getPropertyNameValuePairAccess().getDeclaredOptionalQuestionMarkKeyword_0_0_3_0());
                    }
                    }
                    }
                    break;
            }
            ColonKeyword_0_0_4=(Token)match(input,Colon,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ColonKeyword_0_0_4, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_4());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;
        InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt293=2;
            alt293 = dfa293.predict(input);
            switch (alt293) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_113);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0=rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt294=2;
            alt294 = dfa294.predict(input);
            switch (alt294) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_113);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0=norm1_PropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.start):null), (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0!=null?((Token)ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleNamePart();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyNameValuePairSingleNamePart_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return rulePropertyNameValuePairSingleNamePart() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return retval = new InternalN4JSParser.rulePropertyNameValuePairSingleNamePart_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_66);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0()); 
            }
            int alt295=2;
            int LA295_0 = input.LA(1);
            if ( (LA295_0==EqualsSign) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_53);
                    OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.start):null), (OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignment_1_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    RhsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.start):null), (RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignment_1_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyNameValuePairSingleNamePart_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return norm1_PropertyNameValuePairSingleNamePart() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return retval = new InternalN4JSParser.norm1_PropertyNameValuePairSingleNamePart_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_66);
            IdentifierRefParserRuleCall_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getIdentifierRefParserRuleCall_0()); 
            }
            int alt296=2;
            int LA296_0 = input.LA(1);
            if ( (LA296_0==EqualsSign) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_71);
                    OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0=ruleAssignmentOperatorOnlyAssign();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.start):null), (OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0!=null?((Token)OpAssignmentOperatorOnlyAssignParserRuleCall_1_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getOpAssignment_1_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    RhsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.start):null), (RhsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNamePartAccess().getRhsAssignment_1_2());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertySetterDeclaration_return retval = new InternalN4JSParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_110);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt297=2;
            int LA297_0 = input.LA(1);
            if ( (LA297_0==QuestionMark) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_73);
            FparFormalParameterParserRuleCall_3_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_1=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_110);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt298=2;
            int LA298_0 = input.LA(1);
            if ( (LA298_0==QuestionMark) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getPropertySetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_73);
            FparFormalParameterParserRuleCall_3_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_5_0=ruleBlock();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_5());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySpread() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySpread();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertySpread_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertySpread_return rulePropertySpread() throws RecognitionException {
        InternalN4JSParser.rulePropertySpread_return retval = new InternalN4JSParser.rulePropertySpread_return();
        retval.start = input.LT(1);
        Token FullStopFullStopFullStopKeyword_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            FullStopFullStopFullStopKeyword_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FullStopFullStopFullStopKeyword_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertySpreadAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PropertySpread_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertySpread_return norm1_PropertySpread() throws RecognitionException {
        InternalN4JSParser.norm1_PropertySpread_return retval = new InternalN4JSParser.norm1_PropertySpread_return();
        retval.start = input.LT(1);
        Token FullStopFullStopFullStopKeyword_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            FullStopFullStopFullStopKeyword_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FullStopFullStopFullStopKeyword_0, grammarAccess.getPropertySpreadAccess().getFullStopFullStopFullStopKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertySpreadAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedCallExpression_return retval = new InternalN4JSParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_2_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_0 = null;
        InternalN4JSParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_3 = null;
        try {
            {
            {
            pushFollow(FOLLOW_8);
            ConcreteTypeArgumentsParserRuleCall_0=ruleConcreteTypeArguments();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.start):null), (ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_115);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
            }
            }
            }
            int alt299=2;
            int LA299_0 = input.LA(1);
            if ( (LA299_0==QuestionMarkFullStop) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_3=ruleArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.start):null), (ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_2_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_0 = null;
        InternalN4JSParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_3 = null;
        try {
            {
            {
            pushFollow(FOLLOW_8);
            ConcreteTypeArgumentsParserRuleCall_0=ruleConcreteTypeArguments();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.start):null), (ConcreteTypeArgumentsParserRuleCall_0!=null?((Token)ConcreteTypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getConcreteTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_115);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
            }
            }
            }
            int alt300=2;
            int LA300_0 = input.LA(1);
            if ( (LA300_0==QuestionMarkFullStop) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_2_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_2_0, grammarAccess.getParameterizedCallExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_3=norm1_ArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.start):null), (ArgumentsWithParenthesesParserRuleCall_3!=null?((Token)ArgumentsWithParenthesesParserRuleCall_3.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleConcreteTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConcreteTypeArguments_return ruleConcreteTypeArguments() throws RecognitionException {
        InternalN4JSParser.ruleConcreteTypeArguments_return retval = new InternalN4JSParser.ruleConcreteTypeArguments_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getConcreteTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_116);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsAssignment_1());
            }
            }
            }
            loop301:
            do {
                int alt301=2;
                int LA301_0 = input.LA(1);
                if ( (LA301_0==Comma) ) {
                    alt301=1;
                }
                switch (alt301) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_19); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getConcreteTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getConcreteTypeArgumentsAccess().getTypeArgsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop301;
                }
            } while (true);
            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_3, grammarAccess.getConcreteTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleImportCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportCallExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleImportCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportCallExpression_return ruleImportCallExpression() throws RecognitionException {
        InternalN4JSParser.ruleImportCallExpression_return retval = new InternalN4JSParser.ruleImportCallExpression_return();
        retval.start = input.LT(1);
        Token ImportKeyword_0=null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1 = null;
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImportKeyword_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_1=ruleArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.stop):null), grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ImportCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ImportCallExpression_return norm1_ImportCallExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ImportCallExpression_return retval = new InternalN4JSParser.norm1_ImportCallExpression_return();
        retval.start = input.LT(1);
        Token ImportKeyword_0=null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1 = null;
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImportKeyword_0, grammarAccess.getImportCallExpressionAccess().getImportKeyword_0());
            }
            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_1=norm1_ArgumentsWithParentheses();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1.stop):null), grammarAccess.getImportCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.ruleLeftHandSideExpression_return retval = new InternalN4JSParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_1_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=null;
        InternalN4JSParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2 = null;
        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_3_0_2 = null;
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_1_1 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_117);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt306=2;
            int LA306_0 = input.LA(1);
            if ( (LA306_0==QuestionMarkFullStop||LA306_0==LeftParenthesis) ) {
                alt306=1;
            }
            switch (alt306) {
                case 1 :
                    {
                    int alt302=2;
                    int LA302_0 = input.LA(1);
                    if ( (LA302_0==QuestionMarkFullStop) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            {
                            {
                            OptionalChainingQuestionMarkFullStopKeyword_1_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(OptionalChainingQuestionMarkFullStopKeyword_1_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_118);
                    ArgumentsWithParenthesesParserRuleCall_1_2=ruleArgumentsWithParentheses();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2()); 
                    }
                    loop305:
                    do {
                        int alt305=5;
                        int LA305_0 = input.LA(1);
                        if ( (LA305_0==QuestionMarkFullStop) ) {
                            int LA305_2 = input.LA(2);
                            if ( (LA305_2==LeftSquareBracket) ) {
                                alt305=2;
                            }
                            else if ( (LA305_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred174_InternalN4JSParser())) {
                                alt305=4;
                            }
                            else if ( (LA305_2==RULE_TEMPLATE_HEAD) && (synpred174_InternalN4JSParser())) {
                                alt305=4;
                            }
                            else if ( (LA305_2==LeftParenthesis) ) {
                                alt305=1;
                            }
                            else if ( ((LA305_2>=Intersection && LA305_2<=With)||(LA305_2>=For && LA305_2<=Var)||(LA305_2>=As && LA305_2<=Of)||LA305_2==LessThanSign||LA305_2==RULE_IDENTIFIER) ) {
                                alt305=3;
                            }
                        }
                        else if ( (LA305_0==LeftParenthesis) ) {
                            alt305=1;
                        }
                        else if ( (LA305_0==LeftSquareBracket) ) {
                            alt305=2;
                        }
                        else if ( (LA305_0==FullStop) ) {
                            alt305=3;
                        }
                        else if ( (LA305_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred174_InternalN4JSParser())) {
                            alt305=4;
                        }
                        else if ( (LA305_0==RULE_TEMPLATE_HEAD) && (synpred174_InternalN4JSParser())) {
                            alt305=4;
                        }
                        switch (alt305) {
                    	case 1 :
                    	    {
                    	    {
                    	    int alt303=2;
                    	    int LA303_0 = input.LA(1);
                    	    if ( (LA303_0==QuestionMarkFullStop) ) {
                    	        alt303=1;
                    	    }
                    	    switch (alt303) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_118);
                    	    ArgumentsWithParenthesesParserRuleCall_1_3_0_2=ruleArgumentsWithParentheses();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    IndexedAccessExpressionTailParserRuleCall_1_3_1_1=ruleIndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1=ruleParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    int alt304=2;
                    	    int LA304_0 = input.LA(1);
                    	    if ( (LA304_0==QuestionMarkFullStop) ) {
                    	        alt304=1;
                    	    }
                    	    switch (alt304) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_119); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_3_3_0_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop305;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_1_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=null;
        InternalN4JSParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2 = null;
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_3_0_2 = null;
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_1_1 = null;
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_117);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt311=2;
            int LA311_0 = input.LA(1);
            if ( (LA311_0==QuestionMarkFullStop||LA311_0==LeftParenthesis) ) {
                alt311=1;
            }
            switch (alt311) {
                case 1 :
                    {
                    int alt307=2;
                    int LA307_0 = input.LA(1);
                    if ( (LA307_0==QuestionMarkFullStop) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            {
                            {
                            OptionalChainingQuestionMarkFullStopKeyword_1_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(OptionalChainingQuestionMarkFullStopKeyword_1_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_118);
                    ArgumentsWithParenthesesParserRuleCall_1_2=norm1_ArgumentsWithParentheses();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2()); 
                    }
                    loop310:
                    do {
                        int alt310=5;
                        int LA310_0 = input.LA(1);
                        if ( (LA310_0==QuestionMarkFullStop) ) {
                            int LA310_2 = input.LA(2);
                            if ( (LA310_2==LeftSquareBracket) ) {
                                alt310=2;
                            }
                            else if ( ((LA310_2>=Intersection && LA310_2<=With)||(LA310_2>=For && LA310_2<=Var)||(LA310_2>=As && LA310_2<=Of)||LA310_2==LessThanSign||LA310_2==RULE_IDENTIFIER) ) {
                                alt310=3;
                            }
                            else if ( (LA310_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred175_InternalN4JSParser())) {
                                alt310=4;
                            }
                            else if ( (LA310_2==RULE_TEMPLATE_HEAD) && (synpred175_InternalN4JSParser())) {
                                alt310=4;
                            }
                            else if ( (LA310_2==LeftParenthesis) ) {
                                alt310=1;
                            }
                        }
                        else if ( (LA310_0==LeftParenthesis) ) {
                            alt310=1;
                        }
                        else if ( (LA310_0==LeftSquareBracket) ) {
                            alt310=2;
                        }
                        else if ( (LA310_0==FullStop) ) {
                            alt310=3;
                        }
                        else if ( (LA310_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred175_InternalN4JSParser())) {
                            alt310=4;
                        }
                        else if ( (LA310_0==RULE_TEMPLATE_HEAD) && (synpred175_InternalN4JSParser())) {
                            alt310=4;
                        }
                        switch (alt310) {
                    	case 1 :
                    	    {
                    	    {
                    	    int alt308=2;
                    	    int LA308_0 = input.LA(1);
                    	    if ( (LA308_0==QuestionMarkFullStop) ) {
                    	        alt308=1;
                    	    }
                    	    switch (alt308) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_115); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_118);
                    	    ArgumentsWithParenthesesParserRuleCall_1_3_0_2=norm1_ArgumentsWithParentheses();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.start):null), (ArgumentsWithParenthesesParserRuleCall_1_3_0_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_3_0_2.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_3_0_2()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    IndexedAccessExpressionTailParserRuleCall_1_3_1_1=norm1_IndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1=norm1_ParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_2_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    int alt309=2;
                    	    int LA309_0 = input.LA(1);
                    	    if ( (LA309_0==QuestionMarkFullStop) ) {
                    	        alt309=1;
                    	    }
                    	    switch (alt309) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_119); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0, grammarAccess.getLeftHandSideExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_0_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_0_2_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_3_3_0_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop310;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( ((LA312_0>=Intersection && LA312_0<=Implements)||(LA312_0>=Promisify && LA312_0<=Abstract)||(LA312_0>=External && LA312_0<=Function)||(LA312_0>=Private && LA312_0<=Delete)||(LA312_0>=Import && LA312_0<=Public)||LA312_0==Static||(LA312_0>=Target && LA312_0<=Await)||LA312_0==Class||(LA312_0>=False && LA312_0<=Super)||LA312_0==Union||(LA312_0>=Yield && LA312_0<=This)||(LA312_0>=From && LA312_0<=Void)||LA312_0==FullStopFullStopFullStop||(LA312_0>=Get && LA312_0<=Set)||LA312_0==PlusSignPlusSign||(LA312_0>=HyphenMinusHyphenMinus && LA312_0<=SolidusEqualsSign)||LA312_0==As||LA312_0==Of||LA312_0==ExclamationMark||LA312_0==LeftParenthesis||LA312_0==PlusSign||LA312_0==HyphenMinus||LA312_0==Solidus||LA312_0==LessThanSign||(LA312_0>=CommercialAt && LA312_0<=LeftSquareBracket)||LA312_0==LeftCurlyBracket||LA312_0==Tilde||LA312_0==RULE_DOUBLE||(LA312_0>=RULE_HEX_INT && LA312_0<=RULE_LEGACY_OCTAL_INT)||LA312_0==RULE_SCIENTIFIC_INT||LA312_0==RULE_IDENTIFIER||LA312_0==RULE_STRING||(LA312_0>=RULE_TEMPLATE_HEAD && LA312_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA312_0==RULE_INT) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    {
                    pushFollow(FOLLOW_73);
                    ArgumentsParserRuleCall_1=ruleArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_121); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
            }
            int alt313=2;
            int LA313_0 = input.LA(1);
            if ( ((LA313_0>=Intersection && LA313_0<=Implements)||(LA313_0>=Promisify && LA313_0<=Abstract)||(LA313_0>=External && LA313_0<=Function)||(LA313_0>=Private && LA313_0<=Delete)||(LA313_0>=Import && LA313_0<=Public)||LA313_0==Static||(LA313_0>=Target && LA313_0<=Await)||LA313_0==Class||(LA313_0>=False && LA313_0<=Super)||LA313_0==Union||(LA313_0>=Yield && LA313_0<=This)||(LA313_0>=From && LA313_0<=Void)||LA313_0==FullStopFullStopFullStop||(LA313_0>=Get && LA313_0<=Set)||LA313_0==PlusSignPlusSign||(LA313_0>=HyphenMinusHyphenMinus && LA313_0<=SolidusEqualsSign)||LA313_0==As||LA313_0==Of||LA313_0==ExclamationMark||LA313_0==LeftParenthesis||LA313_0==PlusSign||LA313_0==HyphenMinus||LA313_0==Solidus||LA313_0==LessThanSign||(LA313_0>=CommercialAt && LA313_0<=LeftSquareBracket)||LA313_0==LeftCurlyBracket||LA313_0==Tilde||LA313_0==RULE_DOUBLE||(LA313_0>=RULE_HEX_INT && LA313_0<=RULE_LEGACY_OCTAL_INT)||LA313_0==RULE_SCIENTIFIC_INT||LA313_0==RULE_IDENTIFIER||LA313_0==RULE_STRING||(LA313_0>=RULE_TEMPLATE_HEAD && LA313_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA313_0==RULE_INT) ) {
                alt313=1;
            }
            switch (alt313) {
                case 1 :
                    {
                    pushFollow(FOLLOW_73);
                    ArgumentsParserRuleCall_1=norm1_Arguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSParser.ruleArguments_return retval = new InternalN4JSParser.ruleArguments_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_34);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
            }
            }
            }
            loop314:
            do {
                int alt314=2;
                int LA314_0 = input.LA(1);
                if ( (LA314_0==Comma) ) {
                    alt314=1;
                }
                switch (alt314) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_122); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_34);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop314;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSParser.norm1_Arguments_return retval = new InternalN4JSParser.norm1_Arguments_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_0=null;
        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_34);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
            }
            }
            }
            loop315:
            do {
                int alt315=2;
                int LA315_0 = input.LA(1);
                if ( (LA315_0==Comma) ) {
                    alt315=1;
                }
                switch (alt315) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_123); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_34);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop315;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSParser.ruleArgument_return retval = new InternalN4JSParser.ruleArgument_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( (LA316_0==FullStopFullStopFullStop) ) {
                alt316=1;
            }
            switch (alt316) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSParser.norm1_Argument_return retval = new InternalN4JSParser.norm1_Argument_return();
        retval.start = input.LT(1);
        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            int alt317=2;
            int LA317_0 = input.LA(1);
            if ( (LA317_0==FullStopFullStopFullStop) ) {
                alt317=1;
            }
            switch (alt317) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSParser.ruleMemberExpression_return retval = new InternalN4JSParser.ruleMemberExpression_return();
        retval.start = input.LT(1);
        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=null;
        InternalN4JSParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1_2 = null;
        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0 = null;
        InternalN4JSParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;
        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_2_0 = null;
        try {
            {
            int alt325=3;
            alt325 = dfa325.predict(input);
            switch (alt325) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_126);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                    }
                    }
                    }
                    int alt318=2;
                    int LA318_0 = input.LA(1);
                    if ( (LA318_0==LessThanSign) ) {
                        int LA318_1 = input.LA(2);
                        if ( (synpred178_InternalN4JSParser()) ) {
                            alt318=1;
                        }
                    }
                    switch (alt318) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_127);
                            ConcreteTypeArgumentsParserRuleCall_1_2=ruleConcreteTypeArguments();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.start):null), (ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2()); 
                            }
                            }
                            break;
                    }
                    int alt322=2;
                    int LA322_0 = input.LA(1);
                    if ( (LA322_0==LeftParenthesis) ) {
                        int LA322_1 = input.LA(2);
                        if ( (synpred179_InternalN4JSParser()) ) {
                            alt322=1;
                        }
                    }
                    switch (alt322) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_120); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            }
                            }
                            int alt319=2;
                            int LA319_0 = input.LA(1);
                            if ( ((LA319_0>=Intersection && LA319_0<=Implements)||(LA319_0>=Promisify && LA319_0<=Abstract)||(LA319_0>=External && LA319_0<=Function)||(LA319_0>=Private && LA319_0<=Delete)||(LA319_0>=Import && LA319_0<=Public)||LA319_0==Static||(LA319_0>=Target && LA319_0<=Await)||LA319_0==Class||(LA319_0>=False && LA319_0<=Super)||LA319_0==Union||(LA319_0>=Yield && LA319_0<=This)||(LA319_0>=From && LA319_0<=Void)||LA319_0==FullStopFullStopFullStop||(LA319_0>=Get && LA319_0<=Set)||LA319_0==PlusSignPlusSign||(LA319_0>=HyphenMinusHyphenMinus && LA319_0<=SolidusEqualsSign)||LA319_0==As||LA319_0==Of||LA319_0==ExclamationMark||LA319_0==LeftParenthesis||LA319_0==PlusSign||LA319_0==HyphenMinus||LA319_0==Solidus||LA319_0==LessThanSign||(LA319_0>=CommercialAt && LA319_0<=LeftSquareBracket)||LA319_0==LeftCurlyBracket||LA319_0==Tilde||LA319_0==RULE_DOUBLE||(LA319_0>=RULE_HEX_INT && LA319_0<=RULE_LEGACY_OCTAL_INT)||LA319_0==RULE_SCIENTIFIC_INT||LA319_0==RULE_IDENTIFIER||LA319_0==RULE_STRING||(LA319_0>=RULE_TEMPLATE_HEAD && LA319_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA319_0==RULE_INT) ) {
                                alt319=1;
                            }
                            switch (alt319) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_73);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }
                                    }
                                    break;
                            }
                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_118); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop321:
                            do {
                                int alt321=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case LeftSquareBracket:
                                        {
                                        alt321=1;
                                        }
                                        break;
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt321=3;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt321=2;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt321=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt321=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt321=3;
                                    }
                                    break;
                                }
                                switch (alt321) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_118);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_118);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    int alt320=2;
                            	    int LA320_0 = input.LA(1);
                            	    if ( (LA320_0==QuestionMarkFullStop) ) {
                            	        alt320=1;
                            	    }
                            	    switch (alt320) {
                            	        case 1 :
                            	            {
                            	            {
                            	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_119); if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) {
                            	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_118);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0=ruleTemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_2());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop321;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_118);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop324:
                    do {
                        int alt324=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt324=2;
                                }
                                break;
                            case LeftSquareBracket:
                                {
                                alt324=1;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt324=3;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt324=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt324=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt324=3;
                            }
                            break;
                        }
                        switch (alt324) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    int alt323=2;
                    	    int LA323_0 = input.LA(1);
                    	    if ( (LA323_0==QuestionMarkFullStop) ) {
                    	        alt323=1;
                    	    }
                    	    switch (alt323) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_119); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_2_0=ruleTemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop324;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MemberExpression_return retval = new InternalN4JSParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);
        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=null;
        InternalN4JSParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1_2 = null;
        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0 = null;
        InternalN4JSParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;
        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_2_0 = null;
        try {
            {
            int alt333=3;
            alt333 = dfa333.predict(input);
            switch (alt333) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                    }
                    }
                    }
                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_126);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                    }
                    }
                    }
                    int alt326=2;
                    int LA326_0 = input.LA(1);
                    if ( (LA326_0==LessThanSign) ) {
                        int LA326_1 = input.LA(2);
                        if ( (synpred182_InternalN4JSParser()) ) {
                            alt326=1;
                        }
                    }
                    switch (alt326) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_127);
                            ConcreteTypeArgumentsParserRuleCall_1_2=ruleConcreteTypeArguments();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.start):null), (ConcreteTypeArgumentsParserRuleCall_1_2!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getConcreteTypeArgumentsParserRuleCall_1_2()); 
                            }
                            }
                            break;
                    }
                    int alt330=2;
                    int LA330_0 = input.LA(1);
                    if ( (LA330_0==LeftParenthesis) ) {
                        int LA330_1 = input.LA(2);
                        if ( (synpred183_InternalN4JSParser()) ) {
                            alt330=1;
                        }
                    }
                    switch (alt330) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_121); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                            }
                            }
                            }
                            int alt327=2;
                            int LA327_0 = input.LA(1);
                            if ( ((LA327_0>=Intersection && LA327_0<=Implements)||(LA327_0>=Promisify && LA327_0<=Abstract)||(LA327_0>=External && LA327_0<=Function)||(LA327_0>=Private && LA327_0<=Delete)||(LA327_0>=Import && LA327_0<=Public)||LA327_0==Static||(LA327_0>=Target && LA327_0<=Await)||LA327_0==Class||(LA327_0>=False && LA327_0<=Super)||LA327_0==Union||(LA327_0>=Yield && LA327_0<=This)||(LA327_0>=From && LA327_0<=Void)||LA327_0==FullStopFullStopFullStop||(LA327_0>=Get && LA327_0<=Set)||LA327_0==PlusSignPlusSign||(LA327_0>=HyphenMinusHyphenMinus && LA327_0<=SolidusEqualsSign)||LA327_0==As||LA327_0==Of||LA327_0==ExclamationMark||LA327_0==LeftParenthesis||LA327_0==PlusSign||LA327_0==HyphenMinus||LA327_0==Solidus||LA327_0==LessThanSign||(LA327_0>=CommercialAt && LA327_0<=LeftSquareBracket)||LA327_0==LeftCurlyBracket||LA327_0==Tilde||LA327_0==RULE_DOUBLE||(LA327_0>=RULE_HEX_INT && LA327_0<=RULE_LEGACY_OCTAL_INT)||LA327_0==RULE_SCIENTIFIC_INT||LA327_0==RULE_IDENTIFIER||LA327_0==RULE_STRING||(LA327_0>=RULE_TEMPLATE_HEAD && LA327_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA327_0==RULE_INT) ) {
                                alt327=1;
                            }
                            switch (alt327) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_73);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }
                                    }
                                    break;
                            }
                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_118); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                            }
                            loop329:
                            do {
                                int alt329=4;
                                switch ( input.LA(1) ) {
                                case QuestionMarkFullStop:
                                    {
                                    switch ( input.LA(2) ) {
                                    case RULE_TEMPLATE_HEAD:
                                    case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                        {
                                        alt329=3;
                                        }
                                        break;
                                    case LeftSquareBracket:
                                        {
                                        alt329=1;
                                        }
                                        break;
                                    case Intersection:
                                    case Constructor:
                                    case Implements:
                                    case Instanceof:
                                    case Promisify:
                                    case Interface:
                                    case Protected:
                                    case Abstract:
                                    case Continue:
                                    case Debugger:
                                    case External:
                                    case Function:
                                    case Default:
                                    case Extends:
                                    case Finally:
                                    case Private:
                                    case Project:
                                    case Delete:
                                    case Export:
                                    case Import:
                                    case Public:
                                    case Return:
                                    case Static:
                                    case Switch:
                                    case Target:
                                    case Typeof:
                                    case Async:
                                    case Await:
                                    case Break:
                                    case Catch:
                                    case Class:
                                    case Const:
                                    case False:
                                    case Super:
                                    case Throw:
                                    case Union:
                                    case While:
                                    case Yield:
                                    case This:
                                    case Case:
                                    case Else:
                                    case Enum:
                                    case From:
                                    case Null:
                                    case This_1:
                                    case True:
                                    case Type:
                                    case Void:
                                    case With:
                                    case For:
                                    case Get:
                                    case Let:
                                    case New:
                                    case Out:
                                    case Set:
                                    case Try:
                                    case Var:
                                    case As:
                                    case Do:
                                    case If:
                                    case In:
                                    case Of:
                                    case LessThanSign:
                                    case RULE_IDENTIFIER:
                                        {
                                        alt329=2;
                                        }
                                        break;
                                    }
                                    }
                                    break;
                                case LeftSquareBracket:
                                    {
                                    alt329=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt329=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt329=3;
                                    }
                                    break;
                                }
                                switch (alt329) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_118);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_118);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }
                            	    }
                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    int alt328=2;
                            	    int LA328_0 = input.LA(1);
                            	    if ( (LA328_0==QuestionMarkFullStop) ) {
                            	        alt328=1;
                            	    }
                            	    switch (alt328) {
                            	        case 1 :
                            	            {
                            	            {
                            	            OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_119); if (state.failed) return retval;
                            	            if ( state.backtracking==0 ) {
                            	              								announce(OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0());
                            	            }
                            	            }
                            	            }
                            	            break;
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_118);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0=norm1_TemplateLiteral();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_2());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop329;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_118);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop332:
                    do {
                        int alt332=4;
                        switch ( input.LA(1) ) {
                        case QuestionMarkFullStop:
                            {
                            switch ( input.LA(2) ) {
                            case LeftSquareBracket:
                                {
                                alt332=1;
                                }
                                break;
                            case Intersection:
                            case Constructor:
                            case Implements:
                            case Instanceof:
                            case Promisify:
                            case Interface:
                            case Protected:
                            case Abstract:
                            case Continue:
                            case Debugger:
                            case External:
                            case Function:
                            case Default:
                            case Extends:
                            case Finally:
                            case Private:
                            case Project:
                            case Delete:
                            case Export:
                            case Import:
                            case Public:
                            case Return:
                            case Static:
                            case Switch:
                            case Target:
                            case Typeof:
                            case Async:
                            case Await:
                            case Break:
                            case Catch:
                            case Class:
                            case Const:
                            case False:
                            case Super:
                            case Throw:
                            case Union:
                            case While:
                            case Yield:
                            case This:
                            case Case:
                            case Else:
                            case Enum:
                            case From:
                            case Null:
                            case This_1:
                            case True:
                            case Type:
                            case Void:
                            case With:
                            case For:
                            case Get:
                            case Let:
                            case New:
                            case Out:
                            case Set:
                            case Try:
                            case Var:
                            case As:
                            case Do:
                            case If:
                            case In:
                            case Of:
                            case LessThanSign:
                            case RULE_IDENTIFIER:
                                {
                                alt332=2;
                                }
                                break;
                            case RULE_TEMPLATE_HEAD:
                            case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                {
                                alt332=3;
                                }
                                break;
                            }
                            }
                            break;
                        case LeftSquareBracket:
                            {
                            alt332=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt332=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt332=3;
                            }
                            break;
                        }
                        switch (alt332) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }
                    	    }
                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    int alt331=2;
                    	    int LA331_0 = input.LA(1);
                    	    if ( (LA331_0==QuestionMarkFullStop) ) {
                    	        alt331=1;
                    	    }
                    	    switch (alt331) {
                    	        case 1 :
                    	            {
                    	            {
                    	            OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_119); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce(OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0, grammarAccess.getMemberExpressionAccess().getOptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_118);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_2_0=norm1_TemplateLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop332;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_0_0=null;
        Token LeftSquareBracketKeyword_1=null;
        Token RightSquareBracketKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return IndexExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt334=2;
            int LA334_0 = input.LA(1);
            if ( (LA334_0==QuestionMarkFullStop) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_129);
            IndexExpressionParserRuleCall_2_0=norm1_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.start):null), (IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_2());
            }
            }
            }
            RightSquareBracketKeyword_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token OptionalChainingQuestionMarkFullStopKeyword_0_0=null;
        Token LeftSquareBracketKeyword_1=null;
        Token RightSquareBracketKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return IndexExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            int alt335=2;
            int LA335_0 = input.LA(1);
            if ( (LA335_0==QuestionMarkFullStop) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalChainingQuestionMarkFullStopKeyword_0_0, grammarAccess.getIndexedAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_129);
            IndexExpressionParserRuleCall_2_0=norm3_Expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.start):null), (IndexExpressionParserRuleCall_2_0!=null?((Token)IndexExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_2());
            }
            }
            }
            RightSquareBracketKeyword_3=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_3, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token FullStopKeyword_0_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_0_1_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1 = null;
        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;
        try {
            {
            {
            int alt336=2;
            int LA336_0 = input.LA(1);
            if ( (LA336_0==FullStop) ) {
                alt336=1;
            }
            else if ( (LA336_0==QuestionMarkFullStop) ) {
                alt336=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);
                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    FullStopKeyword_0_0=(Token)match(input,FullStop,FOLLOW_130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FullStopKeyword_0_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(OptionalChainingQuestionMarkFullStopKeyword_0_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            int alt337=2;
            int LA337_0 = input.LA(1);
            if ( (LA337_0==LessThanSign) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    {
                    pushFollow(FOLLOW_14);
                    ConcreteTypeArgumentsParserRuleCall_1=ruleConcreteTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.start):null), (ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);
        Token FullStopKeyword_0_0=null;
        Token OptionalChainingQuestionMarkFullStopKeyword_0_1_0=null;
        InternalN4JSParser.ruleConcreteTypeArguments_return ConcreteTypeArgumentsParserRuleCall_1 = null;
        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;
        try {
            {
            {
            int alt338=2;
            int LA338_0 = input.LA(1);
            if ( (LA338_0==FullStop) ) {
                alt338=1;
            }
            else if ( (LA338_0==QuestionMarkFullStop) ) {
                alt338=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);
                throw nvae;
            }
            switch (alt338) {
                case 1 :
                    {
                    FullStopKeyword_0_0=(Token)match(input,FullStop,FOLLOW_130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FullStopKeyword_0_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    OptionalChainingQuestionMarkFullStopKeyword_0_1_0=(Token)match(input,QuestionMarkFullStop,FOLLOW_130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(OptionalChainingQuestionMarkFullStopKeyword_0_1_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getOptionalChainingQuestionMarkFullStopKeyword_0_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            int alt339=2;
            int LA339_0 = input.LA(1);
            if ( (LA339_0==LessThanSign) ) {
                alt339=1;
            }
            switch (alt339) {
                case 1 :
                    {
                    pushFollow(FOLLOW_14);
                    ConcreteTypeArgumentsParserRuleCall_1=ruleConcreteTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.start):null), (ConcreteTypeArgumentsParserRuleCall_1!=null?((Token)ConcreteTypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getConcreteTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSParser.rulePostfixExpression_return retval = new InternalN4JSParser.rulePostfixExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_131);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            int alt340=2;
            int LA340_0 = input.LA(1);
            if ( (LA340_0==PlusSignPlusSign) && (synpred184_InternalN4JSParser())) {
                alt340=1;
            }
            else if ( (LA340_0==HyphenMinusHyphenMinus) && (synpred184_InternalN4JSParser())) {
                alt340=1;
            }
            switch (alt340) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PostfixExpression_return retval = new InternalN4JSParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_131);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
            }
            int alt341=2;
            int LA341_0 = input.LA(1);
            if ( (LA341_0==PlusSignPlusSign) && (synpred185_InternalN4JSParser())) {
                alt341=1;
            }
            else if ( (LA341_0==HyphenMinusHyphenMinus) && (synpred185_InternalN4JSParser())) {
                alt341=1;
            }
            switch (alt341) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSParser.ruleCastExpression_return retval = new InternalN4JSParser.ruleCastExpression_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayTypeExpression_return TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_28);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt342=2;
            int LA342_0 = input.LA(1);
            if ( (LA342_0==As) && (synpred186_InternalN4JSParser())) {
                alt342=1;
            }
            switch (alt342) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0=ruleArrayTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.start):null), (TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSParser.norm1_CastExpression_return retval = new InternalN4JSParser.norm1_CastExpression_return();
        retval.start = input.LT(1);
        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayTypeExpression_return TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_28);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt343=2;
            int LA343_0 = input.LA(1);
            if ( (LA343_0==As) && (synpred187_InternalN4JSParser())) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0=ruleArrayTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.start):null), (TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0!=null?((Token)TargetTypeRefArrayTypeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnaryExpression_return retval = new InternalN4JSParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            int alt344=2;
            int LA344_0 = input.LA(1);
            if ( ((LA344_0>=Intersection && LA344_0<=Implements)||(LA344_0>=Promisify && LA344_0<=Abstract)||(LA344_0>=External && LA344_0<=Function)||(LA344_0>=Private && LA344_0<=Project)||(LA344_0>=Import && LA344_0<=Public)||LA344_0==Static||LA344_0==Target||(LA344_0>=Async && LA344_0<=Await)||LA344_0==Class||(LA344_0>=False && LA344_0<=Super)||LA344_0==Union||(LA344_0>=Yield && LA344_0<=This)||(LA344_0>=From && LA344_0<=Type)||(LA344_0>=Get && LA344_0<=Set)||LA344_0==SolidusEqualsSign||LA344_0==As||LA344_0==Of||LA344_0==LeftParenthesis||LA344_0==Solidus||LA344_0==LessThanSign||(LA344_0>=CommercialAt && LA344_0<=LeftSquareBracket)||LA344_0==LeftCurlyBracket||LA344_0==RULE_DOUBLE||(LA344_0>=RULE_HEX_INT && LA344_0<=RULE_LEGACY_OCTAL_INT)||LA344_0==RULE_SCIENTIFIC_INT||LA344_0==RULE_IDENTIFIER||LA344_0==RULE_STRING||(LA344_0>=RULE_TEMPLATE_HEAD && LA344_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA344_0==RULE_INT) ) {
                alt344=1;
            }
            else if ( (LA344_0==Delete||LA344_0==Typeof||LA344_0==Void||LA344_0==PlusSignPlusSign||LA344_0==HyphenMinusHyphenMinus||LA344_0==ExclamationMark||LA344_0==PlusSign||LA344_0==HyphenMinus||LA344_0==Tilde) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);
                throw nvae;
            }
            switch (alt344) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_53);
                    ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_UnaryExpression_return retval = new InternalN4JSParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;
        try {
            {
            int alt345=2;
            int LA345_0 = input.LA(1);
            if ( ((LA345_0>=Intersection && LA345_0<=Implements)||(LA345_0>=Promisify && LA345_0<=Abstract)||(LA345_0>=External && LA345_0<=Function)||(LA345_0>=Private && LA345_0<=Project)||(LA345_0>=Import && LA345_0<=Public)||LA345_0==Static||LA345_0==Target||(LA345_0>=Async && LA345_0<=Await)||LA345_0==Class||(LA345_0>=False && LA345_0<=Super)||LA345_0==Union||LA345_0==This||(LA345_0>=From && LA345_0<=Type)||(LA345_0>=Get && LA345_0<=Set)||LA345_0==SolidusEqualsSign||LA345_0==As||LA345_0==Of||LA345_0==LeftParenthesis||LA345_0==Solidus||LA345_0==LessThanSign||(LA345_0>=CommercialAt && LA345_0<=LeftSquareBracket)||LA345_0==LeftCurlyBracket||LA345_0==RULE_DOUBLE||(LA345_0>=RULE_HEX_INT && LA345_0<=RULE_LEGACY_OCTAL_INT)||LA345_0==RULE_SCIENTIFIC_INT||LA345_0==RULE_IDENTIFIER||LA345_0==RULE_STRING||(LA345_0>=RULE_TEMPLATE_HEAD && LA345_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA345_0==RULE_INT) ) {
                alt345=1;
            }
            else if ( (LA345_0==Delete||LA345_0==Typeof||LA345_0==Void||LA345_0==PlusSignPlusSign||LA345_0==HyphenMinusHyphenMinus||LA345_0==ExclamationMark||LA345_0==PlusSign||LA345_0==HyphenMinus||LA345_0==Tilde) ) {
                alt345=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);
                throw nvae;
            }
            switch (alt345) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_71);
                    ruleUnaryOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.ruleMultiplicativeExpression_return retval = new InternalN4JSParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_132);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);
                if ( (LA346_0==Asterisk) && (synpred188_InternalN4JSParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==Solidus) && (synpred188_InternalN4JSParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==PercentSign) && (synpred188_InternalN4JSParser())) {
                    alt346=1;
                }
                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_132);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop346;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_132);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);
                if ( (LA347_0==Asterisk) && (synpred189_InternalN4JSParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==Solidus) && (synpred189_InternalN4JSParser())) {
                    alt347=1;
                }
                else if ( (LA347_0==PercentSign) && (synpred189_InternalN4JSParser())) {
                    alt347=1;
                }
                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    ruleMultiplicativeOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_132);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop347;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSParser.ruleAdditiveExpression_return retval = new InternalN4JSParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_133);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop348:
            do {
                int alt348=2;
                alt348 = dfa348.predict(input);
                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_133);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop348;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AdditiveExpression_return retval = new InternalN4JSParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_133);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop349:
            do {
                int alt349=2;
                alt349 = dfa349.predict(input);
                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    ruleAdditiveOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_133);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop349;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSParser.ruleShiftExpression_return retval = new InternalN4JSParser.ruleShiftExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_134);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                alt350 = dfa350.predict(input);
                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_134);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop350;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ShiftExpression_return retval = new InternalN4JSParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_134);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                alt351 = dfa351.predict(input);
                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_134);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop351;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSParser.ruleShiftOperator_return retval = new InternalN4JSParser.ruleShiftOperator_return();
        retval.start = input.LT(1);
        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;
        try {
            {
            int alt353=2;
            int LA353_0 = input.LA(1);
            if ( (LA353_0==GreaterThanSign) ) {
                alt353=1;
            }
            else if ( (LA353_0==LessThanSignLessThanSign) ) {
                alt353=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);
                throw nvae;
            }
            switch (alt353) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_136); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                    }
                    int alt352=2;
                    int LA352_0 = input.LA(1);
                    if ( (LA352_0==GreaterThanSign) ) {
                        alt352=1;
                    }
                    switch (alt352) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSParser.ruleRelationalExpression_return retval = new InternalN4JSParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_137);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                alt354 = dfa354.predict(input);
                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_137);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop354;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalExpression_return retval = new InternalN4JSParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_138);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                alt355 = dfa355.predict(input);
                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_138);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop355;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_RelationalExpression_return retval = new InternalN4JSParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_137);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                alt356 = dfa356.predict(input);
                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_137);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop356;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_RelationalExpression_return retval = new InternalN4JSParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_138);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                alt357 = dfa357.predict(input);
                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_138);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop357;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSParser.ruleRelationalOperator_return retval = new InternalN4JSParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1_0=null;
        Token EqualsSignKeyword_1_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token InstanceofKeyword_3=null;
        try {
            {
            int alt359=4;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt359=1;
                }
                break;
            case GreaterThanSign:
                {
                alt359=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt359=3;
                }
                break;
            case Instanceof:
                {
                alt359=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 359, 0, input);
                throw nvae;
            }
            switch (alt359) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    GreaterThanSignKeyword_1_0=(Token)match(input,GreaterThanSign,FOLLOW_66); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_1_0, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt358=2;
                    int LA358_0 = input.LA(1);
                    if ( (LA358_0==EqualsSign) ) {
                        alt358=1;
                    }
                    switch (alt358) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_1=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_1_1, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    InstanceofKeyword_3=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(InstanceofKeyword_3, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalOperator_return retval = new InternalN4JSParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1_0=null;
        Token EqualsSignKeyword_1_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token InstanceofKeyword_3=null;
        Token InKeyword_4_0=null;
        try {
            {
            int alt361=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt361=1;
                }
                break;
            case GreaterThanSign:
                {
                alt361=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt361=3;
                }
                break;
            case Instanceof:
                {
                alt361=4;
                }
                break;
            case In:
                {
                alt361=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);
                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    GreaterThanSignKeyword_1_0=(Token)match(input,GreaterThanSign,FOLLOW_66); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_1_0, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1_0());
                    }
                    int alt360=2;
                    int LA360_0 = input.LA(1);
                    if ( (LA360_0==EqualsSign) ) {
                        alt360=1;
                    }
                    switch (alt360) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_1=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_1_1, grammarAccess.getRelationalOperatorAccess().getEqualsSignKeyword_1_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    InstanceofKeyword_3=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(InstanceofKeyword_3, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    InKeyword_4_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(InKeyword_4_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_4_0());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSParser.ruleEqualityExpression_return retval = new InternalN4JSParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);
                if ( (LA362_0==EqualsSignEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt362=1;
                }
                else if ( (LA362_0==ExclamationMarkEqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt362=1;
                }
                else if ( (LA362_0==EqualsSignEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt362=1;
                }
                else if ( (LA362_0==ExclamationMarkEqualsSign) && (synpred204_InternalN4JSParser())) {
                    alt362=1;
                }
                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop362;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm1_EqualityExpression_return retval = new InternalN4JSParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);
                if ( (LA363_0==EqualsSignEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt363=1;
                }
                else if ( (LA363_0==ExclamationMarkEqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt363=1;
                }
                else if ( (LA363_0==EqualsSignEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt363=1;
                }
                else if ( (LA363_0==ExclamationMarkEqualsSign) && (synpred205_InternalN4JSParser())) {
                    alt363=1;
                }
                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop363;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm2_EqualityExpression_return retval = new InternalN4JSParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);
                if ( (LA364_0==EqualsSignEqualsSignEqualsSign) && (synpred206_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==ExclamationMarkEqualsSignEqualsSign) && (synpred206_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==EqualsSignEqualsSign) && (synpred206_InternalN4JSParser())) {
                    alt364=1;
                }
                else if ( (LA364_0==ExclamationMarkEqualsSign) && (synpred206_InternalN4JSParser())) {
                    alt364=1;
                }
                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop364;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm3_EqualityExpression_return retval = new InternalN4JSParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_139);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);
                if ( (LA365_0==EqualsSignEqualsSignEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==ExclamationMarkEqualsSignEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==EqualsSignEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt365=1;
                }
                else if ( (LA365_0==ExclamationMarkEqualsSign) && (synpred207_InternalN4JSParser())) {
                    alt365=1;
                }
                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    ruleEqualityOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_139);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop365;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDExpression_return retval = new InternalN4JSParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);
                if ( (LA366_0==Ampersand) && (synpred208_InternalN4JSParser())) {
                    alt366=1;
                }
                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop366;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);
                if ( (LA367_0==Ampersand) && (synpred209_InternalN4JSParser())) {
                    alt367=1;
                }
                switch (alt367) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop367;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);
                if ( (LA368_0==Ampersand) && (synpred210_InternalN4JSParser())) {
                    alt368=1;
                }
                switch (alt368) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop368;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop369:
            do {
                int alt369=2;
                int LA369_0 = input.LA(1);
                if ( (LA369_0==Ampersand) && (synpred211_InternalN4JSParser())) {
                    alt369=1;
                }
                switch (alt369) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_140);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop369;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDOperator_return retval = new InternalN4JSParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);
        Token AmpersandKeyword=null;
        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXORExpression_return retval = new InternalN4JSParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop370:
            do {
                int alt370=2;
                int LA370_0 = input.LA(1);
                if ( (LA370_0==CircumflexAccent) && (synpred212_InternalN4JSParser())) {
                    alt370=1;
                }
                switch (alt370) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop370;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop371:
            do {
                int alt371=2;
                int LA371_0 = input.LA(1);
                if ( (LA371_0==CircumflexAccent) && (synpred213_InternalN4JSParser())) {
                    alt371=1;
                }
                switch (alt371) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop371;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop372:
            do {
                int alt372=2;
                int LA372_0 = input.LA(1);
                if ( (LA372_0==CircumflexAccent) && (synpred214_InternalN4JSParser())) {
                    alt372=1;
                }
                switch (alt372) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop372;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_141);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop373:
            do {
                int alt373=2;
                int LA373_0 = input.LA(1);
                if ( (LA373_0==CircumflexAccent) && (synpred215_InternalN4JSParser())) {
                    alt373=1;
                }
                switch (alt373) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop373;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXOROperator_return retval = new InternalN4JSParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);
        Token CircumflexAccentKeyword=null;
        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseORExpression_return retval = new InternalN4JSParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop374:
            do {
                int alt374=2;
                int LA374_0 = input.LA(1);
                if ( (LA374_0==VerticalLine) && (synpred216_InternalN4JSParser())) {
                    alt374=1;
                }
                switch (alt374) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop374;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseORExpression_return retval = new InternalN4JSParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop375:
            do {
                int alt375=2;
                int LA375_0 = input.LA(1);
                if ( (LA375_0==VerticalLine) && (synpred217_InternalN4JSParser())) {
                    alt375=1;
                }
                switch (alt375) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop375;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseORExpression_return retval = new InternalN4JSParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop376:
            do {
                int alt376=2;
                int LA376_0 = input.LA(1);
                if ( (LA376_0==VerticalLine) && (synpred218_InternalN4JSParser())) {
                    alt376=1;
                }
                switch (alt376) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop376;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseORExpression_return retval = new InternalN4JSParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop377:
            do {
                int alt377=2;
                int LA377_0 = input.LA(1);
                if ( (LA377_0==VerticalLine) && (synpred219_InternalN4JSParser())) {
                    alt377=1;
                }
                switch (alt377) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_142);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop377;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseOROperator_return retval = new InternalN4JSParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);
        Token VerticalLineKeyword=null;
        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDExpression_return retval = new InternalN4JSParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop378:
            do {
                int alt378=2;
                int LA378_0 = input.LA(1);
                if ( (LA378_0==AmpersandAmpersand) && (synpred220_InternalN4JSParser())) {
                    alt378=1;
                }
                switch (alt378) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop378;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalANDExpression_return retval = new InternalN4JSParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop379:
            do {
                int alt379=2;
                int LA379_0 = input.LA(1);
                if ( (LA379_0==AmpersandAmpersand) && (synpred221_InternalN4JSParser())) {
                    alt379=1;
                }
                switch (alt379) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop379;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalANDExpression_return retval = new InternalN4JSParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop380:
            do {
                int alt380=2;
                int LA380_0 = input.LA(1);
                if ( (LA380_0==AmpersandAmpersand) && (synpred222_InternalN4JSParser())) {
                    alt380=1;
                }
                switch (alt380) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop380;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalANDExpression_return retval = new InternalN4JSParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_143);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop381:
            do {
                int alt381=2;
                int LA381_0 = input.LA(1);
                if ( (LA381_0==AmpersandAmpersand) && (synpred223_InternalN4JSParser())) {
                    alt381=1;
                }
                switch (alt381) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_143);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop381;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDOperator_return retval = new InternalN4JSParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);
        Token AmpersandAmpersandKeyword=null;
        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalORExpression_return retval = new InternalN4JSParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_144);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop382:
            do {
                int alt382=2;
                int LA382_0 = input.LA(1);
                if ( (LA382_0==VerticalLineVerticalLine) && (synpred224_InternalN4JSParser())) {
                    alt382=1;
                }
                switch (alt382) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop382;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalORExpression_return retval = new InternalN4JSParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_144);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop383:
            do {
                int alt383=2;
                int LA383_0 = input.LA(1);
                if ( (LA383_0==VerticalLineVerticalLine) && (synpred225_InternalN4JSParser())) {
                    alt383=1;
                }
                switch (alt383) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_53);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop383;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalORExpression_return retval = new InternalN4JSParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_144);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop384:
            do {
                int alt384=2;
                int LA384_0 = input.LA(1);
                if ( (LA384_0==VerticalLineVerticalLine) && (synpred226_InternalN4JSParser())) {
                    alt384=1;
                }
                switch (alt384) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop384;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalORExpression_return retval = new InternalN4JSParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_144);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop385:
            do {
                int alt385=2;
                int LA385_0 = input.LA(1);
                if ( (LA385_0==VerticalLineVerticalLine) && (synpred227_InternalN4JSParser())) {
                    alt385=1;
                }
                switch (alt385) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_71);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	    }
            	    }
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop385;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalOROperator_return retval = new InternalN4JSParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);
        Token VerticalLineVerticalLineKeyword=null;
        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCoalesceExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleCoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCoalesceExpression_return ruleCoalesceExpression() throws RecognitionException {
        InternalN4JSParser.ruleCoalesceExpression_return retval = new InternalN4JSParser.ruleCoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleLogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_145);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop386:
            do {
                int alt386=2;
                int LA386_0 = input.LA(1);
                if ( (LA386_0==QuestionMarkQuestionMark) && (synpred228_InternalN4JSParser())) {
                    alt386=1;
                }
                switch (alt386) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_53); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_145);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=ruleLogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop386;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_CoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CoalesceExpression_return norm1_CoalesceExpression() throws RecognitionException {
        InternalN4JSParser.norm1_CoalesceExpression_return retval = new InternalN4JSParser.norm1_CoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_LogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_145);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop387:
            do {
                int alt387=2;
                int LA387_0 = input.LA(1);
                if ( (LA387_0==QuestionMarkQuestionMark) && (synpred229_InternalN4JSParser())) {
                    alt387=1;
                }
                switch (alt387) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_53); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_145);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=norm1_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop387;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_CoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_CoalesceExpression_return norm2_CoalesceExpression() throws RecognitionException {
        InternalN4JSParser.norm2_CoalesceExpression_return retval = new InternalN4JSParser.norm2_CoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_LogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_145);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop388:
            do {
                int alt388=2;
                int LA388_0 = input.LA(1);
                if ( (LA388_0==QuestionMarkQuestionMark) && (synpred230_InternalN4JSParser())) {
                    alt388=1;
                }
                switch (alt388) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_71); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_145);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=norm2_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop388;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_CoalesceExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_CoalesceExpression_return norm3_CoalesceExpression() throws RecognitionException {
        InternalN4JSParser.norm3_CoalesceExpression_return retval = new InternalN4JSParser.norm3_CoalesceExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkQuestionMarkKeyword_1_0_0_1=null;
        InternalN4JSParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_LogicalORExpression_return DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_145);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            loop389:
            do {
                int alt389=2;
                int LA389_0 = input.LA(1);
                if ( (LA389_0==QuestionMarkQuestionMark) && (synpred231_InternalN4JSParser())) {
                    alt389=1;
                }
                switch (alt389) {
            	case 1 :
            	    {
            	    {
            	    {
            	    QuestionMarkQuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMarkQuestionMark,FOLLOW_71); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce(QuestionMarkQuestionMarkKeyword_1_0_0_1, grammarAccess.getCoalesceExpressionAccess().getQuestionMarkQuestionMarkKeyword_1_0_0_1());
            	    }
            	    }
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_145);
            	    DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0=norm3_LogicalORExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.start):null), (DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0!=null?((Token)DefaultExpressionLogicalORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getCoalesceExpressionAccess().getDefaultExpressionAssignment_1_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop389;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSParser.ruleConditionalExpression_return retval = new InternalN4JSParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.ruleCoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_146);
            CoalesceExpressionParserRuleCall_0=ruleCoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt390=2;
            int LA390_0 = input.LA(1);
            if ( (LA390_0==QuestionMark) && (synpred232_InternalN4JSParser())) {
                alt390=1;
            }
            switch (alt390) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_96);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ConditionalExpression_return retval = new InternalN4JSParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm1_CoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_146);
            CoalesceExpressionParserRuleCall_0=norm1_CoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt391=2;
            int LA391_0 = input.LA(1);
            if ( (LA391_0==QuestionMark) && (synpred233_InternalN4JSParser())) {
                alt391=1;
            }
            switch (alt391) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_96);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ConditionalExpression_return retval = new InternalN4JSParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm2_CoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_146);
            CoalesceExpressionParserRuleCall_0=norm2_CoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt392=2;
            int LA392_0 = input.LA(1);
            if ( (LA392_0==QuestionMark) && (synpred234_InternalN4JSParser())) {
                alt392=1;
            }
            switch (alt392) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_96);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ConditionalExpression_return retval = new InternalN4JSParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm3_CoalesceExpression_return CoalesceExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_146);
            CoalesceExpressionParserRuleCall_0=norm3_CoalesceExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.start):null), (CoalesceExpressionParserRuleCall_0!=null?((Token)CoalesceExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getCoalesceExpressionParserRuleCall_0()); 
            }
            int alt393=2;
            int LA393_0 = input.LA(1);
            if ( (LA393_0==QuestionMark) && (synpred235_InternalN4JSParser())) {
                alt393=1;
            }
            switch (alt393) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_96);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                    }
                    }
                    }
                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpression_return retval = new InternalN4JSParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt395=4;
            alt395 = dfa395.predict(input);
            switch (alt395) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_147);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt394=2;
                    alt394 = dfa394.predict(input);
                    switch (alt394) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_53);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpression_return retval = new InternalN4JSParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt397=4;
            alt397 = dfa397.predict(input);
            switch (alt397) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_147);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt396=2;
                    alt396 = dfa396.predict(input);
                    switch (alt396) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_53);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AssignmentExpression_return retval = new InternalN4JSParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;
        InternalN4JSParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt399=5;
            alt399 = dfa399.predict(input);
            switch (alt399) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_147);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt398=2;
                    alt398 = dfa398.predict(input);
                    switch (alt398) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_71);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AssignmentExpression_return retval = new InternalN4JSParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;
        InternalN4JSParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;
        InternalN4JSParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;
        InternalN4JSParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;
        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;
        try {
            {
            int alt401=5;
            alt401 = dfa401.predict(input);
            switch (alt401) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_147);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt400=2;
                    alt400 = dfa400.predict(input);
                    switch (alt400) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_71);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                            }
                            }
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSParser.ruleYieldExpression_return retval = new InternalN4JSParser.ruleYieldExpression_return();
        retval.start = input.LT(1);
        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt402=2;
            int LA402_0 = input.LA(1);
            if ( (LA402_0==Asterisk) && (synpred260_InternalN4JSParser())) {
                alt402=1;
            }
            switch (alt402) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_70); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt403=2;
            alt403 = dfa403.predict(input);
            switch (alt403) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSParser.norm1_YieldExpression_return retval = new InternalN4JSParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);
        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
            }
            int alt404=2;
            int LA404_0 = input.LA(1);
            if ( (LA404_0==Asterisk) && (synpred262_InternalN4JSParser())) {
                alt404=1;
            }
            switch (alt404) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_70); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt405=2;
            alt405 = dfa405.predict(input);
            switch (alt405) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentOperator_return retval = new InternalN4JSParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusKeyword_5_0=null;
        Token EqualsSignKeyword_5_1=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignKeyword_7_2=null;
        Token EqualsSignKeyword_7_3=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;
        try {
            {
            int alt407=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt407=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt407=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt407=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt407=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt407=5;
                }
                break;
            case HyphenMinus:
                {
                alt407=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt407=7;
                }
                break;
            case GreaterThanSign:
                {
                alt407=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt407=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt407=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt407=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);
                throw nvae;
            }
            switch (alt407) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    HyphenMinusKeyword_5_0=(Token)match(input,HyphenMinus,FOLLOW_18); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(HyphenMinusKeyword_5_0, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_5_0());
                    }
                    EqualsSignKeyword_5_1=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_5_1, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_5_1());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                    }
                    GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                    }
                    int alt406=2;
                    int LA406_0 = input.LA(1);
                    if ( (LA406_0==GreaterThanSign) ) {
                        alt406=1;
                    }
                    switch (alt406) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_2=(Token)match(input,GreaterThanSign,FOLLOW_18); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(GreaterThanSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_2());
                            }
                            }
                            break;
                    }
                    EqualsSignKeyword_7_3=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_7_3, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_7_3());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperatorOnlyAssign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperatorOnlyAssign();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAssignmentOperatorOnlyAssign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return ruleAssignmentOperatorOnlyAssign() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return retval = new InternalN4JSParser.ruleAssignmentOperatorOnlyAssign_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword=null;
        try {
            {
            EqualsSignKeyword=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(EqualsSignKeyword, grammarAccess.getAssignmentOperatorOnlyAssignAccess().getEqualsSignKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSParser.ruleAwaitExpression_return retval = new InternalN4JSParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AwaitExpression_return retval = new InternalN4JSParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AwaitExpression_return retval = new InternalN4JSParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AwaitExpression_return retval = new InternalN4JSParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);
        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSParser.rulePromisifyExpression_return retval = new InternalN4JSParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PromisifyExpression_return retval = new InternalN4JSParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm2_PromisifyExpression_return retval = new InternalN4JSParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm3_PromisifyExpression_return retval = new InternalN4JSParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_71); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSParser.ruleExpression_return retval = new InternalN4JSParser.ruleExpression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_34);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt409=2;
            int LA409_0 = input.LA(1);
            if ( (LA409_0==Comma) ) {
                alt409=1;
            }
            switch (alt409) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_34);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop408:
                    do {
                        int alt408=2;
                        int LA408_0 = input.LA(1);
                        if ( (LA408_0==Comma) ) {
                            alt408=1;
                        }
                        switch (alt408) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_34);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop408;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSParser.norm1_Expression_return retval = new InternalN4JSParser.norm1_Expression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_34);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt411=2;
            int LA411_0 = input.LA(1);
            if ( (LA411_0==Comma) ) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_34);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop410:
                    do {
                        int alt410=2;
                        int LA410_0 = input.LA(1);
                        if ( (LA410_0==Comma) ) {
                            alt410=1;
                        }
                        switch (alt410) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_34);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop410;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSParser.norm2_Expression_return retval = new InternalN4JSParser.norm2_Expression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_34);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt413=2;
            int LA413_0 = input.LA(1);
            if ( (LA413_0==Comma) ) {
                alt413=1;
            }
            switch (alt413) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_34);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop412:
                    do {
                        int alt412=2;
                        int LA412_0 = input.LA(1);
                        if ( (LA412_0==Comma) ) {
                            alt412=1;
                        }
                        switch (alt412) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_71); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_34);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop412;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSParser.norm3_Expression_return retval = new InternalN4JSParser.norm3_Expression_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_34);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt415=2;
            int LA415_0 = input.LA(1);
            if ( (LA415_0==Comma) ) {
                alt415=1;
            }
            switch (alt415) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_34);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                    }
                    }
                    }
                    loop414:
                    do {
                        int alt414=2;
                        int LA414_0 = input.LA(1);
                        if ( (LA414_0==Comma) ) {
                            alt414=1;
                        }
                        switch (alt414) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_71); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_34);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop414;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateLiteral_return retval = new InternalN4JSParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;
        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;
        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;
        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;
        try {
            {
            {
            int alt419=2;
            int LA419_0 = input.LA(1);
            if ( (LA419_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt419=1;
            }
            else if ( (LA419_0==RULE_TEMPLATE_HEAD) ) {
                alt419=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 419, 0, input);
                throw nvae;
            }
            switch (alt419) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_151);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                    }
                    }
                    }
                    int alt416=2;
                    int LA416_0 = input.LA(1);
                    if ( ((LA416_0>=Intersection && LA416_0<=Implements)||(LA416_0>=Promisify && LA416_0<=Abstract)||(LA416_0>=External && LA416_0<=Function)||(LA416_0>=Private && LA416_0<=Delete)||(LA416_0>=Import && LA416_0<=Public)||LA416_0==Static||(LA416_0>=Target && LA416_0<=Await)||LA416_0==Class||(LA416_0>=False && LA416_0<=Super)||LA416_0==Union||(LA416_0>=Yield && LA416_0<=This)||(LA416_0>=From && LA416_0<=Void)||(LA416_0>=Get && LA416_0<=Set)||LA416_0==PlusSignPlusSign||(LA416_0>=HyphenMinusHyphenMinus && LA416_0<=SolidusEqualsSign)||LA416_0==As||LA416_0==Of||LA416_0==ExclamationMark||LA416_0==LeftParenthesis||LA416_0==PlusSign||LA416_0==HyphenMinus||LA416_0==Solidus||LA416_0==LessThanSign||(LA416_0>=CommercialAt && LA416_0<=LeftSquareBracket)||LA416_0==LeftCurlyBracket||LA416_0==Tilde||LA416_0==RULE_DOUBLE||(LA416_0>=RULE_HEX_INT && LA416_0<=RULE_LEGACY_OCTAL_INT)||LA416_0==RULE_SCIENTIFIC_INT||LA416_0==RULE_IDENTIFIER||LA416_0==RULE_STRING||(LA416_0>=RULE_TEMPLATE_HEAD && LA416_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA416_0==RULE_INT) ) {
                        alt416=1;
                    }
                    switch (alt416) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_151);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_152);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop418:
                    do {
                        int alt418=2;
                        int LA418_0 = input.LA(1);
                        if ( (LA418_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt418=1;
                        }
                        switch (alt418) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_151);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	    }
                    	    }
                    	    }
                    	    int alt417=2;
                    	    int LA417_0 = input.LA(1);
                    	    if ( ((LA417_0>=Intersection && LA417_0<=Implements)||(LA417_0>=Promisify && LA417_0<=Abstract)||(LA417_0>=External && LA417_0<=Function)||(LA417_0>=Private && LA417_0<=Delete)||(LA417_0>=Import && LA417_0<=Public)||LA417_0==Static||(LA417_0>=Target && LA417_0<=Await)||LA417_0==Class||(LA417_0>=False && LA417_0<=Super)||LA417_0==Union||(LA417_0>=Yield && LA417_0<=This)||(LA417_0>=From && LA417_0<=Void)||(LA417_0>=Get && LA417_0<=Set)||LA417_0==PlusSignPlusSign||(LA417_0>=HyphenMinusHyphenMinus && LA417_0<=SolidusEqualsSign)||LA417_0==As||LA417_0==Of||LA417_0==ExclamationMark||LA417_0==LeftParenthesis||LA417_0==PlusSign||LA417_0==HyphenMinus||LA417_0==Solidus||LA417_0==LessThanSign||(LA417_0>=CommercialAt && LA417_0<=LeftSquareBracket)||LA417_0==LeftCurlyBracket||LA417_0==Tilde||LA417_0==RULE_DOUBLE||(LA417_0>=RULE_HEX_INT && LA417_0<=RULE_LEGACY_OCTAL_INT)||LA417_0==RULE_SCIENTIFIC_INT||LA417_0==RULE_IDENTIFIER||LA417_0==RULE_STRING||(LA417_0>=RULE_TEMPLATE_HEAD && LA417_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA417_0==RULE_INT) ) {
                    	        alt417=1;
                    	    }
                    	    switch (alt417) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_151);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_152);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop418;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_TemplateLiteral_return retval = new InternalN4JSParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;
        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;
        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;
        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;
        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;
        try {
            {
            {
            int alt423=2;
            int LA423_0 = input.LA(1);
            if ( (LA423_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt423=1;
            }
            else if ( (LA423_0==RULE_TEMPLATE_HEAD) ) {
                alt423=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 423, 0, input);
                throw nvae;
            }
            switch (alt423) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_153);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                    }
                    }
                    }
                    int alt420=2;
                    int LA420_0 = input.LA(1);
                    if ( ((LA420_0>=Intersection && LA420_0<=Implements)||(LA420_0>=Promisify && LA420_0<=Abstract)||(LA420_0>=External && LA420_0<=Function)||(LA420_0>=Private && LA420_0<=Delete)||(LA420_0>=Import && LA420_0<=Public)||LA420_0==Static||(LA420_0>=Target && LA420_0<=Await)||LA420_0==Class||(LA420_0>=False && LA420_0<=Super)||LA420_0==Union||(LA420_0>=Yield && LA420_0<=This)||(LA420_0>=From && LA420_0<=Void)||(LA420_0>=Get && LA420_0<=Set)||LA420_0==PlusSignPlusSign||(LA420_0>=HyphenMinusHyphenMinus && LA420_0<=SolidusEqualsSign)||LA420_0==As||LA420_0==Of||LA420_0==ExclamationMark||LA420_0==LeftParenthesis||LA420_0==PlusSign||LA420_0==HyphenMinus||LA420_0==Solidus||LA420_0==LessThanSign||(LA420_0>=CommercialAt && LA420_0<=LeftSquareBracket)||LA420_0==LeftCurlyBracket||LA420_0==Tilde||LA420_0==RULE_DOUBLE||(LA420_0>=RULE_HEX_INT && LA420_0<=RULE_LEGACY_OCTAL_INT)||LA420_0==RULE_SCIENTIFIC_INT||LA420_0==RULE_IDENTIFIER||LA420_0==RULE_STRING||(LA420_0>=RULE_TEMPLATE_HEAD && LA420_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA420_0==RULE_INT) ) {
                        alt420=1;
                    }
                    switch (alt420) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_151);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                            }
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_152);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop422:
                    do {
                        int alt422=2;
                        int LA422_0 = input.LA(1);
                        if ( (LA422_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt422=1;
                        }
                        switch (alt422) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_153);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	    }
                    	    }
                    	    }
                    	    int alt421=2;
                    	    int LA421_0 = input.LA(1);
                    	    if ( ((LA421_0>=Intersection && LA421_0<=Implements)||(LA421_0>=Promisify && LA421_0<=Abstract)||(LA421_0>=External && LA421_0<=Function)||(LA421_0>=Private && LA421_0<=Delete)||(LA421_0>=Import && LA421_0<=Public)||LA421_0==Static||(LA421_0>=Target && LA421_0<=Await)||LA421_0==Class||(LA421_0>=False && LA421_0<=Super)||LA421_0==Union||(LA421_0>=Yield && LA421_0<=This)||(LA421_0>=From && LA421_0<=Void)||(LA421_0>=Get && LA421_0<=Set)||LA421_0==PlusSignPlusSign||(LA421_0>=HyphenMinusHyphenMinus && LA421_0<=SolidusEqualsSign)||LA421_0==As||LA421_0==Of||LA421_0==ExclamationMark||LA421_0==LeftParenthesis||LA421_0==PlusSign||LA421_0==HyphenMinus||LA421_0==Solidus||LA421_0==LessThanSign||(LA421_0>=CommercialAt && LA421_0<=LeftSquareBracket)||LA421_0==LeftCurlyBracket||LA421_0==Tilde||LA421_0==RULE_DOUBLE||(LA421_0>=RULE_HEX_INT && LA421_0<=RULE_LEGACY_OCTAL_INT)||LA421_0==RULE_SCIENTIFIC_INT||LA421_0==RULE_IDENTIFIER||LA421_0==RULE_STRING||(LA421_0>=RULE_TEMPLATE_HEAD && LA421_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA421_0==RULE_INT) ) {
                    	        alt421=1;
                    	    }
                    	    switch (alt421) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_151);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	            }
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    pushFollow(FOLLOW_152);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop422;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);
        Token RightCurlyBracketKeyword=null;
        	setInTemplateSegment();
        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);
        Token ValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;
        try {
            {
            {
            {
            {
            ValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSParser.ruleTemplateHead_return retval = new InternalN4JSParser.ruleTemplateHead_return();
        retval.start = input.LT(1);
        Token ValueTEMPLATE_HEADTerminalRuleCall_1_0=null;
        try {
            {
            {
            {
            {
            ValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTail_return retval = new InternalN4JSParser.ruleTemplateTail_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTemplateTailLiteral_return ValueTemplateTailLiteralParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateTailLiteralParserRuleCall_1_0.start):null), (ValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddle_return retval = new InternalN4JSParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTemplateMiddleLiteral_return ValueTemplateMiddleLiteralParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (ValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)ValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getValueAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLiteral_return retval = new InternalN4JSParser.ruleLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;
        InternalN4JSParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;
        InternalN4JSParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;
        InternalN4JSParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;
        try {
            {
            int alt424=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt424=1;
                }
                break;
            case False:
            case True:
                {
                alt424=2;
                }
                break;
            case RULE_STRING:
                {
                alt424=3;
                }
                break;
            case Null:
                {
                alt424=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt424=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 424, 0, input);
                throw nvae;
            }
            switch (alt424) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNullLiteral_return retval = new InternalN4JSParser.ruleNullLiteral_return();
        retval.start = input.LT(1);
        Token NullKeyword_1=null;
        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBooleanLiteral_return retval = new InternalN4JSParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);
        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;
        try {
            {
            {
            int alt425=2;
            int LA425_0 = input.LA(1);
            if ( (LA425_0==True) ) {
                alt425=1;
            }
            else if ( (LA425_0==False) ) {
                alt425=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 425, 0, input);
                throw nvae;
            }
            switch (alt425) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSParser.ruleStringLiteral_return retval = new InternalN4JSParser.ruleStringLiteral_return();
        retval.start = input.LT(1);
        Token ValueSTRINGTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteral_return retval = new InternalN4JSParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;
        InternalN4JSParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;
        InternalN4JSParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;
        InternalN4JSParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;
        InternalN4JSParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;
        InternalN4JSParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;
        InternalN4JSParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;
        try {
            {
            int alt426=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt426=1;
                }
                break;
            case RULE_INT:
                {
                alt426=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt426=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt426=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt426=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt426=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt426=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);
                throw nvae;
            }
            switch (alt426) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleDoubleLiteral_return retval = new InternalN4JSParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);
        Token ValueDOUBLETerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleIntLiteral_return retval = new InternalN4JSParser.ruleIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueINTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleOctalIntLiteral_return retval = new InternalN4JSParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueOCTAL_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleHexIntLiteral_return retval = new InternalN4JSParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueHEX_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBinaryIntLiteral_return retval = new InternalN4JSParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueBINARY_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleScientificIntLiteral_return retval = new InternalN4JSParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);
        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;
        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteralAsString_return retval = new InternalN4JSParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);
        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierOrThis_return retval = new InternalN4JSParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;
        try {
            {
            int alt427=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt427=1;
                }
                break;
            case This:
                {
                alt427=2;
                }
                break;
            case Promisify:
                {
                alt427=3;
                }
                break;
            case Target:
                {
                alt427=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 427, 0, input);
                throw nvae;
            }
            switch (alt427) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationName_return retval = new InternalN4JSParser.ruleAnnotationName_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;
        try {
            {
            int alt428=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt428=1;
                }
                break;
            case This:
                {
                alt428=2;
                }
                break;
            case Target:
                {
                alt428=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);
                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSParser.ruleREGEX_LITERAL_return retval = new InternalN4JSParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);
        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;
        	setInRegularExpression();
        try {
            {
            {
            int alt429=2;
            int LA429_0 = input.LA(1);
            if ( (LA429_0==Solidus) ) {
                alt429=1;
            }
            else if ( (LA429_0==SolidusEqualsSign) ) {
                alt429=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 429, 0, input);
                throw nvae;
            }
            switch (alt429) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                    }
                    }
                    break;
            }
            int alt430=2;
            int LA430_0 = input.LA(1);
            if ( (LA430_0==RULE_REGEX_TAIL) ) {
                alt430=1;
            }
            switch (alt430) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTailLiteral_return retval = new InternalN4JSParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);
        try {
            {
            int alt431=2;
            int LA431_0 = input.LA(1);
            if ( (LA431_0==RULE_TEMPLATE_END) ) {
                alt431=1;
            }
            switch (alt431) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);
        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSParser.ruleSemi_return retval = new InternalN4JSParser.ruleSemi_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword=null;
        	int position = input.index();
        	promoteEOL();
        try {
            int alt432=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt432=1;
                }
                break;
            case EOF:
                {
                alt432=2;
                }
                break;
            case RULE_EOL:
                {
                alt432=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt432=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt432=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);
                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      	announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword());
                    }
                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(position) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(position) ");
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSParser.ruleNoLineTerminator_return retval = new InternalN4JSParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);
        Token NO_LINE_TERMINATORTerminalRuleCall=null;
        try {
            {
            int alt433=2;
            int LA433_0 = input.LA(1);
            if ( (LA433_0==RULE_NO_LINE_TERMINATOR) ) {
                alt433=1;
            }
            switch (alt433) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleAnnotation_return retval = new InternalN4JSParser.ruleAnnotation_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;
        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return retval = new InternalN4JSParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);
        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;
        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_127);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0());
            }
            }
            }
            int alt436=2;
            alt436 = dfa436.predict(input);
            switch (alt436) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                    }
                    }
                    int alt435=2;
                    int LA435_0 = input.LA(1);
                    if ( ((LA435_0>=Intersection && LA435_0<=Constructor)||LA435_0==Promisify||LA435_0==Default||LA435_0==Target||LA435_0==Await||LA435_0==False||LA435_0==Union||LA435_0==This||(LA435_0>=Null && LA435_0<=Void)||LA435_0==SolidusEqualsSign||LA435_0==LeftParenthesis||LA435_0==Solidus||LA435_0==QuestionMark||LA435_0==LeftSquareBracket||LA435_0==LeftCurlyBracket||LA435_0==Tilde||LA435_0==RULE_DOUBLE||(LA435_0>=RULE_HEX_INT && LA435_0<=RULE_LEGACY_OCTAL_INT)||LA435_0==RULE_SCIENTIFIC_INT||LA435_0==RULE_IDENTIFIER||LA435_0==RULE_STRING||LA435_0==RULE_INT) ) {
                        alt435=1;
                    }
                    switch (alt435) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_58);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0());
                            }
                            }
                            }
                            loop434:
                            do {
                                int alt434=2;
                                int LA434_0 = input.LA(1);
                                if ( (LA434_0==Comma) ) {
                                    alt434=1;
                                }
                                switch (alt434) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_157); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_58);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      							announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1());
                            	    }
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop434;
                                }
                            } while (true);
                            }
                            break;
                    }
                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationArgument_return retval = new InternalN4JSParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;
        try {
            {
            int alt437=2;
            int LA437_0 = input.LA(1);
            if ( (LA437_0==False||LA437_0==Null||LA437_0==True||LA437_0==SolidusEqualsSign||LA437_0==Solidus||LA437_0==RULE_DOUBLE||(LA437_0>=RULE_HEX_INT && LA437_0<=RULE_LEGACY_OCTAL_INT)||LA437_0==RULE_SCIENTIFIC_INT||LA437_0==RULE_STRING||LA437_0==RULE_INT) ) {
                alt437=1;
            }
            else if ( ((LA437_0>=Intersection && LA437_0<=Constructor)||LA437_0==Promisify||LA437_0==Default||LA437_0==Target||LA437_0==Await||LA437_0==Union||LA437_0==This||LA437_0==This_1||(LA437_0>=Type && LA437_0<=Void)||LA437_0==LeftParenthesis||LA437_0==QuestionMark||LA437_0==LeftSquareBracket||LA437_0==LeftCurlyBracket||LA437_0==Tilde||LA437_0==RULE_IDENTIFIER) ) {
                alt437=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 437, 0, input);
                throw nvae;
            }
            switch (alt437) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationList_return retval = new InternalN4JSParser.ruleAnnotationList_return();
        retval.start = input.LT(1);
        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_158);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2());
            }
            }
            }
            }
            }
            loop438:
            do {
                int alt438=2;
                int LA438_0 = input.LA(1);
                if ( (LA438_0==CommercialAt) ) {
                    alt438=1;
                }
                switch (alt438) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_158);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop438;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleExpressionAnnotationList_return retval = new InternalN4JSParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            int cnt439=0;
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);
                if ( (LA439_0==CommercialAt) ) {
                    alt439=1;
                }
                switch (alt439) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_158);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt439 >= 1 ) break loop439;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(439, input);
                        throw eee;
                }
                cnt439++;
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            int cnt440=0;
            loop440:
            do {
                int alt440=2;
                int LA440_0 = input.LA(1);
                if ( (LA440_0==CommercialAt) ) {
                    alt440=1;
                }
                switch (alt440) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_158);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt440 >= 1 ) break loop440;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(440, input);
                        throw eee;
                }
                cnt440++;
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;
        try {
            {
            {
            int cnt441=0;
            loop441:
            do {
                int alt441=2;
                int LA441_0 = input.LA(1);
                if ( (LA441_0==CommercialAt) ) {
                    alt441=1;
                }
                switch (alt441) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_158);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    if ( cnt441 >= 1 ) break loop441;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(441, input);
                        throw eee;
                }
                cnt441++;
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTypeReference_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeReference_return ruleTypeReference() throws RecognitionException {
        InternalN4JSParser.ruleTypeReference_return retval = new InternalN4JSParser.ruleTypeReference_return();
        retval.start = input.LT(1);
        Token FullStopKeyword_0_1=null;
        InternalN4JSParser.ruleTypeReferenceName_return AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1 = null;
        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;
        try {
            {
            {
            int alt442=2;
            alt442 = dfa442.predict(input);
            switch (alt442) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_124);
                    AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1=ruleTypeReferenceName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1!=null?((Token)AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1.start):null), (AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1!=null?((Token)AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1.stop):null), grammarAccess.getTypeReferenceAccess().getAstNamespaceAssignment_0_0());
                    }
                    }
                    }
                    FullStopKeyword_0_1=(Token)match(input,FullStop,FOLLOW_159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(FullStopKeyword_0_1, grammarAccess.getTypeReferenceAccess().getFullStopKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getTypeReferenceAccess().getDeclaredTypeAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSParser.ruleTypeReferenceName_return retval = new InternalN4JSParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);
        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;
        Token DefaultKeyword_5=null;
        try {
            {
            int alt443=7;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt443=1;
                }
                break;
            case This:
                {
                alt443=2;
                }
                break;
            case Await:
                {
                alt443=3;
                }
                break;
            case Promisify:
                {
                alt443=4;
                }
                break;
            case Target:
                {
                alt443=5;
                }
                break;
            case Default:
                {
                alt443=6;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt443=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 443, 0, input);
                throw nvae;
            }
            switch (alt443) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    DefaultKeyword_5=(Token)match(input,Default,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(DefaultKeyword_5, grammarAccess.getTypeReferenceNameAccess().getDefaultKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassDeclaration_return retval = new InternalN4JSParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);
        Token ClassKeyword_0_0_1=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_0_0_4 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_2 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            loop444:
            do {
                int alt444=2;
                int LA444_0 = input.LA(1);
                if ( ((LA444_0>=Protected && LA444_0<=Abstract)||LA444_0==External||(LA444_0>=Private && LA444_0<=Project)||LA444_0==Public||LA444_0==Static||LA444_0==Const) ) {
                    alt444=1;
                }
                switch (alt444) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop444;
                }
            } while (true);
            ClassKeyword_0_0_1=(Token)match(input,Class,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(ClassKeyword_0_0_1, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_1());
            }
            int alt445=2;
            int LA445_0 = input.LA(1);
            if ( (LA445_0==Tilde) ) {
                alt445=1;
            }
            switch (alt445) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_62);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            int alt446=2;
            int LA446_0 = input.LA(1);
            if ( ((LA446_0>=Intersection && LA446_0<=Constructor)||(LA446_0>=Promisify && LA446_0<=Abstract)||LA446_0==External||(LA446_0>=Private && LA446_0<=Project)||LA446_0==Public||LA446_0==Static||LA446_0==Target||(LA446_0>=Async && LA446_0<=Await)||LA446_0==Union||(LA446_0>=Yield && LA446_0<=This)||LA446_0==From||LA446_0==Type||(LA446_0>=Get && LA446_0<=Let)||(LA446_0>=Out && LA446_0<=Set)||LA446_0==As||LA446_0==Of||LA446_0==RULE_IDENTIFIER) ) {
                alt446=1;
            }
            else if ( (LA446_0==Implements) ) {
                int LA446_2 = input.LA(2);
                if ( (LA446_2==Implements||LA446_2==Extends||LA446_2==LessThanSign||LA446_2==LeftCurlyBracket||LA446_2==RULE_VERSION) ) {
                    alt446=1;
                }
            }
            switch (alt446) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_3());
                    }
                    }
                    }
                    break;
            }
            int alt447=2;
            int LA447_0 = input.LA(1);
            if ( (LA447_0==RULE_VERSION) ) {
                alt447=1;
            }
            switch (alt447) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    VersionDeclarationParserRuleCall_0_0_4=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.start):null), (VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.stop):null), grammarAccess.getN4ClassDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt448=2;
            int LA448_0 = input.LA(1);
            if ( (LA448_0==LessThanSign) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt449=2;
            int LA449_0 = input.LA(1);
            if ( (LA449_0==Implements||LA449_0==Extends) ) {
                alt449=1;
            }
            switch (alt449) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    ClassExtendsImplementsParserRuleCall_2=ruleClassExtendsImplements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsImplementsParserRuleCall_2!=null?((Token)ClassExtendsImplementsParserRuleCall_2.start):null), (ClassExtendsImplementsParserRuleCall_2!=null?((Token)ClassExtendsImplementsParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsImplementsParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSParser.ruleMembers_return retval = new InternalN4JSParser.ruleMembers_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop450:
            do {
                int alt450=2;
                int LA450_0 = input.LA(1);
                if ( ((LA450_0>=Intersection && LA450_0<=With)||(LA450_0>=For && LA450_0<=Var)||(LA450_0>=As && LA450_0<=Of)||LA450_0==LeftParenthesis||LA450_0==Asterisk||LA450_0==LessThanSign||(LA450_0>=CommercialAt && LA450_0<=LeftSquareBracket)||LA450_0==RULE_DOUBLE||(LA450_0>=RULE_HEX_INT && LA450_0<=RULE_OCTAL_INT)||LA450_0==RULE_SCIENTIFIC_INT||LA450_0==RULE_IDENTIFIER||LA450_0==RULE_STRING||LA450_0==RULE_INT) ) {
                    alt450=1;
                }
                switch (alt450) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_161);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop450;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSParser.norm1_Members_return retval = new InternalN4JSParser.norm1_Members_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
            }
            loop451:
            do {
                int alt451=2;
                int LA451_0 = input.LA(1);
                if ( ((LA451_0>=Intersection && LA451_0<=With)||(LA451_0>=For && LA451_0<=Var)||(LA451_0>=As && LA451_0<=Of)||LA451_0==LeftParenthesis||LA451_0==Asterisk||LA451_0==LessThanSign||(LA451_0>=CommercialAt && LA451_0<=LeftSquareBracket)||LA451_0==RULE_DOUBLE||(LA451_0>=RULE_HEX_INT && LA451_0<=RULE_OCTAL_INT)||LA451_0==RULE_SCIENTIFIC_INT||LA451_0==RULE_IDENTIFIER||LA451_0==RULE_STRING||LA451_0==RULE_INT) ) {
                    alt451=1;
                }
                switch (alt451) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_161);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop451;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleClassExtendsImplements_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassExtendsImplements_return ruleClassExtendsImplements() throws RecognitionException {
        InternalN4JSParser.ruleClassExtendsImplements_return retval = new InternalN4JSParser.ruleClassExtendsImplements_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_1 = null;
        try {
            {
            int alt454=2;
            int LA454_0 = input.LA(1);
            if ( (LA454_0==Extends) ) {
                alt454=1;
            }
            else if ( (LA454_0==Implements) ) {
                alt454=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 454, 0, input);
                throw nvae;
            }
            switch (alt454) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_162);
                    ClassExtendsClauseParserRuleCall_0_0=ruleClassExtendsClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.start):null), (ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0()); 
                    }
                    int alt452=2;
                    int LA452_0 = input.LA(1);
                    if ( (LA452_0==Implements) ) {
                        alt452=1;
                    }
                    switch (alt452) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassImplementsListParserRuleCall_0_1=ruleClassImplementsList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.start):null), (ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_65);
                    ClassImplementsListParserRuleCall_1_0=ruleClassImplementsList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.start):null), (ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0()); 
                    }
                    int alt453=2;
                    int LA453_0 = input.LA(1);
                    if ( (LA453_0==Extends) ) {
                        alt453=1;
                    }
                    switch (alt453) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassExtendsClauseParserRuleCall_1_1=ruleClassExtendsClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.start):null), (ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ClassExtendsImplements_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ClassExtendsImplements_return norm1_ClassExtendsImplements() throws RecognitionException {
        InternalN4JSParser.norm1_ClassExtendsImplements_return retval = new InternalN4JSParser.norm1_ClassExtendsImplements_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1 = null;
        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_0 = null;
        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_1 = null;
        try {
            {
            int alt457=2;
            int LA457_0 = input.LA(1);
            if ( (LA457_0==Extends) ) {
                alt457=1;
            }
            else if ( (LA457_0==Implements) ) {
                alt457=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 457, 0, input);
                throw nvae;
            }
            switch (alt457) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_162);
                    ClassExtendsClauseParserRuleCall_0_0=norm1_ClassExtendsClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.start):null), (ClassExtendsClauseParserRuleCall_0_0!=null?((Token)ClassExtendsClauseParserRuleCall_0_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_0_0()); 
                    }
                    int alt455=2;
                    int LA455_0 = input.LA(1);
                    if ( (LA455_0==Implements) ) {
                        alt455=1;
                    }
                    switch (alt455) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassImplementsListParserRuleCall_0_1=ruleClassImplementsList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.start):null), (ClassImplementsListParserRuleCall_0_1!=null?((Token)ClassImplementsListParserRuleCall_0_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_0_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_65);
                    ClassImplementsListParserRuleCall_1_0=ruleClassImplementsList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.start):null), (ClassImplementsListParserRuleCall_1_0!=null?((Token)ClassImplementsListParserRuleCall_1_0.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassImplementsListParserRuleCall_1_0()); 
                    }
                    int alt456=2;
                    int LA456_0 = input.LA(1);
                    if ( (LA456_0==Extends) ) {
                        alt456=1;
                    }
                    switch (alt456) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_2);
                            ClassExtendsClauseParserRuleCall_1_1=norm1_ClassExtendsClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.start):null), (ClassExtendsClauseParserRuleCall_1_1!=null?((Token)ClassExtendsClauseParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsImplementsAccess().getClassExtendsClauseParserRuleCall_1_1()); 
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.ruleClassExtendsClause_return retval = new InternalN4JSParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);
        Token ExtendsKeyword_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            ExtendsKeyword_0=(Token)match(input,Extends,FOLLOW_163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ExtendsKeyword_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt458=2;
            int LA458_0 = input.LA(1);
            if ( (LA458_0==Void) && (synpred276_InternalN4JSParser())) {
                alt458=1;
            }
            else if ( (LA458_0==This) ) {
                int LA458_2 = input.LA(2);
                if ( (synpred276_InternalN4JSParser()) ) {
                    alt458=1;
                }
                else if ( (true) ) {
                    alt458=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 458, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA458_0==Await) ) {
                int LA458_3 = input.LA(2);
                if ( (synpred276_InternalN4JSParser()) ) {
                    alt458=1;
                }
                else if ( (true) ) {
                    alt458=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 458, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA458_0==Promisify) ) {
                int LA458_4 = input.LA(2);
                if ( (synpred276_InternalN4JSParser()) ) {
                    alt458=1;
                }
                else if ( (true) ) {
                    alt458=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 458, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA458_0==Target) ) {
                int LA458_5 = input.LA(2);
                if ( (synpred276_InternalN4JSParser()) ) {
                    alt458=1;
                }
                else if ( (true) ) {
                    alt458=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 458, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA458_0==Default) && (synpred276_InternalN4JSParser())) {
                alt458=1;
            }
            else if ( (LA458_0==RULE_IDENTIFIER) ) {
                int LA458_7 = input.LA(2);
                if ( (synpred276_InternalN4JSParser()) ) {
                    alt458=1;
                }
                else if ( (true) ) {
                    alt458=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 458, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA458_0>=Intersection && LA458_0<=Implements)||(LA458_0>=Interface && LA458_0<=Abstract)||(LA458_0>=External && LA458_0<=Function)||(LA458_0>=Private && LA458_0<=Project)||(LA458_0>=Import && LA458_0<=Public)||LA458_0==Static||LA458_0==Async||LA458_0==Class||(LA458_0>=False && LA458_0<=Super)||LA458_0==Union||LA458_0==Yield||(LA458_0>=From && LA458_0<=Type)||(LA458_0>=Get && LA458_0<=Set)||LA458_0==SolidusEqualsSign||LA458_0==As||LA458_0==Of||LA458_0==LeftParenthesis||LA458_0==Solidus||LA458_0==LessThanSign||(LA458_0>=CommercialAt && LA458_0<=LeftSquareBracket)||LA458_0==LeftCurlyBracket||LA458_0==RULE_DOUBLE||(LA458_0>=RULE_HEX_INT && LA458_0<=RULE_LEGACY_OCTAL_INT)||LA458_0==RULE_SCIENTIFIC_INT||LA458_0==RULE_STRING||(LA458_0>=RULE_TEMPLATE_HEAD && LA458_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA458_0==RULE_INT) ) {
                alt458=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 458, 0, input);
                throw nvae;
            }
            switch (alt458) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0=ruleLeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.norm1_ClassExtendsClause_return retval = new InternalN4JSParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);
        Token ExtendsKeyword_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0 = null;
        InternalN4JSParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            ExtendsKeyword_0=(Token)match(input,Extends,FOLLOW_163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ExtendsKeyword_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0());
            }
            int alt459=2;
            int LA459_0 = input.LA(1);
            if ( (LA459_0==Void) && (synpred277_InternalN4JSParser())) {
                alt459=1;
            }
            else if ( (LA459_0==This) ) {
                int LA459_2 = input.LA(2);
                if ( (synpred277_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Await) ) {
                int LA459_3 = input.LA(2);
                if ( (synpred277_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Promisify) ) {
                int LA459_4 = input.LA(2);
                if ( (synpred277_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Target) ) {
                int LA459_5 = input.LA(2);
                if ( (synpred277_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA459_0==Default) && (synpred277_InternalN4JSParser())) {
                alt459=1;
            }
            else if ( (LA459_0==RULE_IDENTIFIER) ) {
                int LA459_7 = input.LA(2);
                if ( (synpred277_InternalN4JSParser()) ) {
                    alt459=1;
                }
                else if ( (true) ) {
                    alt459=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 459, 7, input);
                    throw nvae;
                }
            }
            else if ( ((LA459_0>=Intersection && LA459_0<=Implements)||(LA459_0>=Interface && LA459_0<=Abstract)||(LA459_0>=External && LA459_0<=Function)||(LA459_0>=Private && LA459_0<=Project)||(LA459_0>=Import && LA459_0<=Public)||LA459_0==Static||LA459_0==Async||LA459_0==Class||(LA459_0>=False && LA459_0<=Super)||LA459_0==Union||(LA459_0>=From && LA459_0<=Type)||(LA459_0>=Get && LA459_0<=Set)||LA459_0==SolidusEqualsSign||LA459_0==As||LA459_0==Of||LA459_0==LeftParenthesis||LA459_0==Solidus||LA459_0==LessThanSign||(LA459_0>=CommercialAt && LA459_0<=LeftSquareBracket)||LA459_0==LeftCurlyBracket||LA459_0==RULE_DOUBLE||(LA459_0>=RULE_HEX_INT && LA459_0<=RULE_LEGACY_OCTAL_INT)||LA459_0==RULE_SCIENTIFIC_INT||LA459_0==RULE_STRING||(LA459_0>=RULE_TEMPLATE_HEAD && LA459_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA459_0==RULE_INT) ) {
                alt459=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 459, 0, input);
                throw nvae;
            }
            switch (alt459) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_1_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0=norm1_LeftHandSideExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleClassImplementsList_return retval = new InternalN4JSParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);
        Token ImplementsKeyword_0=null;
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;
        try {
            {
            {
            ImplementsKeyword_0=(Token)match(input,Implements,FOLLOW_159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ImplementsKeyword_0, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_34);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1());
            }
            }
            }
            loop460:
            do {
                int alt460=2;
                int LA460_0 = input.LA(1);
                if ( (LA460_0==Comma) ) {
                    alt460=1;
                }
                switch (alt460) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_159); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_34);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop460;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassExpression_return retval = new InternalN4JSParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_3 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_4 = null;
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt461=2;
            int LA461_0 = input.LA(1);
            if ( ((LA461_0>=Intersection && LA461_0<=Constructor)||(LA461_0>=Promisify && LA461_0<=Abstract)||LA461_0==External||(LA461_0>=Private && LA461_0<=Project)||LA461_0==Public||LA461_0==Static||LA461_0==Target||(LA461_0>=Async && LA461_0<=Await)||LA461_0==Union||(LA461_0>=Yield && LA461_0<=This)||LA461_0==From||LA461_0==Type||(LA461_0>=Get && LA461_0<=Let)||(LA461_0>=Out && LA461_0<=Set)||LA461_0==As||LA461_0==Of||LA461_0==RULE_IDENTIFIER) ) {
                alt461=1;
            }
            else if ( (LA461_0==Implements) ) {
                int LA461_2 = input.LA(2);
                if ( (LA461_2==Implements||LA461_2==Extends||LA461_2==LeftCurlyBracket) ) {
                    alt461=1;
                }
            }
            switch (alt461) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                    }
                    }
                    }
                    break;
            }
            int alt462=2;
            int LA462_0 = input.LA(1);
            if ( (LA462_0==Implements||LA462_0==Extends) ) {
                alt462=1;
            }
            switch (alt462) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    ClassExtendsImplementsParserRuleCall_3=ruleClassExtendsImplements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.start):null), (ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSParser.norm1_N4ClassExpression_return retval = new InternalN4JSParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);
        Token ClassKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_ClassExtendsImplements_return ClassExtendsImplementsParserRuleCall_3 = null;
        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_4 = null;
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_63); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
            }
            int alt463=2;
            int LA463_0 = input.LA(1);
            if ( ((LA463_0>=Intersection && LA463_0<=Constructor)||(LA463_0>=Promisify && LA463_0<=Abstract)||LA463_0==External||(LA463_0>=Private && LA463_0<=Project)||LA463_0==Public||LA463_0==Static||LA463_0==Target||(LA463_0>=Async && LA463_0<=Await)||LA463_0==Union||LA463_0==This||LA463_0==From||LA463_0==Type||(LA463_0>=Get && LA463_0<=Let)||(LA463_0>=Out && LA463_0<=Set)||LA463_0==As||LA463_0==Of||LA463_0==RULE_IDENTIFIER) ) {
                alt463=1;
            }
            else if ( (LA463_0==Implements) ) {
                int LA463_2 = input.LA(2);
                if ( (LA463_2==Implements||LA463_2==Extends||LA463_2==LeftCurlyBracket) ) {
                    alt463=1;
                }
            }
            switch (alt463) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_63);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                    }
                    }
                    }
                    break;
            }
            int alt464=2;
            int LA464_0 = input.LA(1);
            if ( (LA464_0==Implements||LA464_0==Extends) ) {
                alt464=1;
            }
            switch (alt464) {
                case 1 :
                    {
                    pushFollow(FOLLOW_63);
                    ClassExtendsImplementsParserRuleCall_3=norm1_ClassExtendsImplements();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.start):null), (ClassExtendsImplementsParserRuleCall_3!=null?((Token)ClassExtendsImplementsParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsImplementsParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);
        Token InterfaceKeyword_0_0_1=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_0_0_4 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;
        InternalN4JSParser.ruleInterfaceExtendsList_return InterfaceExtendsListParserRuleCall_2 = null;
        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            loop465:
            do {
                int alt465=2;
                int LA465_0 = input.LA(1);
                if ( ((LA465_0>=Protected && LA465_0<=Abstract)||LA465_0==External||(LA465_0>=Private && LA465_0<=Project)||LA465_0==Public||LA465_0==Static||LA465_0==Const) ) {
                    alt465=1;
                }
                switch (alt465) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_10);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop465;
                }
            } while (true);
            InterfaceKeyword_0_0_1=(Token)match(input,Interface,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(InterfaceKeyword_0_0_1, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_1());
            }
            int alt466=2;
            int LA466_0 = input.LA(1);
            if ( (LA466_0==Tilde) ) {
                alt466=1;
            }
            switch (alt466) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_62);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0=ruleTypingStrategyDefSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_2_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_2());
                    }
                    }
                    }
                    break;
            }
            int alt467=2;
            int LA467_0 = input.LA(1);
            if ( ((LA467_0>=Intersection && LA467_0<=Constructor)||(LA467_0>=Promisify && LA467_0<=Abstract)||LA467_0==External||(LA467_0>=Private && LA467_0<=Project)||LA467_0==Public||LA467_0==Static||LA467_0==Target||(LA467_0>=Async && LA467_0<=Await)||LA467_0==Union||(LA467_0>=Yield && LA467_0<=This)||LA467_0==From||LA467_0==Type||(LA467_0>=Get && LA467_0<=Let)||(LA467_0>=Out && LA467_0<=Set)||LA467_0==As||LA467_0==Of||LA467_0==RULE_IDENTIFIER) ) {
                alt467=1;
            }
            else if ( (LA467_0==Implements) ) {
                int LA467_2 = input.LA(2);
                if ( (LA467_2==Implements||LA467_2==Extends||LA467_2==LessThanSign||LA467_2==LeftCurlyBracket||LA467_2==RULE_VERSION) ) {
                    alt467=1;
                }
            }
            switch (alt467) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_3());
                    }
                    }
                    }
                    break;
            }
            int alt468=2;
            int LA468_0 = input.LA(1);
            if ( (LA468_0==RULE_VERSION) ) {
                alt468=1;
            }
            switch (alt468) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    VersionDeclarationParserRuleCall_0_0_4=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.start):null), (VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4()); 
                    }
                    }
                    break;
            }
            }
            }
            int alt469=2;
            int LA469_0 = input.LA(1);
            if ( (LA469_0==LessThanSign) ) {
                alt469=1;
            }
            switch (alt469) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt470=2;
            int LA470_0 = input.LA(1);
            if ( (LA470_0==Implements||LA470_0==Extends) ) {
                alt470=1;
            }
            switch (alt470) {
                case 1 :
                    {
                    pushFollow(FOLLOW_9);
                    InterfaceExtendsListParserRuleCall_2=ruleInterfaceExtendsList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceExtendsListParserRuleCall_2!=null?((Token)InterfaceExtendsListParserRuleCall_2.start):null), (InterfaceExtendsListParserRuleCall_2!=null?((Token)InterfaceExtendsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceExtendsListParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleInterfaceExtendsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleInterfaceExtendsList_return ruleInterfaceExtendsList() throws RecognitionException {
        InternalN4JSParser.ruleInterfaceExtendsList_return retval = new InternalN4JSParser.ruleInterfaceExtendsList_return();
        retval.start = input.LT(1);
        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;
        try {
            {
            {
            int alt471=2;
            int LA471_0 = input.LA(1);
            if ( (LA471_0==Extends) ) {
                alt471=1;
            }
            else if ( (LA471_0==Implements) ) {
                alt471=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 471, 0, input);
                throw nvae;
            }
            switch (alt471) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceExtendsListAccess().getExtendsKeyword_0_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceExtendsListAccess().getImplementsKeyword_0_1());
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_34);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsAssignment_1());
            }
            }
            }
            loop472:
            do {
                int alt472=2;
                int LA472_0 = input.LA(1);
                if ( (LA472_0==Comma) ) {
                    alt472=1;
                }
                switch (alt472) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_159); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getInterfaceExtendsListAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_34);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceExtendsListAccess().getSuperInterfaceRefsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop472;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumDeclaration_return retval = new InternalN4JSParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);
        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleVersionDeclaration_return VersionDeclarationParserRuleCall_0_0_4 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;
        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            {
            {
            loop473:
            do {
                int alt473=2;
                int LA473_0 = input.LA(1);
                if ( ((LA473_0>=Protected && LA473_0<=Abstract)||LA473_0==External||(LA473_0>=Private && LA473_0<=Project)||LA473_0==Public||LA473_0==Static||LA473_0==Const) ) {
                    alt473=1;
                }
                switch (alt473) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop473;
                }
            } while (true);
            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
            }
            int alt474=2;
            int LA474_0 = input.LA(1);
            if ( ((LA474_0>=Intersection && LA474_0<=Implements)||(LA474_0>=Promisify && LA474_0<=Abstract)||LA474_0==External||(LA474_0>=Private && LA474_0<=Project)||LA474_0==Public||LA474_0==Static||LA474_0==Target||(LA474_0>=Async && LA474_0<=Await)||LA474_0==Union||(LA474_0>=Yield && LA474_0<=This)||LA474_0==From||LA474_0==Type||(LA474_0>=Get && LA474_0<=Let)||(LA474_0>=Out && LA474_0<=Set)||LA474_0==As||LA474_0==Of||LA474_0==RULE_IDENTIFIER) ) {
                alt474=1;
            }
            switch (alt474) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_12);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3());
                    }
                    }
                    }
                    break;
            }
            int alt475=2;
            int LA475_0 = input.LA(1);
            if ( (LA475_0==RULE_VERSION) ) {
                alt475=1;
            }
            switch (alt475) {
                case 1 :
                    {
                    pushFollow(FOLLOW_13);
                    VersionDeclarationParserRuleCall_0_0_4=ruleVersionDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.start):null), (VersionDeclarationParserRuleCall_0_0_4!=null?((Token)VersionDeclarationParserRuleCall_0_0_4.stop):null), grammarAccess.getN4EnumDeclarationAccess().getVersionDeclarationParserRuleCall_0_0_4()); 
                    }
                    }
                    break;
            }
            }
            }
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_36); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt477=2;
            int LA477_0 = input.LA(1);
            if ( ((LA477_0>=Intersection && LA477_0<=With)||(LA477_0>=For && LA477_0<=Var)||(LA477_0>=As && LA477_0<=Of)||LA477_0==RULE_IDENTIFIER) ) {
                alt477=1;
            }
            switch (alt477) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0());
                    }
                    }
                    }
                    loop476:
                    do {
                        int alt476=2;
                        int LA476_0 = input.LA(1);
                        if ( (LA476_0==Comma) ) {
                            alt476=1;
                        }
                        switch (alt476) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop476;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumLiteral_return retval = new InternalN4JSParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);
        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ValueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_47);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0());
            }
            }
            }
            int alt478=2;
            int LA478_0 = input.LA(1);
            if ( (LA478_0==Colon) ) {
                alt478=1;
            }
            switch (alt478) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ValueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ValueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (ValueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ValueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getValueExpressionAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4TypeAliasDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4TypeAliasDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4TypeAliasDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4TypeAliasDeclaration_return ruleN4TypeAliasDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4TypeAliasDeclaration_return retval = new InternalN4JSParser.ruleN4TypeAliasDeclaration_return();
        retval.start = input.LT(1);
        Token TypeKeyword_0_0_2=null;
        Token EqualsSignKeyword_2=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_3_0 = null;
        try {
            {
            {
            {
            {
            loop479:
            do {
                int alt479=2;
                int LA479_0 = input.LA(1);
                if ( ((LA479_0>=Protected && LA479_0<=Abstract)||LA479_0==External||(LA479_0>=Private && LA479_0<=Project)||LA479_0==Public||LA479_0==Static) ) {
                    alt479=1;
                }
                switch (alt479) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_16);
            	    ruleN4ModifierWithoutConst();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop479;
                }
            } while (true);
            TypeKeyword_0_0_2=(Token)match(input,Type,FOLLOW_165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(TypeKeyword_0_0_2, grammarAccess.getN4TypeAliasDeclarationAccess().getTypeKeyword_0_0_2());
            }
            int alt480=2;
            int LA480_0 = input.LA(1);
            if ( ((LA480_0>=Intersection && LA480_0<=Implements)||(LA480_0>=Promisify && LA480_0<=Abstract)||LA480_0==External||(LA480_0>=Private && LA480_0<=Project)||LA480_0==Public||LA480_0==Static||LA480_0==Target||(LA480_0>=Async && LA480_0<=Await)||LA480_0==Union||(LA480_0>=Yield && LA480_0<=This)||LA480_0==From||LA480_0==Type||(LA480_0>=Get && LA480_0<=Let)||(LA480_0>=Out && LA480_0<=Set)||LA480_0==As||LA480_0==Of||LA480_0==RULE_IDENTIFIER) ) {
                alt480=1;
            }
            switch (alt480) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_17);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4TypeAliasDeclarationAccess().getNameAssignment_0_0_3());
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt481=2;
            int LA481_0 = input.LA(1);
            if ( (LA481_0==LessThanSign) ) {
                alt481=1;
            }
            switch (alt481) {
                case 1 :
                    {
                    pushFollow(FOLLOW_18);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4TypeAliasDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            EqualsSignKeyword_2=(Token)match(input,EqualsSign,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(EqualsSignKeyword_2, grammarAccess.getN4TypeAliasDeclarationAccess().getEqualsSignKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredTypeRefTypeRefParserRuleCall_3_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_3_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getN4TypeAliasDeclarationAccess().getDeclaredTypeRefAssignment_3());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberDeclaration_return retval = new InternalN4JSParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;
        try {
            {
            int alt482=6;
            alt482 = dfa482.predict(input);
            switch (alt482) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;
        InternalN4JSParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;
        InternalN4JSParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;
        InternalN4JSParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;
        InternalN4JSParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;
        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;
        try {
            {
            int alt483=6;
            alt483 = dfa483.predict(input);
            switch (alt483) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_1_1_0=null;
        Token LeftParenthesisKeyword_1_1_2=null;
        Token RightParenthesisKeyword_1_1_4=null;
        Token SemicolonKeyword_1_1_6=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2 = null;
        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_166);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt495=4;
            alt495 = dfa495.predict(input);
            switch (alt495) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop484:
                    do {
                        int alt484=2;
                        int LA484_0 = input.LA(1);
                        if ( ((LA484_0>=Protected && LA484_0<=Abstract)||LA484_0==External||(LA484_0>=Private && LA484_0<=Project)||LA484_0==Public||LA484_0==Static||LA484_0==Const) ) {
                            alt484=1;
                        }
                        switch (alt484) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_167);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop484;
                        }
                    } while (true);
                    pushFollow(FOLLOW_168);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }
                    }
                    }
                    int alt485=2;
                    int LA485_0 = input.LA(1);
                    if ( (LA485_0==LeftCurlyBracket) && (synpred288_InternalN4JSParser())) {
                        alt485=1;
                    }
                    switch (alt485) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_112);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                            }
                            }
                            }
                            break;
                    }
                    int alt486=2;
                    int LA486_0 = input.LA(1);
                    if ( (LA486_0==Semicolon) ) {
                        alt486=1;
                    }
                    switch (alt486) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop487:
                    do {
                        int alt487=2;
                        int LA487_0 = input.LA(1);
                        if ( ((LA487_0>=Protected && LA487_0<=Abstract)||LA487_0==External||(LA487_0>=Private && LA487_0<=Project)||LA487_0==Public||LA487_0==Static||LA487_0==Const) ) {
                            alt487=1;
                        }
                        switch (alt487) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_169);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop487;
                        }
                    } while (true);
                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_110);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                    }
                    }
                    }
                    }
                    }
                    int alt488=2;
                    int LA488_0 = input.LA(1);
                    if ( (LA488_0==QuestionMark) ) {
                        alt488=1;
                    }
                    switch (alt488) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_1_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_1_1_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_1_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_1_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    FparFormalParameterParserRuleCall_1_1_3_0=ruleFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.start):null), (FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_1_4=(Token)match(input,RightParenthesis,FOLLOW_168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_1_4, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt489=2;
                    int LA489_0 = input.LA(1);
                    if ( (LA489_0==LeftCurlyBracket) && (synpred291_InternalN4JSParser())) {
                        alt489=1;
                    }
                    switch (alt489) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_112);
                            BodyBlockParserRuleCall_1_1_5_0=ruleBlock();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.start):null), (BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_5());
                            }
                            }
                            }
                            break;
                    }
                    int alt490=2;
                    int LA490_0 = input.LA(1);
                    if ( (LA490_0==Semicolon) ) {
                        alt490=1;
                    }
                    switch (alt490) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_1_6, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop491:
                    do {
                        int alt491=2;
                        alt491 = dfa491.predict(input);
                        switch (alt491) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_166);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop491;
                        }
                    } while (true);
                    int alt492=2;
                    int LA492_0 = input.LA(1);
                    if ( (LA492_0==LessThanSign) ) {
                        alt492=1;
                    }
                    switch (alt492) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_111);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }
                            }
                            break;
                    }
                    int alt493=2;
                    int LA493_0 = input.LA(1);
                    if ( (LA493_0==Asterisk) ) {
                        alt493=1;
                    }
                    else if ( ((LA493_0>=Intersection && LA493_0<=With)||(LA493_0>=For && LA493_0<=Var)||(LA493_0>=As && LA493_0<=Of)||LA493_0==LeftSquareBracket||LA493_0==RULE_DOUBLE||(LA493_0>=RULE_HEX_INT && LA493_0<=RULE_OCTAL_INT)||LA493_0==RULE_SCIENTIFIC_INT||LA493_0==RULE_IDENTIFIER||LA493_0==RULE_STRING||LA493_0==RULE_INT) ) {
                        alt493=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 493, 0, input);
                        throw nvae;
                    }
                    switch (alt493) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_43);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2=norm1_MethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_170);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0=ruleLiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_1_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2=ruleMethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt494=2;
                    int LA494_0 = input.LA(1);
                    if ( (LA494_0==Semicolon) ) {
                        alt494=1;
                    }
                    switch (alt494) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_1_1_0=null;
        Token LeftParenthesisKeyword_1_1_2=null;
        Token RightParenthesisKeyword_1_1_4=null;
        Token SemicolonKeyword_1_1_6=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_3_0 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_1_5_0 = null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2 = null;
        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_166);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt507=4;
            alt507 = dfa507.predict(input);
            switch (alt507) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop496:
                    do {
                        int alt496=2;
                        int LA496_0 = input.LA(1);
                        if ( ((LA496_0>=Protected && LA496_0<=Abstract)||LA496_0==External||(LA496_0>=Private && LA496_0<=Project)||LA496_0==Public||LA496_0==Static||LA496_0==Const) ) {
                            alt496=1;
                        }
                        switch (alt496) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_167);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop496;
                        }
                    } while (true);
                    pushFollow(FOLLOW_168);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }
                    }
                    }
                    int alt497=2;
                    int LA497_0 = input.LA(1);
                    if ( (LA497_0==LeftCurlyBracket) && (synpred296_InternalN4JSParser())) {
                        alt497=1;
                    }
                    switch (alt497) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_112);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                            }
                            }
                            }
                            break;
                    }
                    int alt498=2;
                    int LA498_0 = input.LA(1);
                    if ( (LA498_0==Semicolon) ) {
                        alt498=1;
                    }
                    switch (alt498) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop499:
                    do {
                        int alt499=2;
                        int LA499_0 = input.LA(1);
                        if ( ((LA499_0>=Protected && LA499_0<=Abstract)||LA499_0==External||(LA499_0>=Private && LA499_0<=Project)||LA499_0==Public||LA499_0==Static||LA499_0==Const) ) {
                            alt499=1;
                        }
                        switch (alt499) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_169);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop499;
                        }
                    } while (true);
                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_110);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                    }
                    }
                    }
                    }
                    }
                    int alt500=2;
                    int LA500_0 = input.LA(1);
                    if ( (LA500_0==QuestionMark) ) {
                        alt500=1;
                    }
                    switch (alt500) {
                        case 1 :
                            {
                            {
                            DeclaredOptionalQuestionMarkKeyword_1_1_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce(DeclaredOptionalQuestionMarkKeyword_1_1_1_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_1_1_0());
                            }
                            }
                            }
                            break;
                    }
                    LeftParenthesisKeyword_1_1_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LeftParenthesisKeyword_1_1_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    FparFormalParameterParserRuleCall_1_1_3_0=norm1_FormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.start):null), (FparFormalParameterParserRuleCall_1_1_3_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_1_4=(Token)match(input,RightParenthesis,FOLLOW_168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightParenthesisKeyword_1_1_4, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_4());
                    }
                    int alt501=2;
                    int LA501_0 = input.LA(1);
                    if ( (LA501_0==LeftCurlyBracket) && (synpred299_InternalN4JSParser())) {
                        alt501=1;
                    }
                    switch (alt501) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_112);
                            BodyBlockParserRuleCall_1_1_5_0=norm1_Block();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.start):null), (BodyBlockParserRuleCall_1_1_5_0!=null?((Token)BodyBlockParserRuleCall_1_1_5_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_5());
                            }
                            }
                            }
                            break;
                    }
                    int alt502=2;
                    int LA502_0 = input.LA(1);
                    if ( (LA502_0==Semicolon) ) {
                        alt502=1;
                    }
                    switch (alt502) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_1_6, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_6());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop503:
                    do {
                        int alt503=2;
                        alt503 = dfa503.predict(input);
                        switch (alt503) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_166);
                    	    ruleN4Modifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop503;
                        }
                    } while (true);
                    int alt504=2;
                    int LA504_0 = input.LA(1);
                    if ( (LA504_0==LessThanSign) ) {
                        alt504=1;
                    }
                    switch (alt504) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_111);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }
                            }
                            break;
                    }
                    int alt505=2;
                    int LA505_0 = input.LA(1);
                    if ( (LA505_0==Asterisk) ) {
                        alt505=1;
                    }
                    else if ( ((LA505_0>=Intersection && LA505_0<=With)||(LA505_0>=For && LA505_0<=Var)||(LA505_0>=As && LA505_0<=Of)||LA505_0==LeftSquareBracket||LA505_0==RULE_DOUBLE||(LA505_0>=RULE_HEX_INT && LA505_0<=RULE_OCTAL_INT)||LA505_0==RULE_SCIENTIFIC_INT||LA505_0==RULE_IDENTIFIER||LA505_0==RULE_STRING||LA505_0==RULE_INT) ) {
                        alt505=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 505, 0, input);
                        throw nvae;
                    }
                    switch (alt505) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce(GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0());
                            }
                            }
                            }
                            {
                            {
                            pushFollow(FOLLOW_43);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_0_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2=norm1_MethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2()); 
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_109);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_170);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0=norm1_LiteralOrComputedPropertyName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_3_1_1());
                            }
                            }
                            }
                            {
                            pushFollow(FOLLOW_112);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2=ruleMethodParamsReturnAndBody();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2()); 
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    int alt506=2;
                    int LA506_0 = input.LA(1);
                    if ( (LA506_0==Semicolon) ) {
                        alt506=1;
                    }
                    switch (alt506) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_3 = null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;
        try {
            {
            {
            loop508:
            do {
                int alt508=2;
                alt508 = dfa508.predict(input);
                switch (alt508) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_109);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop508;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_171);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt509=2;
            int LA509_0 = input.LA(1);
            if ( (LA509_0==QuestionMark) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt510=2;
            int LA510_0 = input.LA(1);
            if ( (LA510_0==Colon) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    pushFollow(FOLLOW_173);
                    ColonSepDeclaredTypeRefParserRuleCall_3=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            int alt511=2;
            int LA511_0 = input.LA(1);
            if ( (LA511_0==EqualsSign) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_22);
                    ExpressionExpressionParserRuleCall_4_1_0=norm1_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1());
                    }
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_3 = null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;
        try {
            {
            {
            loop512:
            do {
                int alt512=2;
                alt512 = dfa512.predict(input);
                switch (alt512) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_109);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop512;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_171);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt513=2;
            int LA513_0 = input.LA(1);
            if ( (LA513_0==QuestionMark) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getFieldDeclarationImplAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            int alt514=2;
            int LA514_0 = input.LA(1);
            if ( (LA514_0==Colon) ) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    {
                    pushFollow(FOLLOW_173);
                    ColonSepDeclaredTypeRefParserRuleCall_3=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.start):null), (ColonSepDeclaredTypeRefParserRuleCall_3!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepDeclaredTypeRefParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            int alt515=2;
            int LA515_0 = input.LA(1);
            if ( (LA515_0==EqualsSign) ) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_22);
                    ExpressionExpressionParserRuleCall_4_1_0=norm3_Expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1());
                    }
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4FieldDeclaration_return retval = new InternalN4JSParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MethodDeclaration_return retval = new InternalN4JSParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1 = null;
        try {
            {
            {
            {
            {
            loop516:
            do {
                int alt516=2;
                alt516 = dfa516.predict(input);
                switch (alt516) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_166);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop516;
                }
            } while (true);
            int alt517=2;
            int LA517_0 = input.LA(1);
            if ( (LA517_0==LessThanSign) ) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    pushFollow(FOLLOW_111);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_111);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_3=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3()); 
            }
            int alt518=2;
            int LA518_0 = input.LA(1);
            if ( (LA518_0==Asterisk) ) {
                alt518=1;
            }
            else if ( ((LA518_0>=Intersection && LA518_0<=With)||(LA518_0>=For && LA518_0<=Var)||(LA518_0>=As && LA518_0<=Of)||LA518_0==LeftSquareBracket||LA518_0==RULE_DOUBLE||(LA518_0>=RULE_HEX_INT && LA518_0<=RULE_OCTAL_INT)||LA518_0==RULE_SCIENTIFIC_INT||LA518_0==RULE_IDENTIFIER||LA518_0==RULE_STRING||LA518_0==RULE_INT) ) {
                alt518=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 518, 0, input);
                throw nvae;
            }
            switch (alt518) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_43);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_170);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1=ruleMethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt519=2;
            int LA519_0 = input.LA(1);
            if ( (LA519_0==Semicolon) ) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);
        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0 = null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1 = null;
        try {
            {
            {
            {
            {
            loop520:
            do {
                int alt520=2;
                alt520 = dfa520.predict(input);
                switch (alt520) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_166);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop520;
                }
            } while (true);
            int alt521=2;
            int LA521_0 = input.LA(1);
            if ( (LA521_0==LessThanSign) ) {
                alt521=1;
            }
            switch (alt521) {
                case 1 :
                    {
                    pushFollow(FOLLOW_111);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_111);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_3=ruleAsyncNoTrailingLineBreak();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3()); 
            }
            int alt522=2;
            int LA522_0 = input.LA(1);
            if ( (LA522_0==Asterisk) ) {
                alt522=1;
            }
            else if ( ((LA522_0>=Intersection && LA522_0<=With)||(LA522_0>=For && LA522_0<=Var)||(LA522_0>=As && LA522_0<=Of)||LA522_0==LeftSquareBracket||LA522_0==RULE_DOUBLE||(LA522_0>=RULE_HEX_INT && LA522_0<=RULE_OCTAL_INT)||LA522_0==RULE_SCIENTIFIC_INT||LA522_0==RULE_IDENTIFIER||LA522_0==RULE_STRING||LA522_0==RULE_INT) ) {
                alt522=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 522, 0, input);
                throw nvae;
            }
            switch (alt522) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_43);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_170);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_0_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_112);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1=ruleMethodParamsReturnAndBody();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_1()); 
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            int alt523=2;
            int LA523_0 = input.LA(1);
            if ( (LA523_0==Semicolon) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_112);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt524=2;
            int LA524_0 = input.LA(1);
            if ( (LA524_0==Semicolon) ) {
                alt524=1;
            }
            switch (alt524) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_112);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt525=2;
            int LA525_0 = input.LA(1);
            if ( (LA525_0==Semicolon) ) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsAndBody_return retval = new InternalN4JSParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_174);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt526=2;
            int LA526_0 = input.LA(1);
            if ( (LA526_0==LeftCurlyBracket) && (synpred309_InternalN4JSParser())) {
                alt526=1;
            }
            switch (alt526) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_174);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt527=2;
            int LA527_0 = input.LA(1);
            if ( (LA527_0==LeftCurlyBracket) && (synpred310_InternalN4JSParser())) {
                alt527=1;
            }
            switch (alt527) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_1 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_175);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt528=2;
            int LA528_0 = input.LA(1);
            if ( (LA528_0==Colon) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    pushFollow(FOLLOW_174);
                    ColonSepDeclaredReturnTypeRefParserRuleCall_1=ruleColonSepDeclaredReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_1.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt529=2;
            int LA529_0 = input.LA(1);
            if ( (LA529_0==LeftCurlyBracket) && (synpred311_InternalN4JSParser())) {
                alt529=1;
            }
            switch (alt529) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ColonSepDeclaredReturnTypeRefParserRuleCall_1 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_175);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt530=2;
            int LA530_0 = input.LA(1);
            if ( (LA530_0==Colon) ) {
                alt530=1;
            }
            switch (alt530) {
                case 1 :
                    {
                    pushFollow(FOLLOW_174);
                    ColonSepDeclaredReturnTypeRefParserRuleCall_1=ruleColonSepDeclaredReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_1.start):null), (ColonSepDeclaredReturnTypeRefParserRuleCall_1!=null?((Token)ColonSepDeclaredReturnTypeRefParserRuleCall_1.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getColonSepDeclaredReturnTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt531=2;
            int LA531_0 = input.LA(1);
            if ( (LA531_0==LeftCurlyBracket) && (synpred312_InternalN4JSParser())) {
                alt531=1;
            }
            switch (alt531) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4GetterDeclaration_return retval = new InternalN4JSParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_2=null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            loop532:
            do {
                int alt532=2;
                int LA532_0 = input.LA(1);
                if ( ((LA532_0>=Protected && LA532_0<=Abstract)||LA532_0==External||(LA532_0>=Private && LA532_0<=Project)||LA532_0==Public||LA532_0==Static||LA532_0==Const) ) {
                    alt532=1;
                }
                switch (alt532) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_167);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop532;
                }
            } while (true);
            pushFollow(FOLLOW_168);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }
            }
            }
            int alt533=2;
            int LA533_0 = input.LA(1);
            if ( (LA533_0==LeftCurlyBracket) && (synpred314_InternalN4JSParser())) {
                alt533=1;
            }
            switch (alt533) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_112);
                    BodyBlockParserRuleCall_1_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt534=2;
            int LA534_0 = input.LA(1);
            if ( (LA534_0==Semicolon) ) {
                alt534=1;
            }
            switch (alt534) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);
        Token SemicolonKeyword_2=null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            loop535:
            do {
                int alt535=2;
                int LA535_0 = input.LA(1);
                if ( ((LA535_0>=Protected && LA535_0<=Abstract)||LA535_0==External||(LA535_0>=Private && LA535_0<=Project)||LA535_0==Public||LA535_0==Static||LA535_0==Const) ) {
                    alt535=1;
                }
                switch (alt535) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_167);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop535;
                }
            } while (true);
            pushFollow(FOLLOW_168);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }
            }
            }
            int alt536=2;
            int LA536_0 = input.LA(1);
            if ( (LA536_0==LeftCurlyBracket) && (synpred316_InternalN4JSParser())) {
                alt536=1;
            }
            switch (alt536) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_112);
                    BodyBlockParserRuleCall_1_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                    }
                    }
                    }
                    break;
            }
            int alt537=2;
            int LA537_0 = input.LA(1);
            if ( (LA537_0==Semicolon) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSParser.ruleGetterHeader_return retval = new InternalN4JSParser.ruleGetterHeader_return();
        retval.start = input.LT(1);
        Token GetKeyword_0=null;
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_5 = null;
        try {
            {
            {
            GetKeyword_0=(Token)match(input,Get,FOLLOW_109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GetKeyword_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_110);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt538=2;
            int LA538_0 = input.LA(1);
            if ( (LA538_0==QuestionMark) ) {
                alt538=1;
            }
            switch (alt538) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_73); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt539=2;
            int LA539_0 = input.LA(1);
            if ( (LA539_0==Colon) ) {
                alt539=1;
            }
            switch (alt539) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_5=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.start):null), (ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSParser.norm1_GetterHeader_return retval = new InternalN4JSParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);
        Token GetKeyword_0=null;
        Token DeclaredOptionalQuestionMarkKeyword_2_0=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ColonSepDeclaredTypeRefParserRuleCall_5 = null;
        try {
            {
            {
            GetKeyword_0=(Token)match(input,Get,FOLLOW_109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GetKeyword_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_110);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_1());
            }
            }
            }
            int alt540=2;
            int LA540_0 = input.LA(1);
            if ( (LA540_0==QuestionMark) ) {
                alt540=1;
            }
            switch (alt540) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_2_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_2_0, grammarAccess.getGetterHeaderAccess().getDeclaredOptionalQuestionMarkKeyword_2_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_73); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
            }
            int alt541=2;
            int LA541_0 = input.LA(1);
            if ( (LA541_0==Colon) ) {
                alt541=1;
            }
            switch (alt541) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepDeclaredTypeRefParserRuleCall_5=ruleColonSepDeclaredTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.start):null), (ColonSepDeclaredTypeRefParserRuleCall_5!=null?((Token)ColonSepDeclaredTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepDeclaredTypeRefParserRuleCall_5()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4SetterDeclaration_return retval = new InternalN4JSParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        Token SemicolonKeyword_6=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            loop542:
            do {
                int alt542=2;
                int LA542_0 = input.LA(1);
                if ( ((LA542_0>=Protected && LA542_0<=Abstract)||LA542_0==External||(LA542_0>=Private && LA542_0<=Project)||LA542_0==Public||LA542_0==Static||LA542_0==Const) ) {
                    alt542=1;
                }
                switch (alt542) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_169);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop542;
                }
            } while (true);
            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            pushFollow(FOLLOW_110);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
            }
            }
            }
            }
            }
            int alt543=2;
            int LA543_0 = input.LA(1);
            if ( (LA543_0==QuestionMark) ) {
                alt543=1;
            }
            switch (alt543) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_73);
            FparFormalParameterParserRuleCall_3_0=ruleFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt544=2;
            int LA544_0 = input.LA(1);
            if ( (LA544_0==LeftCurlyBracket) && (synpred321_InternalN4JSParser())) {
                alt544=1;
            }
            switch (alt544) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_112);
                    BodyBlockParserRuleCall_5_0=ruleBlock();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_5());
                    }
                    }
                    }
                    break;
            }
            int alt545=2;
            int LA545_0 = input.LA(1);
            if ( (LA545_0==Semicolon) ) {
                alt545=1;
            }
            switch (alt545) {
                case 1 :
                    {
                    SemicolonKeyword_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_6, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_2=null;
        Token DeclaredOptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        Token SemicolonKeyword_6=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;
        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_3_0 = null;
        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_5_0 = null;
        try {
            {
            {
            {
            {
            loop546:
            do {
                int alt546=2;
                int LA546_0 = input.LA(1);
                if ( ((LA546_0>=Protected && LA546_0<=Abstract)||LA546_0==External||(LA546_0>=Private && LA546_0<=Project)||LA546_0==Public||LA546_0==Static||LA546_0==Const) ) {
                    alt546=1;
                }
                switch (alt546) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_169);
            	    ruleN4Modifier();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    }
            	    }
            	    break;
            	default :
            	    break loop546;
                }
            } while (true);
            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_109); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
            }
            {
            {
            pushFollow(FOLLOW_110);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
            }
            }
            }
            }
            }
            int alt547=2;
            int LA547_0 = input.LA(1);
            if ( (LA547_0==QuestionMark) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    DeclaredOptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(DeclaredOptionalQuestionMarkKeyword_1_0, grammarAccess.getN4SetterDeclarationAccess().getDeclaredOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_59); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_73);
            FparFormalParameterParserRuleCall_3_0=norm1_FormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.start):null), (FparFormalParameterParserRuleCall_3_0!=null?((Token)FparFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_4());
            }
            int alt548=2;
            int LA548_0 = input.LA(1);
            if ( (LA548_0==LeftCurlyBracket) && (synpred324_InternalN4JSParser())) {
                alt548=1;
            }
            switch (alt548) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_112);
                    BodyBlockParserRuleCall_5_0=norm1_Block();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.start):null), (BodyBlockParserRuleCall_5_0!=null?((Token)BodyBlockParserRuleCall_5_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_5());
                    }
                    }
                    }
                    break;
            }
            int alt549=2;
            int LA549_0 = input.LA(1);
            if ( (LA549_0==Semicolon) ) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    SemicolonKeyword_6=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(SemicolonKeyword_6, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_6());
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleBindingPattern_return retval = new InternalN4JSParser.ruleBindingPattern_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;
        try {
            {
            int alt550=2;
            int LA550_0 = input.LA(1);
            if ( (LA550_0==LeftCurlyBracket) ) {
                alt550=1;
            }
            else if ( (LA550_0==LeftSquareBracket) ) {
                alt550=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 550, 0, input);
                throw nvae;
            }
            switch (alt550) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_BindingPattern_return retval = new InternalN4JSParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;
        InternalN4JSParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;
        try {
            {
            int alt551=2;
            int LA551_0 = input.LA(1);
            if ( (LA551_0==LeftCurlyBracket) ) {
                alt551=1;
            }
            else if ( (LA551_0==LeftSquareBracket) ) {
                alt551=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 551, 0, input);
                throw nvae;
            }
            switch (alt551) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleObjectBindingPattern_return retval = new InternalN4JSParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;
        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt553=2;
            int LA553_0 = input.LA(1);
            if ( ((LA553_0>=Intersection && LA553_0<=With)||(LA553_0>=For && LA553_0<=Var)||(LA553_0>=As && LA553_0<=Of)||(LA553_0>=CommercialAt && LA553_0<=LeftSquareBracket)||LA553_0==RULE_DOUBLE||(LA553_0>=RULE_HEX_INT && LA553_0<=RULE_OCTAL_INT)||LA553_0==RULE_SCIENTIFIC_INT||LA553_0==RULE_IDENTIFIER||LA553_0==RULE_STRING||LA553_0==RULE_INT) ) {
                alt553=1;
            }
            switch (alt553) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                    }
                    }
                    }
                    loop552:
                    do {
                        int alt552=2;
                        int LA552_0 = input.LA(1);
                        if ( (LA552_0==Comma) ) {
                            alt552=1;
                        }
                        switch (alt552) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop552;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;
        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt555=2;
            int LA555_0 = input.LA(1);
            if ( ((LA555_0>=Intersection && LA555_0<=With)||(LA555_0>=For && LA555_0<=Var)||(LA555_0>=As && LA555_0<=Of)||(LA555_0>=CommercialAt && LA555_0<=LeftSquareBracket)||LA555_0==RULE_DOUBLE||(LA555_0>=RULE_HEX_INT && LA555_0<=RULE_OCTAL_INT)||LA555_0==RULE_SCIENTIFIC_INT||LA555_0==RULE_IDENTIFIER||LA555_0==RULE_STRING||LA555_0==RULE_INT) ) {
                alt555=1;
            }
            switch (alt555) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                    }
                    }
                    }
                    loop554:
                    do {
                        int alt554=2;
                        int LA554_0 = input.LA(1);
                        if ( (LA554_0==Comma) ) {
                            alt554=1;
                        }
                        switch (alt554) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_177); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop554;
                        }
                    } while (true);
                    }
                    break;
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleArrayBindingPattern_return retval = new InternalN4JSParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop556:
            do {
                int alt556=2;
                int LA556_0 = input.LA(1);
                if ( (LA556_0==Comma) ) {
                    alt556=1;
                }
                switch (alt556) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_178);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop556;
                }
            } while (true);
            int alt561=2;
            int LA561_0 = input.LA(1);
            if ( ((LA561_0>=Intersection && LA561_0<=Implements)||(LA561_0>=Promisify && LA561_0<=Abstract)||LA561_0==External||(LA561_0>=Private && LA561_0<=Project)||LA561_0==Public||LA561_0==Static||LA561_0==Target||(LA561_0>=Async && LA561_0<=Await)||LA561_0==Union||(LA561_0>=Yield && LA561_0<=This)||LA561_0==From||LA561_0==Type||LA561_0==FullStopFullStopFullStop||(LA561_0>=Get && LA561_0<=Let)||(LA561_0>=Out && LA561_0<=Set)||LA561_0==As||LA561_0==Of||(LA561_0>=CommercialAt && LA561_0<=LeftSquareBracket)||LA561_0==LeftCurlyBracket||LA561_0==RULE_IDENTIFIER) ) {
                alt561=1;
            }
            switch (alt561) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_102);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop558:
                    do {
                        int alt558=2;
                        alt558 = dfa558.predict(input);
                        switch (alt558) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_179); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop557:
                    	    do {
                    	        int alt557=2;
                    	        int LA557_0 = input.LA(1);
                    	        if ( (LA557_0==Comma) ) {
                    	            alt557=1;
                    	        }
                    	        switch (alt557) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_179);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop557;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_102);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop558;
                        }
                    } while (true);
                    int alt560=2;
                    int LA560_0 = input.LA(1);
                    if ( (LA560_0==Comma) ) {
                        alt560=1;
                    }
                    switch (alt560) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop559:
                            do {
                                int alt559=2;
                                int LA559_0 = input.LA(1);
                                if ( (LA559_0==Comma) ) {
                                    alt559=1;
                                }
                                switch (alt559) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_102);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop559;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);
        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;
        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
            }
            loop562:
            do {
                int alt562=2;
                int LA562_0 = input.LA(1);
                if ( (LA562_0==Comma) ) {
                    alt562=1;
                }
                switch (alt562) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_178);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop562;
                }
            } while (true);
            int alt567=2;
            int LA567_0 = input.LA(1);
            if ( ((LA567_0>=Intersection && LA567_0<=Implements)||(LA567_0>=Promisify && LA567_0<=Abstract)||LA567_0==External||(LA567_0>=Private && LA567_0<=Project)||LA567_0==Public||LA567_0==Static||LA567_0==Target||(LA567_0>=Async && LA567_0<=Await)||LA567_0==Union||LA567_0==This||LA567_0==From||LA567_0==Type||LA567_0==FullStopFullStopFullStop||(LA567_0>=Get && LA567_0<=Let)||(LA567_0>=Out && LA567_0<=Set)||LA567_0==As||LA567_0==Of||(LA567_0>=CommercialAt && LA567_0<=LeftSquareBracket)||LA567_0==LeftCurlyBracket||LA567_0==RULE_IDENTIFIER) ) {
                alt567=1;
            }
            switch (alt567) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_102);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                    }
                    }
                    }
                    loop564:
                    do {
                        int alt564=2;
                        alt564 = dfa564.predict(input);
                        switch (alt564) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_179); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	    }
                    	    loop563:
                    	    do {
                    	        int alt563=2;
                    	        int LA563_0 = input.LA(1);
                    	        if ( (LA563_0==Comma) ) {
                    	            alt563=1;
                    	        }
                    	        switch (alt563) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_179);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();
                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	    }
                    	    	    }
                    	    	    }
                    	    	    break;
                    	    	default :
                    	    	    break loop563;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_102);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop564;
                        }
                    } while (true);
                    int alt566=2;
                    int LA566_0 = input.LA(1);
                    if ( (LA566_0==Comma) ) {
                        alt566=1;
                    }
                    switch (alt566) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                            }
                            loop565:
                            do {
                                int alt565=2;
                                int LA565_0 = input.LA(1);
                                if ( (LA565_0==Comma) ) {
                                    alt565=1;
                                }
                                switch (alt565) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_102);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	    }
                            	    }
                            	    }
                            	    break;
                            	default :
                            	    break loop565;
                                }
                            } while (true);
                            }
                            break;
                    }
                    }
                    break;
            }
            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSParser.ruleBindingProperty_return retval = new InternalN4JSParser.ruleBindingProperty_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;
        InternalN4JSParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;
        try {
            {
            int alt568=2;
            alt568 = dfa568.predict(input);
            switch (alt568) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_96);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                    }
                    }
                    }
                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSParser.norm1_BindingProperty_return retval = new InternalN4JSParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;
        InternalN4JSParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;
        InternalN4JSParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;
        try {
            {
            int alt569=2;
            alt569 = dfa569.predict(input);
            switch (alt569) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_96);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                    }
                    }
                    }
                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSParser.ruleSingleNameBinding_return retval = new InternalN4JSParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm1_SingleNameBinding_return retval = new InternalN4JSParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();
            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
            }
            }
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingElement_return retval = new InternalN4JSParser.ruleBindingElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleBindingElementImpl_return BindingElementImplParserRuleCall = null;
        try {
            {
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall=ruleBindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.start):null), (BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.stop):null), grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall()); 
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElement_return retval = new InternalN4JSParser.norm1_BindingElement_return();
        retval.start = input.LT(1);
        InternalN4JSParser.norm1_BindingElementImpl_return BindingElementImplParserRuleCall = null;
        try {
            {
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall=norm1_BindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.start):null), (BindingElementImplParserRuleCall!=null?((Token)BindingElementImplParserRuleCall.stop):null), grammarAccess.getBindingElementAccess().getBindingElementImplParserRuleCall()); 
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingRestElement_return retval = new InternalN4JSParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);
        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.ruleBindingElementImpl_return BindingElementImplParserRuleCall_1 = null;
        try {
            {
            {
            int alt570=2;
            int LA570_0 = input.LA(1);
            if ( (LA570_0==FullStopFullStopFullStop) ) {
                alt570=1;
            }
            switch (alt570) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall_1=ruleBindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.start):null), (BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.stop):null), grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingRestElement_return retval = new InternalN4JSParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);
        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm1_BindingElementImpl_return BindingElementImplParserRuleCall_1 = null;
        try {
            {
            {
            int alt571=2;
            int LA571_0 = input.LA(1);
            if ( (LA571_0==FullStopFullStopFullStop) ) {
                alt571=1;
            }
            switch (alt571) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_59); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            BindingElementImplParserRuleCall_1=norm1_BindingElementImpl();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.start):null), (BindingElementImplParserRuleCall_1!=null?((Token)BindingElementImplParserRuleCall_1.stop):null), grammarAccess.getBindingRestElementAccess().getBindingElementImplParserRuleCall_1()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleBindingElementImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElementImpl_return ruleBindingElementImpl() throws RecognitionException {
        InternalN4JSParser.ruleBindingElementImpl_return retval = new InternalN4JSParser.ruleBindingElementImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;
        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;
        try {
            {
            int alt573=2;
            int LA573_0 = input.LA(1);
            if ( (LA573_0==LeftCurlyBracket) && (synpred327_InternalN4JSParser())) {
                alt573=1;
            }
            else if ( (LA573_0==LeftSquareBracket) && (synpred327_InternalN4JSParser())) {
                alt573=1;
            }
            else if ( ((LA573_0>=Intersection && LA573_0<=Implements)||(LA573_0>=Promisify && LA573_0<=Abstract)||LA573_0==External||(LA573_0>=Private && LA573_0<=Project)||LA573_0==Public||LA573_0==Static||LA573_0==Target||(LA573_0>=Async && LA573_0<=Await)||LA573_0==Union||(LA573_0>=Yield && LA573_0<=This)||LA573_0==From||LA573_0==Type||(LA573_0>=Get && LA573_0<=Let)||(LA573_0>=Out && LA573_0<=Set)||LA573_0==As||LA573_0==Of||LA573_0==CommercialAt||LA573_0==RULE_IDENTIFIER) ) {
                alt573=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 573, 0, input);
                throw nvae;
            }
            switch (alt573) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_66);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementImplAccess().getNestedPatternAssignment_0_0_0());
                    }
                    }
                    }
                    }
                    int alt572=2;
                    int LA572_0 = input.LA(1);
                    if ( (LA572_0==EqualsSign) ) {
                        alt572=1;
                    }
                    switch (alt572) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_53); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getExpressionAssignment_0_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getVarDeclAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingElementImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElementImpl_return norm1_BindingElementImpl() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElementImpl_return retval = new InternalN4JSParser.norm1_BindingElementImpl_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;
        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;
        try {
            {
            int alt575=2;
            int LA575_0 = input.LA(1);
            if ( (LA575_0==LeftCurlyBracket) && (synpred328_InternalN4JSParser())) {
                alt575=1;
            }
            else if ( (LA575_0==LeftSquareBracket) && (synpred328_InternalN4JSParser())) {
                alt575=1;
            }
            else if ( ((LA575_0>=Intersection && LA575_0<=Implements)||(LA575_0>=Promisify && LA575_0<=Abstract)||LA575_0==External||(LA575_0>=Private && LA575_0<=Project)||LA575_0==Public||LA575_0==Static||LA575_0==Target||(LA575_0>=Async && LA575_0<=Await)||LA575_0==Union||LA575_0==This||LA575_0==From||LA575_0==Type||(LA575_0>=Get && LA575_0<=Let)||(LA575_0>=Out && LA575_0<=Set)||LA575_0==As||LA575_0==Of||LA575_0==CommercialAt||LA575_0==RULE_IDENTIFIER) ) {
                alt575=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 575, 0, input);
                throw nvae;
            }
            switch (alt575) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_66);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementImplAccess().getNestedPatternAssignment_0_0_0());
                    }
                    }
                    }
                    }
                    int alt574=2;
                    int LA574_0 = input.LA(1);
                    if ( (LA574_0==EqualsSign) ) {
                        alt574=1;
                    }
                    switch (alt574) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_71); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementImplAccess().getEqualsSignKeyword_0_1_0());
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getExpressionAssignment_0_1_1());
                            }
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementImplAccess().getVarDeclAssignment_1());
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSParser.ruleElision_return retval = new InternalN4JSParser.ruleElision_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1=null;
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);
        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;
        try {
            {
            int alt576=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt576=1;
                }
                break;
            case RULE_STRING:
                {
                alt576=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt576=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt576=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 576, 0, input);
                throw nvae;
            }
            switch (alt576) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_129);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                    }
                    }
                    }
                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);
        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;
        try {
            {
            int alt577=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt577=1;
                }
                break;
            case RULE_STRING:
                {
                alt577=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt577=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt577=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 577, 0, input);
                throw nvae;
            }
            switch (alt577) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                    }
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                    }
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_71); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_129);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                    }
                    }
                    }
                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElement();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXElement_return ruleJSXElement() throws RecognitionException {
        InternalN4JSParser.ruleJSXElement_return retval = new InternalN4JSParser.ruleJSXElement_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_3_0_0=null;
        Token LessThanSignKeyword_3_0_2=null;
        Token SolidusKeyword_3_0_3=null;
        Token GreaterThanSignKeyword_3_0_5=null;
        Token SolidusKeyword_3_1_0=null;
        Token GreaterThanSignKeyword_3_1_1=null;
        InternalN4JSParser.ruleJSXElementName_return JsxElementNameJSXElementNameParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleJSXAttribute_return JsxAttributesJSXAttributeParserRuleCall_2_0 = null;
        InternalN4JSParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0_1_0 = null;
        InternalN4JSParser.ruleJSXElementName_return JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_8); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_180);
            JsxElementNameJSXElementNameParserRuleCall_1_0=ruleJSXElementName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.start):null), (JsxElementNameJSXElementNameParserRuleCall_1_0!=null?((Token)JsxElementNameJSXElementNameParserRuleCall_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxElementNameAssignment_1());
            }
            }
            }
            loop578:
            do {
                int alt578=2;
                int LA578_0 = input.LA(1);
                if ( ((LA578_0>=Intersection && LA578_0<=With)||(LA578_0>=For && LA578_0<=Var)||(LA578_0>=As && LA578_0<=Of)||LA578_0==LeftCurlyBracket||LA578_0==RULE_IDENTIFIER) ) {
                    alt578=1;
                }
                switch (alt578) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_180);
            	    JsxAttributesJSXAttributeParserRuleCall_2_0=ruleJSXAttribute();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((JsxAttributesJSXAttributeParserRuleCall_2_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_2_0.start):null), (JsxAttributesJSXAttributeParserRuleCall_2_0!=null?((Token)JsxAttributesJSXAttributeParserRuleCall_2_0.stop):null), grammarAccess.getJSXElementAccess().getJsxAttributesAssignment_2());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop578;
                }
            } while (true);
            int alt580=2;
            int LA580_0 = input.LA(1);
            if ( (LA580_0==GreaterThanSign) ) {
                alt580=1;
            }
            else if ( (LA580_0==Solidus) ) {
                alt580=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 580, 0, input);
                throw nvae;
            }
            switch (alt580) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_3_0_0=(Token)match(input,GreaterThanSign,FOLLOW_181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(GreaterThanSignKeyword_3_0_0, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_0());
                    }
                    loop579:
                    do {
                        int alt579=2;
                        int LA579_0 = input.LA(1);
                        if ( (LA579_0==LessThanSign) ) {
                            int LA579_1 = input.LA(2);
                            if ( ((LA579_1>=Intersection && LA579_1<=Implements)||(LA579_1>=Promisify && LA579_1<=Abstract)||LA579_1==External||(LA579_1>=Private && LA579_1<=Project)||LA579_1==Public||LA579_1==Static||LA579_1==Target||(LA579_1>=Async && LA579_1<=Await)||LA579_1==Union||(LA579_1>=Yield && LA579_1<=This)||LA579_1==From||LA579_1==Type||(LA579_1>=Get && LA579_1<=Let)||(LA579_1>=Out && LA579_1<=Set)||LA579_1==As||LA579_1==Of||LA579_1==GreaterThanSign||LA579_1==RULE_IDENTIFIER) ) {
                                alt579=1;
                            }
                        }
                        else if ( (LA579_0==LeftCurlyBracket) ) {
                            alt579=1;
                        }
                        switch (alt579) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_181);
                    	    JsxChildrenJSXChildParserRuleCall_3_0_1_0=ruleJSXChild();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0_1_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0_1_0.stop):null), grammarAccess.getJSXElementAccess().getJsxChildrenAssignment_3_0_1());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop579;
                        }
                    } while (true);
                    LessThanSignKeyword_3_0_2=(Token)match(input,LessThanSign,FOLLOW_182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(LessThanSignKeyword_3_0_2, grammarAccess.getJSXElementAccess().getLessThanSignKeyword_3_0_2());
                    }
                    SolidusKeyword_3_0_3=(Token)match(input,Solidus,FOLLOW_8); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SolidusKeyword_3_0_3, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_0_3());
                    }
                    {
                    {
                    pushFollow(FOLLOW_135);
                    JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0=ruleJSXElementName();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0.start):null), (JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0!=null?((Token)JsxClosingNameJSXElementNameParserRuleCall_3_0_4_0.stop):null), grammarAccess.getJSXElementAccess().getJsxClosingNameAssignment_3_0_4());
                    }
                    }
                    }
                    GreaterThanSignKeyword_3_0_5=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(GreaterThanSignKeyword_3_0_5, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_0_5());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    SolidusKeyword_3_1_0=(Token)match(input,Solidus,FOLLOW_135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SolidusKeyword_3_1_0, grammarAccess.getJSXElementAccess().getSolidusKeyword_3_1_0());
                    }
                    GreaterThanSignKeyword_3_1_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(GreaterThanSignKeyword_3_1_1, grammarAccess.getJSXElementAccess().getGreaterThanSignKeyword_3_1_1());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXFragment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXFragment();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXFragment_return ruleJSXFragment() throws RecognitionException {
        InternalN4JSParser.ruleJSXFragment_return retval = new InternalN4JSParser.ruleJSXFragment_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_1=null;
        Token GreaterThanSignKeyword_2=null;
        Token LessThanSignKeyword_4=null;
        Token SolidusKeyword_5=null;
        Token GreaterThanSignKeyword_6=null;
        InternalN4JSParser.ruleJSXChild_return JsxChildrenJSXChildParserRuleCall_3_0 = null;
        try {
            {
            {
            LessThanSignKeyword_1=(Token)match(input,LessThanSign,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_1, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_1());
            }
            GreaterThanSignKeyword_2=(Token)match(input,GreaterThanSign,FOLLOW_181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_2, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_2());
            }
            loop581:
            do {
                int alt581=2;
                int LA581_0 = input.LA(1);
                if ( (LA581_0==LessThanSign) ) {
                    int LA581_1 = input.LA(2);
                    if ( ((LA581_1>=Intersection && LA581_1<=Implements)||(LA581_1>=Promisify && LA581_1<=Abstract)||LA581_1==External||(LA581_1>=Private && LA581_1<=Project)||LA581_1==Public||LA581_1==Static||LA581_1==Target||(LA581_1>=Async && LA581_1<=Await)||LA581_1==Union||(LA581_1>=Yield && LA581_1<=This)||LA581_1==From||LA581_1==Type||(LA581_1>=Get && LA581_1<=Let)||(LA581_1>=Out && LA581_1<=Set)||LA581_1==As||LA581_1==Of||LA581_1==GreaterThanSign||LA581_1==RULE_IDENTIFIER) ) {
                        alt581=1;
                    }
                }
                else if ( (LA581_0==LeftCurlyBracket) ) {
                    alt581=1;
                }
                switch (alt581) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_181);
            	    JsxChildrenJSXChildParserRuleCall_3_0=ruleJSXChild();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      				announce((JsxChildrenJSXChildParserRuleCall_3_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0.start):null), (JsxChildrenJSXChildParserRuleCall_3_0!=null?((Token)JsxChildrenJSXChildParserRuleCall_3_0.stop):null), grammarAccess.getJSXFragmentAccess().getJsxChildrenAssignment_3());
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop581;
                }
            } while (true);
            LessThanSignKeyword_4=(Token)match(input,LessThanSign,FOLLOW_182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_4, grammarAccess.getJSXFragmentAccess().getLessThanSignKeyword_4());
            }
            SolidusKeyword_5=(Token)match(input,Solidus,FOLLOW_135); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(SolidusKeyword_5, grammarAccess.getJSXFragmentAccess().getSolidusKeyword_5());
            }
            GreaterThanSignKeyword_6=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_6, grammarAccess.getJSXFragmentAccess().getGreaterThanSignKeyword_6());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXChild() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXChild();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXChild_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXChild_return ruleJSXChild() throws RecognitionException {
        InternalN4JSParser.ruleJSXChild_return retval = new InternalN4JSParser.ruleJSXChild_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleJSXElement_return JSXElementParserRuleCall_0 = null;
        InternalN4JSParser.ruleJSXFragment_return JSXFragmentParserRuleCall_1 = null;
        InternalN4JSParser.ruleJSXExpression_return JSXExpressionParserRuleCall_2 = null;
        try {
            {
            int alt582=3;
            int LA582_0 = input.LA(1);
            if ( (LA582_0==LessThanSign) ) {
                int LA582_1 = input.LA(2);
                if ( ((LA582_1>=Intersection && LA582_1<=Implements)||(LA582_1>=Promisify && LA582_1<=Abstract)||LA582_1==External||(LA582_1>=Private && LA582_1<=Project)||LA582_1==Public||LA582_1==Static||LA582_1==Target||(LA582_1>=Async && LA582_1<=Await)||LA582_1==Union||(LA582_1>=Yield && LA582_1<=This)||LA582_1==From||LA582_1==Type||(LA582_1>=Get && LA582_1<=Let)||(LA582_1>=Out && LA582_1<=Set)||LA582_1==As||LA582_1==Of||LA582_1==RULE_IDENTIFIER) ) {
                    alt582=1;
                }
                else if ( (LA582_1==GreaterThanSign) ) {
                    alt582=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 582, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA582_0==LeftCurlyBracket) ) {
                alt582=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 582, 0, input);
                throw nvae;
            }
            switch (alt582) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXElementParserRuleCall_0=ruleJSXElement();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.start):null), (JSXElementParserRuleCall_0!=null?((Token)JSXElementParserRuleCall_0.stop):null), grammarAccess.getJSXChildAccess().getJSXElementParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXFragmentParserRuleCall_1=ruleJSXFragment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXFragmentParserRuleCall_1!=null?((Token)JSXFragmentParserRuleCall_1.start):null), (JSXFragmentParserRuleCall_1!=null?((Token)JSXFragmentParserRuleCall_1.stop):null), grammarAccess.getJSXChildAccess().getJSXFragmentParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXExpressionParserRuleCall_2=ruleJSXExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXExpressionParserRuleCall_2!=null?((Token)JSXExpressionParserRuleCall_2.start):null), (JSXExpressionParserRuleCall_2!=null?((Token)JSXExpressionParserRuleCall_2.stop):null), grammarAccess.getJSXChildAccess().getJSXExpressionParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXExpression_return ruleJSXExpression() throws RecognitionException {
        InternalN4JSParser.ruleJSXExpression_return retval = new InternalN4JSParser.ruleJSXExpression_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXExpressionAccess().getLeftCurlyBracketKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_27);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getJSXExpressionAccess().getExpressionAssignment_1());
            }
            }
            }
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getJSXExpressionAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXElementName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXElementName_return ruleJSXElementName() throws RecognitionException {
        InternalN4JSParser.ruleJSXElementName_return retval = new InternalN4JSParser.ruleJSXElementName_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleJSXElementNameExpression_return ExpressionJSXElementNameExpressionParserRuleCall_0 = null;
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionJSXElementNameExpressionParserRuleCall_0=ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce((ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.start):null), (ExpressionJSXElementNameExpressionParserRuleCall_0!=null?((Token)ExpressionJSXElementNameExpressionParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameAccess().getExpressionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXElementNameExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXElementNameExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXElementNameExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXElementNameExpression_return ruleJSXElementNameExpression() throws RecognitionException {
        InternalN4JSParser.ruleJSXElementNameExpression_return retval = new InternalN4JSParser.ruleJSXElementNameExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1 = null;
        try {
            {
            {
            pushFollow(FOLLOW_183);
            IdentifierRefParserRuleCall_0=ruleIdentifierRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.start):null), (IdentifierRefParserRuleCall_0!=null?((Token)IdentifierRefParserRuleCall_0.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getIdentifierRefParserRuleCall_0()); 
            }
            loop583:
            do {
                int alt583=2;
                int LA583_0 = input.LA(1);
                if ( (LA583_0==QuestionMarkFullStop||LA583_0==FullStop) ) {
                    alt583=1;
                }
                switch (alt583) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_183);
            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1=ruleParameterizedPropertyAccessExpressionTail();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_1.stop):null), grammarAccess.getJSXElementNameExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_1()); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop583;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXAttribute();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXAttribute_return ruleJSXAttribute() throws RecognitionException {
        InternalN4JSParser.ruleJSXAttribute_return retval = new InternalN4JSParser.ruleJSXAttribute_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleJSXSpreadAttribute_return JSXSpreadAttributeParserRuleCall_0 = null;
        InternalN4JSParser.ruleJSXPropertyAttribute_return JSXPropertyAttributeParserRuleCall_1 = null;
        try {
            {
            int alt584=2;
            int LA584_0 = input.LA(1);
            if ( (LA584_0==LeftCurlyBracket) ) {
                alt584=1;
            }
            else if ( ((LA584_0>=Intersection && LA584_0<=With)||(LA584_0>=For && LA584_0<=Var)||(LA584_0>=As && LA584_0<=Of)||LA584_0==RULE_IDENTIFIER) ) {
                alt584=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 584, 0, input);
                throw nvae;
            }
            switch (alt584) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXSpreadAttributeParserRuleCall_0=ruleJSXSpreadAttribute();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.start):null), (JSXSpreadAttributeParserRuleCall_0!=null?((Token)JSXSpreadAttributeParserRuleCall_0.stop):null), grammarAccess.getJSXAttributeAccess().getJSXSpreadAttributeParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    JSXPropertyAttributeParserRuleCall_1=ruleJSXPropertyAttribute();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.start):null), (JSXPropertyAttributeParserRuleCall_1!=null?((Token)JSXPropertyAttributeParserRuleCall_1.stop):null), grammarAccess.getJSXAttributeAccess().getJSXPropertyAttributeParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXSpreadAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXSpreadAttribute();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXSpreadAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXSpreadAttribute_return ruleJSXSpreadAttribute() throws RecognitionException {
        InternalN4JSParser.ruleJSXSpreadAttribute_return retval = new InternalN4JSParser.ruleJSXSpreadAttribute_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token FullStopFullStopFullStopKeyword_1=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_184); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getJSXSpreadAttributeAccess().getLeftCurlyBracketKeyword_0());
            }
            FullStopFullStopFullStopKeyword_1=(Token)match(input,FullStopFullStopFullStop,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FullStopFullStopFullStopKeyword_1, grammarAccess.getJSXSpreadAttributeAccess().getFullStopFullStopFullStopKeyword_1());
            }
            {
            {
            pushFollow(FOLLOW_27);
            ExpressionAssignmentExpressionParserRuleCall_2_0=ruleAssignmentExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignment_2());
            }
            }
            }
            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_3, grammarAccess.getJSXSpreadAttributeAccess().getRightCurlyBracketKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXIdentifier_return ruleJSXIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleJSXIdentifier_return retval = new InternalN4JSParser.ruleJSXIdentifier_return();
        retval.start = input.LT(1);
        Token HyphenMinusKeyword_1_0_0=null;
        Token HyphenMinusHyphenMinusKeyword_1_0_1=null;
        try {
            {
            {
            pushFollow(FOLLOW_185);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            loop588:
            do {
                int alt588=2;
                int LA588_0 = input.LA(1);
                if ( (LA588_0==HyphenMinusHyphenMinus||LA588_0==HyphenMinus) ) {
                    alt588=1;
                }
                switch (alt588) {
            	case 1 :
            	    {
            	    int alt585=2;
            	    int LA585_0 = input.LA(1);
            	    if ( (LA585_0==HyphenMinus) ) {
            	        alt585=1;
            	    }
            	    else if ( (LA585_0==HyphenMinusHyphenMinus) ) {
            	        alt585=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 585, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt585) {
            	        case 1 :
            	            {
            	            HyphenMinusKeyword_1_0_0=(Token)match(input,HyphenMinus,FOLLOW_186); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(HyphenMinusKeyword_1_0_0, grammarAccess.getJSXIdentifierAccess().getHyphenMinusKeyword_1_0_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            HyphenMinusHyphenMinusKeyword_1_0_1=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_186); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(HyphenMinusHyphenMinusKeyword_1_0_1, grammarAccess.getJSXIdentifierAccess().getHyphenMinusHyphenMinusKeyword_1_0_1());
            	            }
            	            }
            	            break;
            	    }
            	    int alt587=2;
            	    alt587 = dfa587.predict(input);
            	    switch (alt587) {
            	        case 1 :
            	            {
            	            int alt586=7;
            	            switch ( input.LA(1) ) {
            	            case RULE_INT:
            	                {
            	                alt586=1;
            	                }
            	                break;
            	            case RULE_HEX_INT:
            	                {
            	                alt586=2;
            	                }
            	                break;
            	            case RULE_BINARY_INT:
            	                {
            	                alt586=3;
            	                }
            	                break;
            	            case RULE_OCTAL_INT:
            	                {
            	                alt586=4;
            	                }
            	                break;
            	            case RULE_SCIENTIFIC_INT:
            	                {
            	                alt586=5;
            	                }
            	                break;
            	            case RULE_LEGACY_OCTAL_INT:
            	                {
            	                alt586=6;
            	                }
            	                break;
            	            case Intersection:
            	            case Constructor:
            	            case Implements:
            	            case Instanceof:
            	            case Promisify:
            	            case Interface:
            	            case Protected:
            	            case Abstract:
            	            case Continue:
            	            case Debugger:
            	            case External:
            	            case Function:
            	            case Default:
            	            case Extends:
            	            case Finally:
            	            case Private:
            	            case Project:
            	            case Delete:
            	            case Export:
            	            case Import:
            	            case Public:
            	            case Return:
            	            case Static:
            	            case Switch:
            	            case Target:
            	            case Typeof:
            	            case Async:
            	            case Await:
            	            case Break:
            	            case Catch:
            	            case Class:
            	            case Const:
            	            case False:
            	            case Super:
            	            case Throw:
            	            case Union:
            	            case While:
            	            case Yield:
            	            case This:
            	            case Case:
            	            case Else:
            	            case Enum:
            	            case From:
            	            case Null:
            	            case This_1:
            	            case True:
            	            case Type:
            	            case Void:
            	            case With:
            	            case For:
            	            case Get:
            	            case Let:
            	            case New:
            	            case Out:
            	            case Set:
            	            case Try:
            	            case Var:
            	            case As:
            	            case Do:
            	            case If:
            	            case In:
            	            case Of:
            	            case RULE_IDENTIFIER:
            	                {
            	                alt586=7;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 586, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt586) {
            	                case 1 :
            	                    {
            	                    match(input,RULE_INT,FOLLOW_185); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    match(input,RULE_HEX_INT,FOLLOW_185); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    match(input,RULE_BINARY_INT,FOLLOW_185); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 4 :
            	                    {
            	                    match(input,RULE_OCTAL_INT,FOLLOW_185); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 5 :
            	                    {
            	                    match(input,RULE_SCIENTIFIC_INT,FOLLOW_185); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 6 :
            	                    {
            	                    match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_185); if (state.failed) return retval;
            	                    }
            	                    break;
            	                case 7 :
            	                    {
            	                    pushFollow(FOLLOW_185);
            	                    ruleIdentifierName();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop588;
                }
            } while (true);
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleJSXPropertyAttribute() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleJSXPropertyAttribute();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleJSXPropertyAttribute_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleJSXPropertyAttribute_return ruleJSXPropertyAttribute() throws RecognitionException {
        InternalN4JSParser.ruleJSXPropertyAttribute_return retval = new InternalN4JSParser.ruleJSXPropertyAttribute_return();
        retval.start = input.LT(1);
        Token EqualsSignKeyword_1_0=null;
        Token LeftCurlyBracketKeyword_1_1_3_0=null;
        Token RightCurlyBracketKeyword_1_1_3_2=null;
        InternalN4JSParser.ruleJSXIdentifier_return PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleStringLiteral_return JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleJSXElement_return JsxAttributeValueJSXElementParserRuleCall_1_1_1_0 = null;
        InternalN4JSParser.ruleJSXFragment_return JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0 = null;
        InternalN4JSParser.ruleAssignmentExpression_return JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1=ruleJSXIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1.start):null), (PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1!=null?((Token)PropertyIdentifiableElementJSXIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getPropertyAssignment_0());
            }
            }
            }
            int alt590=2;
            int LA590_0 = input.LA(1);
            if ( (LA590_0==EqualsSign) ) {
                alt590=1;
            }
            switch (alt590) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(EqualsSignKeyword_1_0, grammarAccess.getJSXPropertyAttributeAccess().getEqualsSignKeyword_1_0());
                    }
                    int alt589=4;
                    switch ( input.LA(1) ) {
                    case RULE_STRING:
                        {
                        alt589=1;
                        }
                        break;
                    case LessThanSign:
                        {
                        int LA589_2 = input.LA(2);
                        if ( ((LA589_2>=Intersection && LA589_2<=Implements)||(LA589_2>=Promisify && LA589_2<=Abstract)||LA589_2==External||(LA589_2>=Private && LA589_2<=Project)||LA589_2==Public||LA589_2==Static||LA589_2==Target||(LA589_2>=Async && LA589_2<=Await)||LA589_2==Union||(LA589_2>=Yield && LA589_2<=This)||LA589_2==From||LA589_2==Type||(LA589_2>=Get && LA589_2<=Let)||(LA589_2>=Out && LA589_2<=Set)||LA589_2==As||LA589_2==Of||LA589_2==RULE_IDENTIFIER) ) {
                            alt589=2;
                        }
                        else if ( (LA589_2==GreaterThanSign) ) {
                            alt589=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 589, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case LeftCurlyBracket:
                        {
                        alt589=4;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 589, 0, input);
                        throw nvae;
                    }
                    switch (alt589) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0=ruleStringLiteral();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.start):null), (JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0!=null?((Token)JsxAttributeValueStringLiteralParserRuleCall_1_1_0_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_0());
                            }
                            }
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueJSXElementParserRuleCall_1_1_1_0=ruleJSXElement();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((JsxAttributeValueJSXElementParserRuleCall_1_1_1_0!=null?((Token)JsxAttributeValueJSXElementParserRuleCall_1_1_1_0.start):null), (JsxAttributeValueJSXElementParserRuleCall_1_1_1_0!=null?((Token)JsxAttributeValueJSXElementParserRuleCall_1_1_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_1());
                            }
                            }
                            }
                            }
                            break;
                        case 3 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0=ruleJSXFragment();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              						announce((JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0!=null?((Token)JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0.start):null), (JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0!=null?((Token)JsxAttributeValueJSXFragmentParserRuleCall_1_1_2_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_2());
                            }
                            }
                            }
                            }
                            break;
                        case 4 :
                            {
                            {
                            LeftCurlyBracketKeyword_1_1_3_0=(Token)match(input,LeftCurlyBracket,FOLLOW_53); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(LeftCurlyBracketKeyword_1_1_3_0, grammarAccess.getJSXPropertyAttributeAccess().getLeftCurlyBracketKeyword_1_1_3_0());
                            }
                            {
                            {
                            pushFollow(FOLLOW_27);
                            JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0=ruleAssignmentExpression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              							announce((JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0.start):null), (JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0!=null?((Token)JsxAttributeValueAssignmentExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getJSXPropertyAttributeAccess().getJsxAttributeValueAssignment_1_1_3_1());
                            }
                            }
                            }
                            RightCurlyBracketKeyword_1_1_3_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(RightCurlyBracketKeyword_1_1_3_2, grammarAccess.getJSXPropertyAttributeAccess().getRightCurlyBracketKeyword_1_1_3_2());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleVersionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVersionDeclaration_return ruleVersionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleVersionDeclaration_return retval = new InternalN4JSParser.ruleVersionDeclaration_return();
        retval.start = input.LT(1);
        Token DeclaredVersionVERSIONTerminalRuleCall_0=null;
        try {
            {
            {
            {
            DeclaredVersionVERSIONTerminalRuleCall_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(DeclaredVersionVERSIONTerminalRuleCall_0, grammarAccess.getVersionDeclarationAccess().getDeclaredVersionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeRef_return retval = new InternalN4JSParser.ruleTypeRef_return();
        retval.start = input.LT(1);
        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_142);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getTypeRefAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt592=2;
            int LA592_0 = input.LA(1);
            if ( (LA592_0==VerticalLine) ) {
                alt592=1;
            }
            switch (alt592) {
                case 1 :
                    {
                    int cnt591=0;
                    loop591:
                    do {
                        int alt591=2;
                        int LA591_0 = input.LA(1);
                        if ( (LA591_0==VerticalLine) ) {
                            alt591=1;
                        }
                        switch (alt591) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_19); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(VerticalLineKeyword_1_1_0, grammarAccess.getTypeRefAccess().getVerticalLineKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_142);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTypeRefAccess().getTypeRefsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt591 >= 1 ) break loop591;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(591, input);
                                throw eee;
                        }
                        cnt591++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);
        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSParser.ruleArrayTypeExpression_return ArrayTypeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleArrayTypeExpression_return TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_140);
            ArrayTypeExpressionParserRuleCall_0=ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArrayTypeExpressionParserRuleCall_0!=null?((Token)ArrayTypeExpressionParserRuleCall_0.start):null), (ArrayTypeExpressionParserRuleCall_0!=null?((Token)ArrayTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getArrayTypeExpressionParserRuleCall_0()); 
            }
            int alt594=2;
            int LA594_0 = input.LA(1);
            if ( (LA594_0==Ampersand) ) {
                alt594=1;
            }
            switch (alt594) {
                case 1 :
                    {
                    int cnt593=0;
                    loop593:
                    do {
                        int alt593=2;
                        int LA593_0 = input.LA(1);
                        if ( (LA593_0==Ampersand) ) {
                            alt593=1;
                        }
                        switch (alt593) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_19); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_140);
                    	    TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0=ruleArrayTypeExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsArrayTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt593 >= 1 ) break loop593;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(593, input);
                                throw eee;
                        }
                        cnt593++;
                    } while (true);
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrayTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayTypeExpression_return ruleArrayTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrayTypeExpression_return retval = new InternalN4JSParser.ruleArrayTypeExpression_return();
        retval.start = input.LT(1);
        Token ArrayTypeExpressionLeftSquareBracketKeyword_0_2_0=null;
        Token RightSquareBracketKeyword_0_3=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0=null;
        Token RightSquareBracketKeyword_0_4_0_2=null;
        Token LeftParenthesisKeyword_1_1=null;
        Token RightParenthesisKeyword_1_3=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_1_4_0=null;
        Token RightSquareBracketKeyword_1_5=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0=null;
        Token RightSquareBracketKeyword_1_6_0_2=null;
        Token ArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0=null;
        Token RightSquareBracketKeyword_2_1_0_2=null;
        InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0 = null;
        InternalN4JSParser.ruleWildcard_return TypeArgsWildcardParserRuleCall_1_2_0 = null;
        InternalN4JSParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_2_0 = null;
        try {
            {
            int alt598=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                alt598=1;
                }
                break;
            case LeftParenthesis:
                {
                switch ( input.LA(2) ) {
                case Intersection:
                case Constructor:
                case Implements:
                case Promisify:
                case Interface:
                case Protected:
                case Abstract:
                case External:
                case Default:
                case Private:
                case Project:
                case Public:
                case Static:
                case Target:
                case Async:
                case Await:
                case Union:
                case Yield:
                case This:
                case From:
                case This_1:
                case Type:
                case Void:
                case FullStopFullStopFullStop:
                case Get:
                case Let:
                case Set:
                case As:
                case Of:
                case LeftParenthesis:
                case RightParenthesis:
                case LeftSquareBracket:
                case LeftCurlyBracket:
                case Tilde:
                case RULE_IDENTIFIER:
                    {
                    alt598=3;
                    }
                    break;
                case Out:
                    {
                    int LA598_4 = input.LA(3);
                    if ( (LA598_4==Colon) ) {
                        alt598=3;
                    }
                    else if ( ((LA598_4>=Intersection && LA598_4<=Constructor)||LA598_4==Promisify||LA598_4==Default||LA598_4==Target||LA598_4==Await||LA598_4==Union||LA598_4==This||LA598_4==This_1||(LA598_4>=Type && LA598_4<=Void)||LA598_4==LeftParenthesis||LA598_4==QuestionMark||LA598_4==LeftSquareBracket||LA598_4==LeftCurlyBracket||LA598_4==Tilde||LA598_4==RULE_IDENTIFIER) ) {
                        alt598=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 598, 4, input);
                        throw nvae;
                    }
                    }
                    break;
                case QuestionMark:
                    {
                    int LA598_5 = input.LA(3);
                    if ( (LA598_5==LeftSquareBracket) ) {
                        alt598=3;
                    }
                    else if ( (LA598_5==Extends||LA598_5==Super||LA598_5==RightParenthesis) ) {
                        alt598=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 598, 5, input);
                        throw nvae;
                    }
                    }
                    break;
                case In:
                    {
                    alt598=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 598, 2, input);
                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt598=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 598, 0, input);
                throw nvae;
            }
            switch (alt598) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_128);
                    TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0=ruleWildcardOldNotationWithoutBound();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0!=null?((Token)TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0.start):null), (TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0!=null?((Token)TypeArgsWildcardOldNotationWithoutBoundParserRuleCall_0_1_0.stop):null), grammarAccess.getArrayTypeExpressionAccess().getTypeArgsAssignment_0_1());
                    }
                    }
                    }
                    {
                    {
                    ArrayTypeExpressionLeftSquareBracketKeyword_0_2_0=(Token)match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ArrayTypeExpressionLeftSquareBracketKeyword_0_2_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_2_0());
                    }
                    }
                    }
                    RightSquareBracketKeyword_0_3=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_0_3, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_3());
                    }
                    loop595:
                    do {
                        int alt595=2;
                        int LA595_0 = input.LA(1);
                        if ( (LA595_0==LeftSquareBracket) ) {
                            int LA595_2 = input.LA(2);
                            if ( (LA595_2==RightSquareBracket) ) {
                                int LA595_3 = input.LA(3);
                                if ( (synpred330_InternalN4JSParser()) ) {
                                    alt595=1;
                                }
                            }
                        }
                        switch (alt595) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    ArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0=(Token)match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce(ArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_0_4_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    RightSquareBracketKeyword_0_4_0_2=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(RightSquareBracketKeyword_0_4_0_2, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_0_4_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop595;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    LeftParenthesisKeyword_1_1=(Token)match(input,LeftParenthesis,FOLLOW_189); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftParenthesisKeyword_1_1, grammarAccess.getArrayTypeExpressionAccess().getLeftParenthesisKeyword_1_1());
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    TypeArgsWildcardParserRuleCall_1_2_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeArgsWildcardParserRuleCall_1_2_0!=null?((Token)TypeArgsWildcardParserRuleCall_1_2_0.start):null), (TypeArgsWildcardParserRuleCall_1_2_0!=null?((Token)TypeArgsWildcardParserRuleCall_1_2_0.stop):null), grammarAccess.getArrayTypeExpressionAccess().getTypeArgsAssignment_1_2());
                    }
                    }
                    }
                    RightParenthesisKeyword_1_3=(Token)match(input,RightParenthesis,FOLLOW_128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_1_3, grammarAccess.getArrayTypeExpressionAccess().getRightParenthesisKeyword_1_3());
                    }
                    {
                    {
                    ArrayTypeExpressionLeftSquareBracketKeyword_1_4_0=(Token)match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ArrayTypeExpressionLeftSquareBracketKeyword_1_4_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_4_0());
                    }
                    }
                    }
                    RightSquareBracketKeyword_1_5=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightSquareBracketKeyword_1_5, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_5());
                    }
                    loop596:
                    do {
                        int alt596=2;
                        int LA596_0 = input.LA(1);
                        if ( (LA596_0==LeftSquareBracket) ) {
                            int LA596_2 = input.LA(2);
                            if ( (LA596_2==RightSquareBracket) ) {
                                int LA596_3 = input.LA(3);
                                if ( (synpred331_InternalN4JSParser()) ) {
                                    alt596=1;
                                }
                            }
                        }
                        switch (alt596) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    ArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0=(Token)match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce(ArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_1_6_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    RightSquareBracketKeyword_1_6_0_2=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(RightSquareBracketKeyword_1_6_0_2, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_1_6_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop596;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_188);
                    PrimaryTypeExpressionParserRuleCall_2_0=rulePrimaryTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryTypeExpressionParserRuleCall_2_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_2_0.start):null), (PrimaryTypeExpressionParserRuleCall_2_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_2_0()); 
                    }
                    loop597:
                    do {
                        int alt597=2;
                        int LA597_0 = input.LA(1);
                        if ( (LA597_0==LeftSquareBracket) ) {
                            int LA597_2 = input.LA(2);
                            if ( (LA597_2==RightSquareBracket) ) {
                                int LA597_3 = input.LA(3);
                                if ( (synpred332_InternalN4JSParser()) ) {
                                    alt597=1;
                                }
                            }
                        }
                        switch (alt597) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    ArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0=(Token)match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce(ArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0, grammarAccess.getArrayTypeExpressionAccess().getArrayTypeExpressionLeftSquareBracketKeyword_2_1_0_1_0());
                    	    }
                    	    }
                    	    }
                    	    RightSquareBracketKeyword_2_1_0_2=(Token)match(input,RightSquareBracket,FOLLOW_188); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(RightSquareBracketKeyword_2_1_0_2, grammarAccess.getArrayTypeExpressionAccess().getRightSquareBracketKeyword_2_1_0_2());
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop597;
                        }
                    } while (true);
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryTypeExpression_return retval = new InternalN4JSParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_0 = null;
        InternalN4JSParser.ruleIterableTypeExpression_return IterableTypeExpressionParserRuleCall_1 = null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;
        try {
            {
            int alt599=4;
            alt599 = dfa599.predict(input);
            switch (alt599) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_0=ruleArrowFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_0!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_0.start):null), (ArrowFunctionTypeExpressionParserRuleCall_0!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrowFunctionTypeExpressionParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IterableTypeExpressionParserRuleCall_1=ruleIterableTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.start):null), (IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                    }
                    pushFollow(FOLLOW_73);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);
        Token FollowedByQuestionMarkQuestionMarkKeyword_1_0=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0 = null;
        try {
            {
            {
            pushFollow(FOLLOW_146);
            TypeRefWithoutModifiersParserRuleCall_0=ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithoutModifiersParserRuleCall_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0()); 
            }
            int alt600=2;
            alt600 = dfa600.predict(input);
            switch (alt600) {
                case 1 :
                    {
                    {
                    FollowedByQuestionMarkQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(FollowedByQuestionMarkQuestionMarkKeyword_1_0, grammarAccess.getTypeRefWithModifiersAccess().getFollowedByQuestionMarkQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);
        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;
        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;
        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;
        try {
            {
            int alt603=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt603=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt603=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt603=3;
                }
                break;
            case Union:
                {
                alt603=4;
                }
                break;
            case Intersection:
                {
                alt603=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);
                throw nvae;
            }
            switch (alt603) {
                case 1 :
                    {
                    {
                    int alt601=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Default:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt601=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA601_4 = input.LA(3);
                            if ( (LA601_4==Promisify||LA601_4==Default||LA601_4==Target||LA601_4==Await||LA601_4==This||LA601_4==Void||LA601_4==RULE_IDENTIFIER) ) {
                                alt601=1;
                            }
                            else if ( (LA601_4==This_1) ) {
                                alt601=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 601, 4, input);
                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA601_5 = input.LA(3);
                            if ( (LA601_5==Promisify||LA601_5==Default||LA601_5==Target||LA601_5==Await||LA601_5==This||LA601_5==Void||LA601_5==RULE_IDENTIFIER) ) {
                                alt601=1;
                            }
                            else if ( (LA601_5==This_1) ) {
                                alt601=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 601, 5, input);
                                throw nvae;
                            }
                            }
                            break;
                        case Promisify:
                        case Default:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt601=1;
                            }
                            break;
                        case This_1:
                            {
                            alt601=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 601, 2, input);
                            throw nvae;
                        }
                        }
                        break;
                    case This_1:
                        {
                        alt601=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 601, 0, input);
                        throw nvae;
                    }
                    switch (alt601) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_38);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_38);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }
                            }
                            break;
                    }
                    int alt602=2;
                    alt602 = dfa602.predict(input);
                    switch (alt602) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              					announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                            }
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;
        InternalN4JSParser.ruleIterableTypeExpression_return IterableTypeExpressionParserRuleCall_1 = null;
        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;
        try {
            {
            int alt604=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Default:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt604=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt604=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt604=3;
                }
                break;
            case Union:
                {
                alt604=4;
                }
                break;
            case Intersection:
                {
                alt604=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 604, 0, input);
                throw nvae;
            }
            switch (alt604) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IterableTypeExpressionParserRuleCall_1=ruleIterableTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.start):null), (IterableTypeExpressionParserRuleCall_1!=null?((Token)IterableTypeExpressionParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIterableTypeExpressionParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;
        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;
        InternalN4JSParser.ruleWildcardOldNotation_return WildcardOldNotationParserRuleCall_2 = null;
        try {
            {
            int alt605=3;
            int LA605_0 = input.LA(1);
            if ( (LA605_0==Promisify||LA605_0==Default||LA605_0==Target||LA605_0==Await||LA605_0==This||LA605_0==Void||LA605_0==RULE_IDENTIFIER) ) {
                alt605=1;
            }
            else if ( (LA605_0==This_1) ) {
                alt605=2;
            }
            else if ( (LA605_0==QuestionMark) && (synpred336_InternalN4JSParser())) {
                alt605=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);
                throw nvae;
            }
            switch (alt605) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardOldNotationParserRuleCall_2=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardOldNotationParserRuleCall_2!=null?((Token)WildcardOldNotationParserRuleCall_2.start):null), (WildcardOldNotationParserRuleCall_2!=null?((Token)WildcardOldNotationParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardOldNotationParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRef_return retval = new InternalN4JSParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;
        InternalN4JSParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;
        try {
            {
            int alt606=2;
            int LA606_0 = input.LA(1);
            if ( (LA606_0==This_1) ) {
                alt606=1;
            }
            else if ( (LA606_0==Tilde) ) {
                alt606=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 606, 0, input);
                throw nvae;
            }
            switch (alt606) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefNominal_return retval = new InternalN4JSParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefStructural_return retval = new InternalN4JSParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);
        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_190);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0());
            }
            }
            }
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
            }
            int alt607=2;
            int LA607_0 = input.LA(1);
            if ( (LA607_0==With) ) {
                int LA607_1 = input.LA(2);
                if ( (LA607_1==LeftCurlyBracket) ) {
                    alt607=1;
                }
            }
            switch (alt607) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;
        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;
        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_8 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
            }
            int alt608=2;
            int LA608_0 = input.LA(1);
            if ( (LA608_0==CommercialAt) ) {
                alt608=1;
            }
            switch (alt608) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                    }
                    {
                    {
                    pushFollow(FOLLOW_73);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3());
                    }
                    }
                    }
                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                    }
                    }
                    break;
            }
            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
            }
            int alt610=2;
            int LA610_0 = input.LA(1);
            if ( (LA610_0==LessThanSign) ) {
                alt610=1;
            }
            switch (alt610) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_116);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1());
                    }
                    }
                    }
                    loop609:
                    do {
                        int alt609=2;
                        int LA609_0 = input.LA(1);
                        if ( (LA609_0==Comma) ) {
                            alt609=1;
                        }
                        switch (alt609) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_196); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      				announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_116);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      						announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop609;
                        }
                    } while (true);
                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
            }
            pushFollow(FOLLOW_73);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
            }
            int alt611=2;
            int LA611_0 = input.LA(1);
            if ( (LA611_0==Colon) ) {
                alt611=1;
            }
            switch (alt611) {
                case 1 :
                    {
                    pushFollow(FOLLOW_27);
                    ColonSepReturnTypeRefParserRuleCall_8=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_8!=null?((Token)ColonSepReturnTypeRefParserRuleCall_8.start):null), (ColonSepReturnTypeRefParserRuleCall_8!=null?((Token)ColonSepReturnTypeRefParserRuleCall_8.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getColonSepReturnTypeRefParserRuleCall_8()); 
                    }
                    }
                    break;
            }
            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0_0_1=null;
        Token RightParenthesisKeyword_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_4=null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_2 = null;
        InternalN4JSParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0 = null;
        try {
            {
            {
            {
            {
            LeftParenthesisKeyword_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftParenthesisKeyword_0_0_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_0_0_1());
            }
            pushFollow(FOLLOW_73);
            TAnonymousFormalParameterListParserRuleCall_0_0_2=ruleTAnonymousFormalParameterList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_2()); 
            }
            RightParenthesisKeyword_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_51); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(RightParenthesisKeyword_0_0_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_0_0_3());
            }
            EqualsSignGreaterThanSignKeyword_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(EqualsSignGreaterThanSignKeyword_0_0_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_4());
            }
            }
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0=rulePrimaryTypeExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);
        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;
        try {
            {
            int alt613=2;
            int LA613_0 = input.LA(1);
            if ( ((LA613_0>=Intersection && LA613_0<=Implements)||(LA613_0>=Promisify && LA613_0<=Abstract)||LA613_0==External||LA613_0==Default||(LA613_0>=Private && LA613_0<=Project)||LA613_0==Public||LA613_0==Static||LA613_0==Target||(LA613_0>=Async && LA613_0<=Await)||LA613_0==Union||(LA613_0>=Yield && LA613_0<=This)||LA613_0==From||LA613_0==This_1||(LA613_0>=Type && LA613_0<=Void)||LA613_0==FullStopFullStopFullStop||(LA613_0>=Get && LA613_0<=Let)||(LA613_0>=Out && LA613_0<=Set)||LA613_0==As||LA613_0==Of||LA613_0==LeftParenthesis||LA613_0==QuestionMark||LA613_0==LeftSquareBracket||LA613_0==LeftCurlyBracket||LA613_0==Tilde||LA613_0==RULE_IDENTIFIER) ) {
                alt613=1;
            }
            switch (alt613) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_34);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0());
                    }
                    }
                    }
                    loop612:
                    do {
                        int alt612=2;
                        int LA612_0 = input.LA(1);
                        if ( (LA612_0==Comma) ) {
                            alt612=1;
                        }
                        switch (alt612) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_199); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      			announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_34);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop612;
                        }
                    } while (true);
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);
        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0 = null;
        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_1 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;
        InternalN4JSParser.ruleDefaultFormalParameter_return DefaultFormalParameterParserRuleCall_2 = null;
        try {
            {
            {
            int alt614=2;
            int LA614_0 = input.LA(1);
            if ( (LA614_0==FullStopFullStopFullStop) ) {
                alt614=1;
            }
            switch (alt614) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                    }
                    }
                    }
                    break;
            }
            int alt615=2;
            alt615 = dfa615.predict(input);
            switch (alt615) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_96);
                    NameBindingIdentifierParserRuleCall_1_0_0_0_0=ruleBindingIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0_0_0());
                    }
                    }
                    }
                    {
                    pushFollow(FOLLOW_18);
                    ColonSepTypeRefParserRuleCall_1_0_0_1=ruleColonSepTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_1.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getColonSepTypeRefParserRuleCall_1_0_0_1()); 
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_18);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_1_1());
                    }
                    }
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_2);
            DefaultFormalParameterParserRuleCall_2=ruleDefaultFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefaultFormalParameterParserRuleCall_2!=null?((Token)DefaultFormalParameterParserRuleCall_2.start):null), (DefaultFormalParameterParserRuleCall_2!=null?((Token)DefaultFormalParameterParserRuleCall_2.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getDefaultFormalParameterParserRuleCall_2()); 
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleDefaultFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultFormalParameter_return ruleDefaultFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleDefaultFormalParameter_return retval = new InternalN4JSParser.ruleDefaultFormalParameter_return();
        retval.start = input.LT(1);
        Token HasInitializerAssignmentEqualsSignKeyword_0_0=null;
        InternalN4JSParser.ruleTypeReferenceName_return AstInitializerTypeReferenceNameParserRuleCall_1_0 = null;
        try {
            {
            int alt617=2;
            int LA617_0 = input.LA(1);
            if ( (LA617_0==EqualsSign) ) {
                alt617=1;
            }
            switch (alt617) {
                case 1 :
                    {
                    {
                    {
                    HasInitializerAssignmentEqualsSignKeyword_0_0=(Token)match(input,EqualsSign,FOLLOW_200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(HasInitializerAssignmentEqualsSignKeyword_0_0, grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());
                    }
                    }
                    }
                    int alt616=2;
                    int LA616_0 = input.LA(1);
                    if ( (LA616_0==Promisify||LA616_0==Default||LA616_0==Target||LA616_0==Await||LA616_0==This||LA616_0==Void||LA616_0==RULE_IDENTIFIER) ) {
                        alt616=1;
                    }
                    switch (alt616) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            AstInitializerTypeReferenceNameParserRuleCall_1_0=ruleTypeReferenceName();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                              				announce((AstInitializerTypeReferenceNameParserRuleCall_1_0!=null?((Token)AstInitializerTypeReferenceNameParserRuleCall_1_0.start):null), (AstInitializerTypeReferenceNameParserRuleCall_1_0!=null?((Token)AstInitializerTypeReferenceNameParserRuleCall_1_0.stop):null), grammarAccess.getDefaultFormalParameterAccess().getAstInitializerAssignment_1());
                            }
                            }
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);
        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_4_1_0 = null;
        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefParserRuleCall_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.start):null), (TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
            }
            }
            }
            loop618:
            do {
                int alt618=2;
                int LA618_0 = input.LA(1);
                if ( (LA618_0==Comma) ) {
                    alt618=1;
                }
                switch (alt618) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_19); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefParserRuleCall_4_1_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop618;
                }
            } while (true);
            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);
        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_3_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefsTypeRefParserRuleCall_4_1_0 = null;
        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefParserRuleCall_3_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.start):null), (TypeRefsTypeRefParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
            }
            }
            }
            loop619:
            do {
                int alt619=2;
                int LA619_0 = input.LA(1);
                if ( (LA619_0==Comma) ) {
                    alt619=1;
                }
                switch (alt619) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_19); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefParserRuleCall_4_1_0=ruleTypeRef();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop619;
                }
            } while (true);
            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRef_return retval = new InternalN4JSParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;
        InternalN4JSParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;
        try {
            {
            int alt620=2;
            int LA620_0 = input.LA(1);
            if ( (LA620_0==Promisify||LA620_0==Default||LA620_0==Target||LA620_0==Await||LA620_0==This||LA620_0==Void||LA620_0==RULE_IDENTIFIER) ) {
                alt620=1;
            }
            else if ( (LA620_0==Tilde) ) {
                alt620=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 620, 0, input);
                throw nvae;
            }
            switch (alt620) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_1_1 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_0_1_2 = null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;
        try {
            {
            {
            int alt621=2;
            alt621 = dfa621.predict(input);
            switch (alt621) {
                case 1 :
                    {
                    pushFollow(FOLLOW_201);
                    TypeReferenceParserRuleCall_0_0=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_0!=null?((Token)TypeReferenceParserRuleCall_0_0.start):null), (TypeReferenceParserRuleCall_0_0!=null?((Token)TypeReferenceParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_100);
                    TypeReferenceParserRuleCall_0_1_1=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_1_1!=null?((Token)TypeReferenceParserRuleCall_0_1_1.start):null), (TypeReferenceParserRuleCall_0_1_1!=null?((Token)TypeReferenceParserRuleCall_0_1_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeReferenceParserRuleCall_0_1_1()); 
                    }
                    pushFollow(FOLLOW_201);
                    VersionRequestParserRuleCall_0_1_2=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_0_1_2!=null?((Token)VersionRequestParserRuleCall_0_1_2.start):null), (VersionRequestParserRuleCall_0_1_2!=null?((Token)VersionRequestParserRuleCall_0_1_2.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getVersionRequestParserRuleCall_0_1_2()); 
                    }
                    }
                    }
                    break;
            }
            int alt622=2;
            alt622 = dfa622.predict(input);
            switch (alt622) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);
        Token WithKeyword_2_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0 = null;
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0 = null;
        InternalN4JSParser.ruleTypeReference_return TypeReferenceParserRuleCall_0_1_2 = null;
        InternalN4JSParser.ruleVersionRequest_return VersionRequestParserRuleCall_0_1_3 = null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;
        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;
        try {
            {
            {
            int alt623=2;
            alt623 = dfa623.predict(input);
            switch (alt623) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_159);
                    DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0=ruleTypingStrategyUseSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0_0_0());
                    }
                    }
                    }
                    pushFollow(FOLLOW_202);
                    TypeReferenceParserRuleCall_0_0_1=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_0_1!=null?((Token)TypeReferenceParserRuleCall_0_0_1.start):null), (TypeReferenceParserRuleCall_0_0_1!=null?((Token)TypeReferenceParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_0_1()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_159);
                    DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0=ruleTypingStrategyUseSiteOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0_1_1());
                    }
                    }
                    }
                    pushFollow(FOLLOW_100);
                    TypeReferenceParserRuleCall_0_1_2=ruleTypeReference();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeReferenceParserRuleCall_0_1_2!=null?((Token)TypeReferenceParserRuleCall_0_1_2.start):null), (TypeReferenceParserRuleCall_0_1_2!=null?((Token)TypeReferenceParserRuleCall_0_1_2.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeReferenceParserRuleCall_0_1_2()); 
                    }
                    pushFollow(FOLLOW_202);
                    VersionRequestParserRuleCall_0_1_3=ruleVersionRequest();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VersionRequestParserRuleCall_0_1_3!=null?((Token)VersionRequestParserRuleCall_0_1_3.start):null), (VersionRequestParserRuleCall_0_1_3!=null?((Token)VersionRequestParserRuleCall_0_1_3.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getVersionRequestParserRuleCall_0_1_3()); 
                    }
                    }
                    }
                    break;
            }
            int alt624=2;
            alt624 = dfa624.predict(input);
            switch (alt624) {
                case 1 :
                    {
                    pushFollow(FOLLOW_191);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgumentsParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            int alt625=2;
            int LA625_0 = input.LA(1);
            if ( (LA625_0==With) ) {
                int LA625_1 = input.LA(2);
                if ( (LA625_1==LeftCurlyBracket) ) {
                    alt625=1;
                }
            }
            switch (alt625) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(WithKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_2_0());
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIterableTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterableTypeExpression();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIterableTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIterableTypeExpression_return ruleIterableTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleIterableTypeExpression_return retval = new InternalN4JSParser.ruleIterableTypeExpression_return();
        retval.start = input.LT(1);
        Token IterableTypeExpressionLeftSquareBracketKeyword_0_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightSquareBracketKeyword_1_1_2=null;
        InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0 = null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0_0 = null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            IterableTypeExpressionLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(IterableTypeExpressionLeftSquareBracketKeyword_0_0, grammarAccess.getIterableTypeExpressionAccess().getIterableTypeExpressionLeftSquareBracketKeyword_0_0());
            }
            }
            }
            int alt627=2;
            int LA627_0 = input.LA(1);
            if ( (LA627_0==RightSquareBracket) ) {
                alt627=1;
            }
            else if ( ((LA627_0>=Intersection && LA627_0<=Constructor)||LA627_0==Promisify||LA627_0==Default||LA627_0==Target||LA627_0==Await||LA627_0==Union||LA627_0==This||LA627_0==This_1||(LA627_0>=Type && LA627_0<=Void)||LA627_0==Out||LA627_0==In||LA627_0==LeftParenthesis||LA627_0==QuestionMark||LA627_0==LeftSquareBracket||LA627_0==LeftCurlyBracket||LA627_0==Tilde||LA627_0==RULE_IDENTIFIER) ) {
                alt627=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 627, 0, input);
                throw nvae;
            }
            switch (alt627) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0=ruleEmptyIterableTypeExpressionTail();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0!=null?((Token)TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0.start):null), (TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0!=null?((Token)TypeArgsEmptyIterableTypeExpressionTailParserRuleCall_1_0_0.stop):null), grammarAccess.getIterableTypeExpressionAccess().getTypeArgsAssignment_1_0());
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_102);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0_0=ruleTypeArgument();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((TypeArgsTypeArgumentParserRuleCall_1_1_0_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getIterableTypeExpressionAccess().getTypeArgsAssignment_1_1_0());
                    }
                    }
                    }
                    loop626:
                    do {
                        int alt626=2;
                        int LA626_0 = input.LA(1);
                        if ( (LA626_0==Comma) ) {
                            alt626=1;
                        }
                        switch (alt626) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_203); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getIterableTypeExpressionAccess().getCommaKeyword_1_1_1_0());
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_102);
                    	    TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0=ruleTypeArgument();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	      							announce((TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getIterableTypeExpressionAccess().getTypeArgsAssignment_1_1_1_1());
                    	    }
                    	    }
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop626;
                        }
                    } while (true);
                    RightSquareBracketKeyword_1_1_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(RightSquareBracketKeyword_1_1_2, grammarAccess.getIterableTypeExpressionAccess().getRightSquareBracketKeyword_1_1_2());
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyIterableTypeExpressionTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyIterableTypeExpressionTail();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleEmptyIterableTypeExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return ruleEmptyIterableTypeExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return retval = new InternalN4JSParser.ruleEmptyIterableTypeExpressionTail_return();
        retval.start = input.LT(1);
        Token RightSquareBracketKeyword_1=null;
        try {
            {
            {
            RightSquareBracketKeyword_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightSquareBracketKeyword_1, grammarAccess.getEmptyIterableTypeExpressionTailAccess().getRightSquareBracketKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleVersionRequest_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVersionRequest_return ruleVersionRequest() throws RecognitionException {
        InternalN4JSParser.ruleVersionRequest_return retval = new InternalN4JSParser.ruleVersionRequest_return();
        retval.start = input.LT(1);
        Token RequestedVersionVERSIONTerminalRuleCall_0=null;
        try {
            {
            {
            {
            RequestedVersionVERSIONTerminalRuleCall_0=(Token)match(input,RULE_VERSION,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              			announce(RequestedVersionVERSIONTerminalRuleCall_0, grammarAccess.getVersionRequestAccess().getRequestedVersionAssignment());
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSParser.ruleTypeArguments_return retval = new InternalN4JSParser.ruleTypeArguments_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_116);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1());
            }
            }
            }
            loop628:
            do {
                int alt628=2;
                int LA628_0 = input.LA(1);
                if ( (LA628_0==Comma) ) {
                    alt628=1;
                }
                switch (alt628) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_203); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop628;
                }
            } while (true);
            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSParser.ruleTStructMemberList_return retval = new InternalN4JSParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);
        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
            }
            loop630:
            do {
                int alt630=2;
                int LA630_0 = input.LA(1);
                if ( ((LA630_0>=Intersection && LA630_0<=With)||(LA630_0>=For && LA630_0<=Var)||(LA630_0>=As && LA630_0<=Of)||LA630_0==LessThanSign||LA630_0==RULE_IDENTIFIER) ) {
                    alt630=1;
                }
                switch (alt630) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_205);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0());
            	    }
            	    }
            	    }
            	    int alt629=3;
            	    int LA629_0 = input.LA(1);
            	    if ( (LA629_0==Semicolon) ) {
            	        alt629=1;
            	    }
            	    else if ( (LA629_0==Comma) ) {
            	        alt629=2;
            	    }
            	    switch (alt629) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_204); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_204); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	              				announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop630;
                }
            } while (true);
            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSParser.ruleTStructMember_return retval = new InternalN4JSParser.ruleTStructMember_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;
        InternalN4JSParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;
        InternalN4JSParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;
        InternalN4JSParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;
        try {
            {
            int alt631=4;
            alt631 = dfa631.predict(input);
            switch (alt631) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSParser.ruleTStructMethod_return retval = new InternalN4JSParser.ruleTStructMethod_return();
        retval.start = input.LT(1);
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;
        InternalN4JSParser.ruleColonSepReturnTypeRef_return ColonSepReturnTypeRefParserRuleCall_3 = null;
        try {
            {
            {
            {
            {
            int alt632=2;
            int LA632_0 = input.LA(1);
            if ( (LA632_0==LessThanSign) ) {
                alt632=1;
            }
            switch (alt632) {
                case 1 :
                    {
                    pushFollow(FOLLOW_14);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getTStructMethodAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }
                    }
                    break;
            }
            {
            {
            pushFollow(FOLLOW_46);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2());
            }
            }
            }
            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
            }
            }
            }
            pushFollow(FOLLOW_73);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
            }
            int alt633=2;
            int LA633_0 = input.LA(1);
            if ( (LA633_0==Colon) ) {
                alt633=1;
            }
            switch (alt633) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepReturnTypeRefParserRuleCall_3=ruleColonSepReturnTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepReturnTypeRefParserRuleCall_3!=null?((Token)ColonSepReturnTypeRefParserRuleCall_3.start):null), (ColonSepReturnTypeRefParserRuleCall_3!=null?((Token)ColonSepReturnTypeRefParserRuleCall_3.stop):null), grammarAccess.getTStructMethodAccess().getColonSepReturnTypeRefParserRuleCall_3()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariables_return retval = new InternalN4JSParser.ruleTypeVariables_return();
        retval.start = input.LT(1);
        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_116);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1());
            }
            }
            }
            loop634:
            do {
                int alt634=2;
                int LA634_0 = input.LA(1);
                if ( (LA634_0==Comma) ) {
                    alt634=1;
                }
                switch (alt634) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_196); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	      					announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1());
            	    }
            	    }
            	    }
            	    }
            	    break;
            	default :
            	    break loop634;
                }
            } while (true);
            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleColonSepDeclaredTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepDeclaredTypeRef_return ruleColonSepDeclaredTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepDeclaredTypeRef_return retval = new InternalN4JSParser.ruleColonSepDeclaredTypeRef_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_0, grammarAccess.getColonSepDeclaredTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepDeclaredTypeRefAccess().getDeclaredTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepTypeRef_return retval = new InternalN4JSParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_0 = null;
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeRefTypeRefParserRuleCall_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleColonSepDeclaredReturnTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return ruleColonSepDeclaredReturnTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return retval = new InternalN4JSParser.ruleColonSepDeclaredReturnTypeRef_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredReturnTypeRefTypeRefParserRuleCall_1_0 = null;
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_0, grammarAccess.getColonSepDeclaredReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredReturnTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((DeclaredReturnTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredReturnTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredReturnTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredReturnTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepDeclaredReturnTypeRefAccess().getDeclaredReturnTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class ruleColonSepReturnTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepReturnTypeRef_return ruleColonSepReturnTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepReturnTypeRef_return retval = new InternalN4JSParser.ruleColonSepReturnTypeRef_return();
        retval.start = input.LT(1);
        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_0 = null;
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(ColonKeyword_0, grammarAccess.getColonSepReturnTypeRefAccess().getColonKeyword_0());
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((ReturnTypeRefTypeRefParserRuleCall_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepReturnTypeRefAccess().getReturnTypeRefAssignment_1());
            }
            }
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSParser.ruleTStructField_return retval = new InternalN4JSParser.ruleTStructField_return();
        retval.start = input.LT(1);
        Token OptionalQuestionMarkKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;
        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_2 = null;
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_206);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0());
            }
            }
            }
            int alt635=2;
            int LA635_0 = input.LA(1);
            if ( (LA635_0==QuestionMark) ) {
                alt635=1;
            }
            switch (alt635) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructFieldAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            int alt636=2;
            int LA636_0 = input.LA(1);
            if ( (LA636_0==Colon) ) {
                alt636=1;
            }
            switch (alt636) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_2=ruleColonSepTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.start):null), (ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.stop):null), grammarAccess.getTStructFieldAccess().getColonSepTypeRefParserRuleCall_2()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructGetter_return retval = new InternalN4JSParser.ruleTStructGetter_return();
        retval.start = input.LT(1);
        Token GetKeyword_0_0_1=null;
        Token OptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_4 = null;
        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_110);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt637=2;
            int LA637_0 = input.LA(1);
            if ( (LA637_0==QuestionMark) ) {
                alt637=1;
            }
            switch (alt637) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructGetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_73); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_2());
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_3, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_3());
            }
            int alt638=2;
            int LA638_0 = input.LA(1);
            if ( (LA638_0==Colon) ) {
                alt638=1;
            }
            switch (alt638) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_4=ruleColonSepTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.start):null), (ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.stop):null), grammarAccess.getTStructGetterAccess().getColonSepTypeRefParserRuleCall_4()); 
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructSetter_return retval = new InternalN4JSParser.ruleTStructSetter_return();
        retval.start = input.LT(1);
        Token SetKeyword_0_0_1=null;
        Token OptionalQuestionMarkKeyword_1_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_3_0 = null;
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
            }
            {
            {
            pushFollow(FOLLOW_110);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2());
            }
            }
            }
            }
            }
            int alt639=2;
            int LA639_0 = input.LA(1);
            if ( (LA639_0==QuestionMark) ) {
                alt639=1;
            }
            switch (alt639) {
                case 1 :
                    {
                    {
                    OptionalQuestionMarkKeyword_1_0=(Token)match(input,QuestionMark,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(OptionalQuestionMarkKeyword_1_0, grammarAccess.getTStructSetterAccess().getOptionalQuestionMarkKeyword_1_0());
                    }
                    }
                    }
                    break;
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_199); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftParenthesisKeyword_2, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_73);
            FparTAnonymousFormalParameterParserRuleCall_3_0=ruleTAnonymousFormalParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((FparTAnonymousFormalParameterParserRuleCall_3_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_3_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_3_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_3_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_3());
            }
            }
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightParenthesisKeyword_4, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);
        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;
        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
            }
            int alt640=3;
            int LA640_0 = input.LA(1);
            if ( (LA640_0==Tilde) ) {
                alt640=1;
            }
            else if ( (LA640_0==RULE_STRUCTMODSUFFIX) ) {
                alt640=2;
            }
            switch (alt640) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);
        Token TildeKeyword=null;
        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              	announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);
        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;
        try {
            {
            {
            int alt641=2;
            int LA641_0 = input.LA(1);
            if ( (LA641_0==Type) ) {
                alt641=1;
            }
            else if ( (LA641_0==Constructor) ) {
                alt641=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 641, 0, input);
                throw nvae;
            }
            switch (alt641) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      			announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                    }
                    }
                    }
                    }
                    break;
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
            }
            {
            {
            pushFollow(FOLLOW_27);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3());
            }
            }
            }
            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgument_return retval = new InternalN4JSParser.ruleTypeArgument_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleWildcard_return WildcardParserRuleCall_0 = null;
        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_1 = null;
        try {
            {
            int alt642=2;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA642_1 = input.LA(2);
                if ( (LA642_1==EOF||LA642_1==Extends||LA642_1==Super||LA642_1==Comma||LA642_1==GreaterThanSign||LA642_1==RightSquareBracket) ) {
                    alt642=1;
                }
                else if ( (LA642_1==LeftSquareBracket) ) {
                    alt642=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 642, 1, input);
                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt642=1;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Default:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt642=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 642, 0, input);
                throw nvae;
            }
            switch (alt642) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_1=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_1!=null?((Token)TypeRefParserRuleCall_1.start):null), (TypeRefParserRuleCall_1!=null?((Token)TypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSParser.ruleWildcard_return retval = new InternalN4JSParser.ruleWildcard_return();
        retval.start = input.LT(1);
        InternalN4JSParser.ruleWildcardOldNotation_return WildcardOldNotationParserRuleCall_0 = null;
        InternalN4JSParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;
        try {
            {
            int alt643=2;
            int LA643_0 = input.LA(1);
            if ( (LA643_0==QuestionMark) && (synpred348_InternalN4JSParser())) {
                alt643=1;
            }
            else if ( (LA643_0==Out||LA643_0==In) ) {
                alt643=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 643, 0, input);
                throw nvae;
            }
            switch (alt643) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardOldNotationParserRuleCall_0=ruleWildcardOldNotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardOldNotationParserRuleCall_0!=null?((Token)WildcardOldNotationParserRuleCall_0.start):null), (WildcardOldNotationParserRuleCall_0!=null?((Token)WildcardOldNotationParserRuleCall_0.stop):null), grammarAccess.getWildcardAccess().getWildcardOldNotationParserRuleCall_0()); 
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getWildcardAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardOldNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardOldNotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcardOldNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardOldNotation_return ruleWildcardOldNotation() throws RecognitionException {
        InternalN4JSParser.ruleWildcardOldNotation_return retval = new InternalN4JSParser.ruleWildcardOldNotation_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;
        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              				announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardOldNotationAccess().getQuestionMarkKeyword_0_0_1());
            }
            }
            }
            int alt644=3;
            int LA644_0 = input.LA(1);
            if ( (LA644_0==Extends) ) {
                alt644=1;
            }
            else if ( (LA644_0==Super) ) {
                alt644=2;
            }
            switch (alt644) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardOldNotationAccess().getExtendsKeyword_1_0_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardOldNotationAccess().getDeclaredUpperBoundAssignment_1_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      				announce(SuperKeyword_1_1_0, grammarAccess.getWildcardOldNotationAccess().getSuperKeyword_1_1_0());
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      						announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardOldNotationAccess().getDeclaredLowerBoundAssignment_1_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardOldNotationWithoutBound() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardOldNotationWithoutBound();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcardOldNotationWithoutBound_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return ruleWildcardOldNotationWithoutBound() throws RecognitionException {
        InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return retval = new InternalN4JSParser.ruleWildcardOldNotationWithoutBound_return();
        retval.start = input.LT(1);
        Token QuestionMarkKeyword_1=null;
        try {
            {
            {
            QuestionMarkKeyword_1=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
              		announce(QuestionMarkKeyword_1, grammarAccess.getWildcardOldNotationWithoutBoundAccess().getQuestionMarkKeyword_1());
            }
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSParser.ruleWildcardNewNotation_return retval = new InternalN4JSParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);
        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;
        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;
        try {
            {
            int alt645=2;
            int LA645_0 = input.LA(1);
            if ( (LA645_0==Out) ) {
                alt645=1;
            }
            else if ( (LA645_0==In) ) {
                alt645=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 645, 0, input);
                throw nvae;
            }
            switch (alt645) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1());
                    }
                    }
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                    }
                    }
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      					announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1());
                    }
                    }
                    }
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifier_return retval = new InternalN4JSParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);
        Token YieldKeyword_1_0=null;
        try {
            {
            int alt646=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt646=1;
                }
                break;
            case Yield:
                {
                alt646=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt646=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 646, 0, input);
                throw nvae;
            }
            switch (alt646) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                      		announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifier_return retval = new InternalN4JSParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);
        try {
            {
            int alt647=2;
            int LA647_0 = input.LA(1);
            if ( (LA647_0==RULE_IDENTIFIER) ) {
                alt647=1;
            }
            else if ( ((LA647_0>=Intersection && LA647_0<=Implements)||(LA647_0>=Promisify && LA647_0<=Abstract)||LA647_0==External||(LA647_0>=Private && LA647_0<=Project)||LA647_0==Public||LA647_0==Static||LA647_0==Target||(LA647_0>=Async && LA647_0<=Await)||LA647_0==Union||LA647_0==This||LA647_0==From||LA647_0==Type||(LA647_0>=Get && LA647_0<=Let)||(LA647_0>=Out && LA647_0<=Set)||LA647_0==As||LA647_0==Of) ) {
                alt647=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 647, 0, input);
                throw nvae;
            }
            switch (alt647) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierName_return retval = new InternalN4JSParser.ruleIdentifierName_return();
        retval.start = input.LT(1);
        try {
            {
            int alt648=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt648=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt648=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt648=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 648, 0, input);
                throw nvae;
            }
            switch (alt648) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();
                    state._fsp--;
                    if (state.failed) return retval;
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;
        try {
            {
            int alt649=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt649=1;
                }
                break;
            case Case:
                {
                alt649=2;
                }
                break;
            case Catch:
                {
                alt649=3;
                }
                break;
            case Class:
                {
                alt649=4;
                }
                break;
            case Const:
                {
                alt649=5;
                }
                break;
            case Continue:
                {
                alt649=6;
                }
                break;
            case Debugger:
                {
                alt649=7;
                }
                break;
            case Default:
                {
                alt649=8;
                }
                break;
            case Delete:
                {
                alt649=9;
                }
                break;
            case Do:
                {
                alt649=10;
                }
                break;
            case Else:
                {
                alt649=11;
                }
                break;
            case Export:
                {
                alt649=12;
                }
                break;
            case Extends:
                {
                alt649=13;
                }
                break;
            case Finally:
                {
                alt649=14;
                }
                break;
            case For:
                {
                alt649=15;
                }
                break;
            case Function:
                {
                alt649=16;
                }
                break;
            case If:
                {
                alt649=17;
                }
                break;
            case Import:
                {
                alt649=18;
                }
                break;
            case In:
                {
                alt649=19;
                }
                break;
            case Instanceof:
                {
                alt649=20;
                }
                break;
            case New:
                {
                alt649=21;
                }
                break;
            case Return:
                {
                alt649=22;
                }
                break;
            case Super:
                {
                alt649=23;
                }
                break;
            case Switch:
                {
                alt649=24;
                }
                break;
            case This_1:
                {
                alt649=25;
                }
                break;
            case Throw:
                {
                alt649=26;
                }
                break;
            case Try:
                {
                alt649=27;
                }
                break;
            case Typeof:
                {
                alt649=28;
                }
                break;
            case Var:
                {
                alt649=29;
                }
                break;
            case Void:
                {
                alt649=30;
                }
                break;
            case While:
                {
                alt649=31;
                }
                break;
            case With:
                {
                alt649=32;
                }
                break;
            case Yield:
                {
                alt649=33;
                }
                break;
            case Null:
                {
                alt649=34;
                }
                break;
            case True:
                {
                alt649=35;
                }
                break;
            case False:
                {
                alt649=36;
                }
                break;
            case Enum:
                {
                alt649=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 649, 0, input);
                throw nvae;
            }
            switch (alt649) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                    }
                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                    }
                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                    }
                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                    }
                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                    }
                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                    }
                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                    }
                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                    }
                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                    }
                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                    }
                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                    }
                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                    }
                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();
            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;
        try {
            {
            int alt650=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt650=1;
                }
                break;
            case Set:
                {
                alt650=2;
                }
                break;
            case Let:
                {
                alt650=3;
                }
                break;
            case Project:
                {
                alt650=4;
                }
                break;
            case External:
                {
                alt650=5;
                }
                break;
            case Abstract:
                {
                alt650=6;
                }
                break;
            case Static:
                {
                alt650=7;
                }
                break;
            case As:
                {
                alt650=8;
                }
                break;
            case From:
                {
                alt650=9;
                }
                break;
            case Constructor:
                {
                alt650=10;
                }
                break;
            case Of:
                {
                alt650=11;
                }
                break;
            case Target:
                {
                alt650=12;
                }
                break;
            case Type:
                {
                alt650=13;
                }
                break;
            case Union:
                {
                alt650=14;
                }
                break;
            case Intersection:
                {
                alt650=15;
                }
                break;
            case This:
                {
                alt650=16;
                }
                break;
            case Promisify:
                {
                alt650=17;
                }
                break;
            case Await:
                {
                alt650=18;
                }
                break;
            case Async:
                {
                alt650=19;
                }
                break;
            case Implements:
                {
                alt650=20;
                }
                break;
            case Interface:
                {
                alt650=21;
                }
                break;
            case Private:
                {
                alt650=22;
                }
                break;
            case Protected:
                {
                alt650=23;
                }
                break;
            case Public:
                {
                alt650=24;
                }
                break;
            case Out:
                {
                alt650=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 650, 0, input);
                throw nvae;
            }
            switch (alt650) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                    }
                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                    }
                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                    }
                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                    }
                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                    }
                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                    }
                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                    }
                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                    }
                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                    }
                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                    }
                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                    }
                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                    }
                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                    }
                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                    }
                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                    }
                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                    }
                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                    }
                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                    }
                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                    }
                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                    }
                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                    }
                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                    }
                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                    }
                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                    }
                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      		announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;
        try {
            {
            int alt651=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt651=1;
                }
                break;
            case Const:
                {
                alt651=2;
                }
                break;
            case Let:
                {
                alt651=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 651, 0, input);
                throw nvae;
            }
            switch (alt651) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;
        try {
            {
            int alt652=2;
            int LA652_0 = input.LA(1);
            if ( (LA652_0==PlusSignPlusSign) ) {
                alt652=1;
            }
            else if ( (LA652_0==HyphenMinusHyphenMinus) ) {
                alt652=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 652, 0, input);
                throw nvae;
            }
            switch (alt652) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;
        try {
            {
            int alt653=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt653=1;
                }
                break;
            case Void:
                {
                alt653=2;
                }
                break;
            case Typeof:
                {
                alt653=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt653=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt653=5;
                }
                break;
            case PlusSign:
                {
                alt653=6;
                }
                break;
            case HyphenMinus:
                {
                alt653=7;
                }
                break;
            case Tilde:
                {
                alt653=8;
                }
                break;
            case ExclamationMark:
                {
                alt653=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 653, 0, input);
                throw nvae;
            }
            switch (alt653) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;
        try {
            {
            int alt654=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt654=1;
                }
                break;
            case Solidus:
                {
                alt654=2;
                }
                break;
            case PercentSign:
                {
                alt654=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 654, 0, input);
                throw nvae;
            }
            switch (alt654) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;
        try {
            {
            int alt655=2;
            int LA655_0 = input.LA(1);
            if ( (LA655_0==PlusSign) ) {
                alt655=1;
            }
            else if ( (LA655_0==HyphenMinus) ) {
                alt655=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 655, 0, input);
                throw nvae;
            }
            switch (alt655) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;
        try {
            {
            int alt656=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt656=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt656=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt656=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt656=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 656, 0, input);
                throw nvae;
            }
            switch (alt656) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;
        try {
            {
            int alt657=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt657=1;
                }
                break;
            case Project:
                {
                alt657=2;
                }
                break;
            case Protected:
                {
                alt657=3;
                }
                break;
            case Public:
                {
                alt657=4;
                }
                break;
            case External:
                {
                alt657=5;
                }
                break;
            case Abstract:
                {
                alt657=6;
                }
                break;
            case Static:
                {
                alt657=7;
                }
                break;
            case Const:
                {
                alt657=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 657, 0, input);
                throw nvae;
            }
            switch (alt657) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4ModifierWithoutConst() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        try {
            {
            int alt658=7;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt658=1;
                }
                break;
            case Project:
                {
                alt658=2;
                }
                break;
            case Protected:
                {
                alt658=3;
                }
                break;
            case Public:
                {
                alt658=4;
                }
                break;
            case External:
                {
                alt658=5;
                }
                break;
            case Abstract:
                {
                alt658=6;
                }
                break;
            case Static:
                {
                alt658=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 658, 0, input);
                throw nvae;
            }
            switch (alt658) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierWithoutConstAccess().getPrivateEnumLiteralDeclaration_0());
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierWithoutConstAccess().getProjectEnumLiteralDeclaration_1());
                    }
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierWithoutConstAccess().getProtectedEnumLiteralDeclaration_2());
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierWithoutConstAccess().getPublicEnumLiteralDeclaration_3());
                    }
                    }
                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierWithoutConstAccess().getExternalEnumLiteralDeclaration_4());
                    }
                    }
                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierWithoutConstAccess().getAbstractEnumLiteralDeclaration_5());
                    }
                    }
                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                      			announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierWithoutConstAccess().getStaticEnumLiteralDeclaration_6());
                    }
                    }
                    }
                    break;
            }
            }
        }
            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_155); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop659:
        do {
            int alt659=2;
            int LA659_0 = input.LA(1);
            if ( ((LA659_0>=Protected && LA659_0<=Abstract)||LA659_0==External||(LA659_0>=Private && LA659_0<=Project)||LA659_0==Public||LA659_0==Static||LA659_0==Const) ) {
                alt659=1;
            }
            switch (alt659) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop659;
            }
        } while (true);
        match(input,Class,FOLLOW_210); if (state.failed) return ;
        int alt660=2;
        int LA660_0 = input.LA(1);
        if ( (LA660_0==Tilde) ) {
            alt660=1;
        }
        switch (alt660) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt661=2;
        int LA661_0 = input.LA(1);
        if ( ((LA661_0>=Intersection && LA661_0<=Implements)||(LA661_0>=Promisify && LA661_0<=Abstract)||LA661_0==External||(LA661_0>=Private && LA661_0<=Project)||LA661_0==Public||LA661_0==Static||LA661_0==Target||(LA661_0>=Async && LA661_0<=Await)||LA661_0==Union||(LA661_0>=Yield && LA661_0<=This)||LA661_0==From||LA661_0==Type||(LA661_0>=Get && LA661_0<=Let)||(LA661_0>=Out && LA661_0<=Set)||LA661_0==As||LA661_0==Of||LA661_0==RULE_IDENTIFIER) ) {
            alt661=1;
        }
        switch (alt661) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt662=2;
        int LA662_0 = input.LA(1);
        if ( (LA662_0==RULE_VERSION) ) {
            alt662=1;
        }
        switch (alt662) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop663:
        do {
            int alt663=2;
            int LA663_0 = input.LA(1);
            if ( ((LA663_0>=Protected && LA663_0<=Abstract)||LA663_0==External||(LA663_0>=Private && LA663_0<=Project)||LA663_0==Public||LA663_0==Static||LA663_0==Const) ) {
                alt663=1;
            }
            switch (alt663) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop663;
            }
        } while (true);
        match(input,Interface,FOLLOW_210); if (state.failed) return ;
        int alt664=2;
        int LA664_0 = input.LA(1);
        if ( (LA664_0==Tilde) ) {
            alt664=1;
        }
        switch (alt664) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt665=2;
        int LA665_0 = input.LA(1);
        if ( ((LA665_0>=Intersection && LA665_0<=Implements)||(LA665_0>=Promisify && LA665_0<=Abstract)||LA665_0==External||(LA665_0>=Private && LA665_0<=Project)||LA665_0==Public||LA665_0==Static||LA665_0==Target||(LA665_0>=Async && LA665_0<=Await)||LA665_0==Union||(LA665_0>=Yield && LA665_0<=This)||LA665_0==From||LA665_0==Type||(LA665_0>=Get && LA665_0<=Let)||(LA665_0>=Out && LA665_0<=Set)||LA665_0==As||LA665_0==Of||LA665_0==RULE_IDENTIFIER) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt666=2;
        int LA666_0 = input.LA(1);
        if ( (LA666_0==RULE_VERSION) ) {
            alt666=1;
        }
        switch (alt666) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop667:
        do {
            int alt667=2;
            int LA667_0 = input.LA(1);
            if ( ((LA667_0>=Protected && LA667_0<=Abstract)||LA667_0==External||(LA667_0>=Private && LA667_0<=Project)||LA667_0==Public||LA667_0==Static||LA667_0==Const) ) {
                alt667=1;
            }
            switch (alt667) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop667;
            }
        } while (true);
        match(input,Enum,FOLLOW_211); if (state.failed) return ;
        int alt668=2;
        int LA668_0 = input.LA(1);
        if ( ((LA668_0>=Intersection && LA668_0<=Implements)||(LA668_0>=Promisify && LA668_0<=Abstract)||LA668_0==External||(LA668_0>=Private && LA668_0<=Project)||LA668_0==Public||LA668_0==Static||LA668_0==Target||(LA668_0>=Async && LA668_0<=Await)||LA668_0==Union||(LA668_0>=Yield && LA668_0<=This)||LA668_0==From||LA668_0==Type||(LA668_0>=Get && LA668_0<=Let)||(LA668_0>=Out && LA668_0<=Set)||LA668_0==As||LA668_0==Of||LA668_0==RULE_IDENTIFIER) ) {
            alt668=1;
        }
        switch (alt668) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt669=2;
        int LA669_0 = input.LA(1);
        if ( (LA669_0==RULE_VERSION) ) {
            alt669=1;
        }
        switch (alt669) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred5_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop670:
        do {
            int alt670=2;
            int LA670_0 = input.LA(1);
            if ( ((LA670_0>=Protected && LA670_0<=Abstract)||LA670_0==External||(LA670_0>=Private && LA670_0<=Project)||LA670_0==Public||LA670_0==Static) ) {
                alt670=1;
            }
            switch (alt670) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_16);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop670;
            }
        } while (true);
        match(input,Type,FOLLOW_213); if (state.failed) return ;
        int alt671=2;
        int LA671_0 = input.LA(1);
        if ( ((LA671_0>=Intersection && LA671_0<=Implements)||(LA671_0>=Promisify && LA671_0<=Abstract)||LA671_0==External||(LA671_0>=Private && LA671_0<=Project)||LA671_0==Public||LA671_0==Static||LA671_0==Target||(LA671_0>=Async && LA671_0<=Await)||LA671_0==Union||(LA671_0>=Yield && LA671_0<=This)||LA671_0==From||LA671_0==Type||(LA671_0>=Get && LA671_0<=Let)||(LA671_0>=Out && LA671_0<=Set)||LA671_0==As||LA671_0==Of||LA671_0==RULE_IDENTIFIER) ) {
            alt671=1;
        }
        switch (alt671) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred6_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleImportDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop672:
        do {
            int alt672=2;
            int LA672_0 = input.LA(1);
            if ( ((LA672_0>=Protected && LA672_0<=Abstract)||LA672_0==External||(LA672_0>=Private && LA672_0<=Project)||LA672_0==Public||LA672_0==Static||LA672_0==Const) ) {
                alt672=1;
            }
            switch (alt672) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop672;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Type||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_155); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop673:
        do {
            int alt673=2;
            int LA673_0 = input.LA(1);
            if ( ((LA673_0>=Protected && LA673_0<=Abstract)||LA673_0==External||(LA673_0>=Private && LA673_0<=Project)||LA673_0==Public||LA673_0==Static||LA673_0==Const) ) {
                alt673=1;
            }
            switch (alt673) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop673;
            }
        } while (true);
        match(input,Class,FOLLOW_210); if (state.failed) return ;
        int alt674=2;
        int LA674_0 = input.LA(1);
        if ( (LA674_0==Tilde) ) {
            alt674=1;
        }
        switch (alt674) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt675=2;
        int LA675_0 = input.LA(1);
        if ( ((LA675_0>=Intersection && LA675_0<=Implements)||(LA675_0>=Promisify && LA675_0<=Abstract)||LA675_0==External||(LA675_0>=Private && LA675_0<=Project)||LA675_0==Public||LA675_0==Static||LA675_0==Target||(LA675_0>=Async && LA675_0<=Await)||LA675_0==Union||(LA675_0>=Yield && LA675_0<=This)||LA675_0==From||LA675_0==Type||(LA675_0>=Get && LA675_0<=Let)||(LA675_0>=Out && LA675_0<=Set)||LA675_0==As||LA675_0==Of||LA675_0==RULE_IDENTIFIER) ) {
            alt675=1;
        }
        switch (alt675) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt676=2;
        int LA676_0 = input.LA(1);
        if ( (LA676_0==RULE_VERSION) ) {
            alt676=1;
        }
        switch (alt676) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred14_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop677:
        do {
            int alt677=2;
            int LA677_0 = input.LA(1);
            if ( ((LA677_0>=Protected && LA677_0<=Abstract)||LA677_0==External||(LA677_0>=Private && LA677_0<=Project)||LA677_0==Public||LA677_0==Static||LA677_0==Const) ) {
                alt677=1;
            }
            switch (alt677) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_10);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop677;
            }
        } while (true);
        match(input,Interface,FOLLOW_210); if (state.failed) return ;
        int alt678=2;
        int LA678_0 = input.LA(1);
        if ( (LA678_0==Tilde) ) {
            alt678=1;
        }
        switch (alt678) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_211);
                ruleTypingStrategyDefSiteOperator();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt679=2;
        int LA679_0 = input.LA(1);
        if ( ((LA679_0>=Intersection && LA679_0<=Implements)||(LA679_0>=Promisify && LA679_0<=Abstract)||LA679_0==External||(LA679_0>=Private && LA679_0<=Project)||LA679_0==Public||LA679_0==Static||LA679_0==Target||(LA679_0>=Async && LA679_0<=Await)||LA679_0==Union||(LA679_0>=Yield && LA679_0<=This)||LA679_0==From||LA679_0==Type||(LA679_0>=Get && LA679_0<=Let)||(LA679_0>=Out && LA679_0<=Set)||LA679_0==As||LA679_0==Of||LA679_0==RULE_IDENTIFIER) ) {
            alt679=1;
        }
        switch (alt679) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt680=2;
        int LA680_0 = input.LA(1);
        if ( (LA680_0==RULE_VERSION) ) {
            alt680=1;
        }
        switch (alt680) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred15_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop681:
        do {
            int alt681=2;
            int LA681_0 = input.LA(1);
            if ( ((LA681_0>=Protected && LA681_0<=Abstract)||LA681_0==External||(LA681_0>=Private && LA681_0<=Project)||LA681_0==Public||LA681_0==Static||LA681_0==Const) ) {
                alt681=1;
            }
            switch (alt681) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop681;
            }
        } while (true);
        match(input,Enum,FOLLOW_211); if (state.failed) return ;
        int alt682=2;
        int LA682_0 = input.LA(1);
        if ( ((LA682_0>=Intersection && LA682_0<=Implements)||(LA682_0>=Promisify && LA682_0<=Abstract)||LA682_0==External||(LA682_0>=Private && LA682_0<=Project)||LA682_0==Public||LA682_0==Static||LA682_0==Target||(LA682_0>=Async && LA682_0<=Await)||LA682_0==Union||(LA682_0>=Yield && LA682_0<=This)||LA682_0==From||LA682_0==Type||(LA682_0>=Get && LA682_0<=Let)||(LA682_0>=Out && LA682_0<=Set)||LA682_0==As||LA682_0==Of||LA682_0==RULE_IDENTIFIER) ) {
            alt682=1;
        }
        switch (alt682) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_212);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt683=2;
        int LA683_0 = input.LA(1);
        if ( (LA683_0==RULE_VERSION) ) {
            alt683=1;
        }
        switch (alt683) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleVersionDeclaration();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred16_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop684:
        do {
            int alt684=2;
            int LA684_0 = input.LA(1);
            if ( ((LA684_0>=Protected && LA684_0<=Abstract)||LA684_0==External||(LA684_0>=Private && LA684_0<=Project)||LA684_0==Public||LA684_0==Static) ) {
                alt684=1;
            }
            switch (alt684) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_16);
        	    ruleN4ModifierWithoutConst();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop684;
            }
        } while (true);
        match(input,Type,FOLLOW_213); if (state.failed) return ;
        int alt685=2;
        int LA685_0 = input.LA(1);
        if ( ((LA685_0>=Intersection && LA685_0<=Implements)||(LA685_0>=Promisify && LA685_0<=Abstract)||LA685_0==External||(LA685_0>=Private && LA685_0<=Project)||LA685_0==Public||LA685_0==Static||LA685_0==Target||(LA685_0>=Async && LA685_0<=Await)||LA685_0==Union||(LA685_0>=Yield && LA685_0<=This)||LA685_0==From||LA685_0==Type||(LA685_0>=Get && LA685_0<=Let)||(LA685_0>=Out && LA685_0<=Set)||LA685_0==As||LA685_0==Of||LA685_0==RULE_IDENTIFIER) ) {
            alt685=1;
        }
        switch (alt685) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred17_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop686:
        do {
            int alt686=2;
            int LA686_0 = input.LA(1);
            if ( ((LA686_0>=Protected && LA686_0<=Abstract)||LA686_0==External||(LA686_0>=Private && LA686_0<=Project)||LA686_0==Public||LA686_0==Static||LA686_0==Const) ) {
                alt686=1;
            }
            switch (alt686) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop686;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred21_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred27_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred28_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred29_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred30_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred39_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred41_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred45_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred47_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred51_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred53_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred59_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred60_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred61_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred64_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop701:
        do {
            int alt701=2;
            int LA701_0 = input.LA(1);
            if ( ((LA701_0>=Protected && LA701_0<=Abstract)||LA701_0==External||(LA701_0>=Private && LA701_0<=Project)||LA701_0==Public||LA701_0==Static||LA701_0==Const) ) {
                alt701=1;
            }
            switch (alt701) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop701;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_96);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop702:
        do {
            int alt702=2;
            int LA702_0 = input.LA(1);
            if ( ((LA702_0>=Protected && LA702_0<=Abstract)||LA702_0==External||(LA702_0>=Private && LA702_0<=Project)||LA702_0==Public||LA702_0==Static||LA702_0==Const) ) {
                alt702=1;
            }
            switch (alt702) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_5);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop702;
            }
        } while (true);
        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred71_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_96);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred72_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_155); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred73_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_155); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred76_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred77_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred78_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred79_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred80_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred81_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred90_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt703=2;
        int LA703_0 = input.LA(1);
        if ( (LA703_0==Colon) ) {
            alt703=1;
        }
        switch (alt703) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt704=2;
        int LA704_0 = input.LA(1);
        if ( (LA704_0==Colon) ) {
            alt704=1;
        }
        switch (alt704) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt705=2;
        int LA705_0 = input.LA(1);
        if ( (LA705_0==Colon) ) {
            alt705=1;
        }
        switch (alt705) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_47);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt706=2;
        int LA706_0 = input.LA(1);
        if ( (LA706_0==Colon) ) {
            alt706=1;
        }
        switch (alt706) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepDeclaredTypeRef();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        }
        }
    }
    public final void synpred98_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred99_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred103_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred104_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred105_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred106_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_53); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_73);
        norm1_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred107_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred108_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        ruleBindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt707=2;
        int LA707_0 = input.LA(1);
        if ( (LA707_0==In) ) {
            alt707=1;
        }
        else if ( (LA707_0==Of) ) {
            alt707=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 707, 0, input);
            throw nvae;
        }
        switch (alt707) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_69); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_69); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt708=2;
        int LA708_0 = input.LA(1);
        if ( ((LA708_0>=Intersection && LA708_0<=Implements)||(LA708_0>=Promisify && LA708_0<=Abstract)||(LA708_0>=External && LA708_0<=Function)||(LA708_0>=Private && LA708_0<=Delete)||(LA708_0>=Import && LA708_0<=Public)||LA708_0==Static||(LA708_0>=Target && LA708_0<=Await)||LA708_0==Class||(LA708_0>=False && LA708_0<=Super)||LA708_0==Union||(LA708_0>=Yield && LA708_0<=This)||(LA708_0>=From && LA708_0<=Void)||(LA708_0>=Get && LA708_0<=Set)||LA708_0==PlusSignPlusSign||(LA708_0>=HyphenMinusHyphenMinus && LA708_0<=SolidusEqualsSign)||LA708_0==As||LA708_0==Of||LA708_0==ExclamationMark||LA708_0==LeftParenthesis||LA708_0==PlusSign||LA708_0==HyphenMinus||LA708_0==Solidus||LA708_0==LessThanSign||(LA708_0>=CommercialAt && LA708_0<=LeftSquareBracket)||LA708_0==LeftCurlyBracket||LA708_0==Tilde||LA708_0==RULE_DOUBLE||(LA708_0>=RULE_HEX_INT && LA708_0<=RULE_LEGACY_OCTAL_INT)||LA708_0==RULE_SCIENTIFIC_INT||LA708_0==RULE_IDENTIFIER||LA708_0==RULE_STRING||(LA708_0>=RULE_TEMPLATE_HEAD && LA708_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA708_0==RULE_INT) ) {
            alt708=1;
        }
        switch (alt708) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_80);
        ruleLetIdentifierRef();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        {
        {
        match(input,In,FOLLOW_71); if (state.failed) return ;
        }
        }
        {
        {
        pushFollow(FOLLOW_73);
        norm3_Expression();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred111_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred112_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_81);
        norm2_BindingIdentifierAsVariableDeclaration();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt709=2;
        int LA709_0 = input.LA(1);
        if ( (LA709_0==In) ) {
            alt709=1;
        }
        else if ( (LA709_0==Of) ) {
            alt709=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 709, 0, input);
            throw nvae;
        }
        switch (alt709) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_69); if (state.failed) return ;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_69); if (state.failed) return ;
                }
                }
                }
                break;
        }
        int alt710=2;
        int LA710_0 = input.LA(1);
        if ( ((LA710_0>=Intersection && LA710_0<=Implements)||(LA710_0>=Promisify && LA710_0<=Abstract)||(LA710_0>=External && LA710_0<=Function)||(LA710_0>=Private && LA710_0<=Delete)||(LA710_0>=Import && LA710_0<=Public)||LA710_0==Static||(LA710_0>=Target && LA710_0<=Await)||LA710_0==Class||(LA710_0>=False && LA710_0<=Super)||LA710_0==Union||(LA710_0>=Yield && LA710_0<=This)||(LA710_0>=From && LA710_0<=Void)||(LA710_0>=Get && LA710_0<=Set)||LA710_0==PlusSignPlusSign||(LA710_0>=HyphenMinusHyphenMinus && LA710_0<=SolidusEqualsSign)||LA710_0==As||LA710_0==Of||LA710_0==ExclamationMark||LA710_0==LeftParenthesis||LA710_0==PlusSign||LA710_0==HyphenMinus||LA710_0==Solidus||LA710_0==LessThanSign||(LA710_0>=CommercialAt && LA710_0<=LeftSquareBracket)||LA710_0==LeftCurlyBracket||LA710_0==Tilde||LA710_0==RULE_DOUBLE||(LA710_0>=RULE_HEX_INT && LA710_0<=RULE_LEGACY_OCTAL_INT)||LA710_0==RULE_SCIENTIFIC_INT||LA710_0==RULE_IDENTIFIER||LA710_0==RULE_STRING||(LA710_0>=RULE_TEMPLATE_HEAD && LA710_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA710_0==RULE_INT) ) {
            alt710=1;
        }
        switch (alt710) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred113_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred120_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_96);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred123_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred124_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_96);
        norm1_BindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_49);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred129_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_48); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_49);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt711=2;
        alt711 = dfa711.predict(input);
        switch (alt711) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_114);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt712=2;
        int LA712_0 = input.LA(1);
        if ( (LA712_0==QuestionMark) ) {
            alt712=1;
        }
        switch (alt712) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_96); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred131_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred132_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt713=2;
        int LA713_0 = input.LA(1);
        if ( (LA713_0==LessThanSign) ) {
            alt713=1;
        }
        switch (alt713) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt714=2;
        alt714 = dfa714.predict(input);
        switch (alt714) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_111);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_111);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        int alt715=2;
        int LA715_0 = input.LA(1);
        if ( (LA715_0==Asterisk) ) {
            alt715=1;
        }
        else if ( ((LA715_0>=Intersection && LA715_0<=With)||(LA715_0>=For && LA715_0<=Var)||(LA715_0>=As && LA715_0<=Of)||LA715_0==LeftSquareBracket||LA715_0==RULE_DOUBLE||(LA715_0>=RULE_HEX_INT && LA715_0<=RULE_OCTAL_INT)||LA715_0==RULE_SCIENTIFIC_INT||LA715_0==RULE_IDENTIFIER||LA715_0==RULE_STRING||LA715_0==RULE_INT) ) {
            alt715=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 715, 0, input);
            throw nvae;
        }
        switch (alt715) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred134_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt716=2;
        alt716 = dfa716.predict(input);
        switch (alt716) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_114);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        int alt717=2;
        int LA717_0 = input.LA(1);
        if ( (LA717_0==QuestionMark) ) {
            alt717=1;
        }
        switch (alt717) {
            case 1 :
                {
                {
                match(input,QuestionMark,FOLLOW_96); if (state.failed) return ;
                }
                }
                break;
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred135_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt718=2;
        int LA718_0 = input.LA(1);
        if ( (LA718_0==LessThanSign) ) {
            alt718=1;
        }
        switch (alt718) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt719=2;
        alt719 = dfa719.predict(input);
        switch (alt719) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_111);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        pushFollow(FOLLOW_111);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        int alt720=2;
        int LA720_0 = input.LA(1);
        if ( (LA720_0==Asterisk) ) {
            alt720=1;
        }
        else if ( ((LA720_0>=Intersection && LA720_0<=With)||(LA720_0>=For && LA720_0<=Var)||(LA720_0>=As && LA720_0<=Of)||LA720_0==LeftSquareBracket||LA720_0==RULE_DOUBLE||(LA720_0>=RULE_HEX_INT && LA720_0<=RULE_OCTAL_INT)||LA720_0==RULE_SCIENTIFIC_INT||LA720_0==RULE_IDENTIFIER||LA720_0==RULE_STRING||LA720_0==RULE_INT) ) {
            alt720=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 720, 0, input);
            throw nvae;
        }
        switch (alt720) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred138_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt721=2;
        alt721 = dfa721.predict(input);
        switch (alt721) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_96);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred141_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred144_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt722=2;
        int LA722_0 = input.LA(1);
        if ( (LA722_0==LessThanSign) ) {
            alt722=1;
        }
        switch (alt722) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt723=2;
        alt723 = dfa723.predict(input);
        switch (alt723) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_111);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt724=2;
        int LA724_0 = input.LA(1);
        if ( (LA724_0==Asterisk) ) {
            alt724=1;
        }
        else if ( ((LA724_0>=Intersection && LA724_0<=With)||(LA724_0>=For && LA724_0<=Var)||(LA724_0>=As && LA724_0<=Of)||LA724_0==LeftSquareBracket||LA724_0==RULE_DOUBLE||(LA724_0>=RULE_HEX_INT && LA724_0<=RULE_OCTAL_INT)||LA724_0==RULE_SCIENTIFIC_INT||LA724_0==RULE_IDENTIFIER||LA724_0==RULE_STRING||LA724_0==RULE_INT) ) {
            alt724=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 724, 0, input);
            throw nvae;
        }
        switch (alt724) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred147_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt725=2;
        alt725 = dfa725.predict(input);
        switch (alt725) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_96);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred148_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred150_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred153_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt726=2;
        int LA726_0 = input.LA(1);
        if ( (LA726_0==LessThanSign) ) {
            alt726=1;
        }
        switch (alt726) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt727=2;
        alt727 = dfa727.predict(input);
        switch (alt727) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_111);
                ruleTypeRefWithModifiers();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                break;
        }
        int alt728=2;
        int LA728_0 = input.LA(1);
        if ( (LA728_0==Asterisk) ) {
            alt728=1;
        }
        else if ( ((LA728_0>=Intersection && LA728_0<=With)||(LA728_0>=For && LA728_0<=Var)||(LA728_0>=As && LA728_0<=Of)||LA728_0==LeftSquareBracket||LA728_0==RULE_DOUBLE||(LA728_0>=RULE_HEX_INT && LA728_0<=RULE_OCTAL_INT)||LA728_0==RULE_SCIENTIFIC_INT||LA728_0==RULE_IDENTIFIER||LA728_0==RULE_STRING||LA728_0==RULE_INT) ) {
            alt728=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 728, 0, input);
            throw nvae;
        }
        switch (alt728) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred174_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred175_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==QuestionMarkFullStop||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred176_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_124); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred177_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred178_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_124); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred184_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred186_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred188_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred190_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred191_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_53);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_215);
        ruleShiftOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_53);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_53);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_215);
        ruleRelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_215);
        norm1_RelationalOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMarkQuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred237_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_150); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt741=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt741=1;
            }
            break;
        case Async:
            {
            int LA741_2 = input.LA(2);
            if ( (LA741_2==EqualsSignGreaterThanSign) ) {
                alt741=3;
            }
            else if ( (LA741_2==RULE_NO_LINE_TERMINATOR) && (synpred238_InternalN4JSParser())) {
                alt741=2;
            }
            else if ( (LA741_2==LeftParenthesis) && (synpred238_InternalN4JSParser())) {
                alt741=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 741, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt741=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 741, 0, input);
            throw nvae;
        }
        switch (alt741) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt739=2;
                int LA739_0 = input.LA(1);
                if ( (LA739_0==Colon) ) {
                    alt739=1;
                }
                switch (alt739) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_46);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt740=2;
                int LA740_0 = input.LA(1);
                if ( (LA740_0==Colon) ) {
                    alt740=1;
                }
                switch (alt740) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred243_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_150); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred244_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred246_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt744=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt744=1;
            }
            break;
        case Async:
            {
            int LA744_2 = input.LA(2);
            if ( (LA744_2==EqualsSignGreaterThanSign) ) {
                alt744=3;
            }
            else if ( (LA744_2==RULE_NO_LINE_TERMINATOR) && (synpred244_InternalN4JSParser())) {
                alt744=2;
            }
            else if ( (LA744_2==LeftParenthesis) && (synpred244_InternalN4JSParser())) {
                alt744=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 744, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt744=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 744, 0, input);
            throw nvae;
        }
        switch (alt744) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt742=2;
                int LA742_0 = input.LA(1);
                if ( (LA742_0==Colon) ) {
                    alt742=1;
                }
                switch (alt742) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_46);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                ruleStrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt743=2;
                int LA743_0 = input.LA(1);
                if ( (LA743_0==Colon) ) {
                    alt743=1;
                }
                switch (alt743) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred247_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred248_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred249_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_150); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred250_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred252_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt747=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt747=1;
            }
            break;
        case Async:
            {
            int LA747_2 = input.LA(2);
            if ( (LA747_2==EqualsSignGreaterThanSign) ) {
                alt747=3;
            }
            else if ( (LA747_2==RULE_NO_LINE_TERMINATOR) && (synpred250_InternalN4JSParser())) {
                alt747=2;
            }
            else if ( (LA747_2==LeftParenthesis) && (synpred250_InternalN4JSParser())) {
                alt747=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 747, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt747=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 747, 0, input);
            throw nvae;
        }
        switch (alt747) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt745=2;
                int LA745_0 = input.LA(1);
                if ( (LA745_0==Colon) ) {
                    alt745=1;
                }
                switch (alt745) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_55); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_43);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt746=2;
                int LA746_0 = input.LA(1);
                if ( (LA746_0==Colon) ) {
                    alt746=1;
                }
                switch (alt746) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred253_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred254_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred255_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_150); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;
        }
        }
        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();
        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred258_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt750=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt750=1;
            }
            break;
        case Async:
            {
            int LA750_2 = input.LA(2);
            if ( (LA750_2==RULE_NO_LINE_TERMINATOR) && (synpred256_InternalN4JSParser())) {
                alt750=2;
            }
            else if ( (LA750_2==LeftParenthesis) && (synpred256_InternalN4JSParser())) {
                alt750=2;
            }
            else if ( (LA750_2==EqualsSignGreaterThanSign) ) {
                alt750=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 750, 2, input);
                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt750=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 750, 0, input);
            throw nvae;
        }
        switch (alt750) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                int alt748=2;
                int LA748_0 = input.LA(1);
                if ( (LA748_0==Colon) ) {
                    alt748=1;
                }
                switch (alt748) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_55); if (state.failed) return ;
                }
                }
                pushFollow(FOLLOW_43);
                ruleNoLineTerminator();
                state._fsp--;
                if (state.failed) return ;
                {
                pushFollow(FOLLOW_50);
                norm1_StrictFormalParameters();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                int alt749=2;
                int LA749_0 = input.LA(1);
                if ( (LA749_0==Colon) ) {
                    alt749=1;
                }
                switch (alt749) {
                    case 1 :
                        {
                        pushFollow(FOLLOW_51);
                        ruleColonSepDeclaredReturnTypeRef();
                        state._fsp--;
                        if (state.failed) return ;
                        }
                        break;
                }
                }
                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                }
                break;
        }
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred262_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred263_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||(input.LA(1)>=Import && input.LA(1)<=Public)||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||(input.LA(1)>=HyphenMinusHyphenMinus && input.LA(1)<=SolidusEqualsSign)||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred272_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred276_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred277_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred281_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop764:
        do {
            int alt764=2;
            int LA764_0 = input.LA(1);
            if ( ((LA764_0>=Protected && LA764_0<=Abstract)||LA764_0==External||(LA764_0>=Private && LA764_0<=Project)||LA764_0==Public||LA764_0==Static||LA764_0==Const) ) {
                alt764=1;
            }
            switch (alt764) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop764;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred282_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop765:
        do {
            int alt765=2;
            int LA765_0 = input.LA(1);
            if ( ((LA765_0>=Protected && LA765_0<=Abstract)||LA765_0==External||(LA765_0>=Private && LA765_0<=Project)||LA765_0==Public||LA765_0==Static||LA765_0==Const) ) {
                alt765=1;
            }
            switch (alt765) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_169);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop765;
            }
        } while (true);
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred283_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop766:
        do {
            int alt766=2;
            alt766 = dfa766.predict(input);
            switch (alt766) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_166);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop766;
            }
        } while (true);
        int alt767=2;
        int LA767_0 = input.LA(1);
        if ( (LA767_0==LessThanSign) ) {
            alt767=1;
        }
        switch (alt767) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_111);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        int alt768=2;
        int LA768_0 = input.LA(1);
        if ( (LA768_0==Asterisk) ) {
            alt768=1;
        }
        else if ( ((LA768_0>=Intersection && LA768_0<=With)||(LA768_0>=For && LA768_0<=Var)||(LA768_0>=As && LA768_0<=Of)||LA768_0==LeftSquareBracket||LA768_0==RULE_DOUBLE||(LA768_0>=RULE_HEX_INT && LA768_0<=RULE_OCTAL_INT)||LA768_0==RULE_SCIENTIFIC_INT||LA768_0==RULE_IDENTIFIER||LA768_0==RULE_STRING||LA768_0==RULE_INT) ) {
            alt768=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 768, 0, input);
            throw nvae;
        }
        switch (alt768) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred284_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop769:
        do {
            int alt769=2;
            int LA769_0 = input.LA(1);
            if ( ((LA769_0>=Protected && LA769_0<=Abstract)||LA769_0==External||(LA769_0>=Private && LA769_0<=Project)||LA769_0==Public||LA769_0==Static||LA769_0==Const) ) {
                alt769=1;
            }
            switch (alt769) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop769;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred285_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop770:
        do {
            int alt770=2;
            int LA770_0 = input.LA(1);
            if ( ((LA770_0>=Protected && LA770_0<=Abstract)||LA770_0==External||(LA770_0>=Private && LA770_0<=Project)||LA770_0==Public||LA770_0==Static||LA770_0==Const) ) {
                alt770=1;
            }
            switch (alt770) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_169);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop770;
            }
        } while (true);
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred286_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop771:
        do {
            int alt771=2;
            alt771 = dfa771.predict(input);
            switch (alt771) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_166);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop771;
            }
        } while (true);
        int alt772=2;
        int LA772_0 = input.LA(1);
        if ( (LA772_0==LessThanSign) ) {
            alt772=1;
        }
        switch (alt772) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        pushFollow(FOLLOW_111);
        ruleAsyncNoTrailingLineBreak();
        state._fsp--;
        if (state.failed) return ;
        int alt773=2;
        int LA773_0 = input.LA(1);
        if ( (LA773_0==Asterisk) ) {
            alt773=1;
        }
        else if ( ((LA773_0>=Intersection && LA773_0<=With)||(LA773_0>=For && LA773_0<=Var)||(LA773_0>=As && LA773_0<=Of)||LA773_0==LeftSquareBracket||LA773_0==RULE_DOUBLE||(LA773_0>=RULE_HEX_INT && LA773_0<=RULE_OCTAL_INT)||LA773_0==RULE_SCIENTIFIC_INT||LA773_0==RULE_IDENTIFIER||LA773_0==RULE_STRING||LA773_0==RULE_INT) ) {
            alt773=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 773, 0, input);
            throw nvae;
        }
        switch (alt773) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred287_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop774:
        do {
            int alt774=2;
            int LA774_0 = input.LA(1);
            if ( ((LA774_0>=Protected && LA774_0<=Abstract)||LA774_0==External||(LA774_0>=Private && LA774_0<=Project)||LA774_0==Public||LA774_0==Static||LA774_0==Const) ) {
                alt774=1;
            }
            switch (alt774) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop774;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        ruleGetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop775:
        do {
            int alt775=2;
            int LA775_0 = input.LA(1);
            if ( ((LA775_0>=Protected && LA775_0<=Abstract)||LA775_0==External||(LA775_0>=Private && LA775_0<=Project)||LA775_0==Public||LA775_0==Static||LA775_0==Const) ) {
                alt775=1;
            }
            switch (alt775) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_169);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop775;
            }
        } while (true);
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred291_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred292_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop776:
        do {
            int alt776=2;
            alt776 = dfa776.predict(input);
            switch (alt776) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_166);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop776;
            }
        } while (true);
        int alt777=2;
        int LA777_0 = input.LA(1);
        if ( (LA777_0==LessThanSign) ) {
            alt777=1;
        }
        switch (alt777) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt778=2;
        int LA778_0 = input.LA(1);
        if ( (LA778_0==Asterisk) ) {
            alt778=1;
        }
        else if ( ((LA778_0>=Intersection && LA778_0<=With)||(LA778_0>=For && LA778_0<=Var)||(LA778_0>=As && LA778_0<=Of)||LA778_0==LeftSquareBracket||LA778_0==RULE_DOUBLE||(LA778_0>=RULE_HEX_INT && LA778_0<=RULE_OCTAL_INT)||LA778_0==RULE_SCIENTIFIC_INT||LA778_0==RULE_IDENTIFIER||LA778_0==RULE_STRING||LA778_0==RULE_INT) ) {
            alt778=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 778, 0, input);
            throw nvae;
        }
        switch (alt778) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleAsyncNoTrailingLineBreak();
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred295_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop779:
        do {
            int alt779=2;
            int LA779_0 = input.LA(1);
            if ( ((LA779_0>=Protected && LA779_0<=Abstract)||LA779_0==External||(LA779_0>=Private && LA779_0<=Project)||LA779_0==Public||LA779_0==Static||LA779_0==Const) ) {
                alt779=1;
            }
            switch (alt779) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_167);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop779;
            }
        } while (true);
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();
        state._fsp--;
        if (state.failed) return ;
        }
        }
    }
    public final void synpred296_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred297_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop780:
        do {
            int alt780=2;
            int LA780_0 = input.LA(1);
            if ( ((LA780_0>=Protected && LA780_0<=Abstract)||LA780_0==External||(LA780_0>=Private && LA780_0<=Project)||LA780_0==Public||LA780_0==Static||LA780_0==Const) ) {
                alt780=1;
            }
            switch (alt780) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_169);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop780;
            }
        } while (true);
        match(input,Set,FOLLOW_214); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
        }
    }
    public final void synpred299_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred300_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop781:
        do {
            int alt781=2;
            alt781 = dfa781.predict(input);
            switch (alt781) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_166);
        	    ruleN4Modifier();
        	    state._fsp--;
        	    if (state.failed) return ;
        	    }
        	    }
        	    break;
        	default :
        	    break loop781;
            }
        } while (true);
        int alt782=2;
        int LA782_0 = input.LA(1);
        if ( (LA782_0==LessThanSign) ) {
            alt782=1;
        }
        switch (alt782) {
            case 1 :
                {
                pushFollow(FOLLOW_111);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        int alt783=2;
        int LA783_0 = input.LA(1);
        if ( (LA783_0==Asterisk) ) {
            alt783=1;
        }
        else if ( ((LA783_0>=Intersection && LA783_0<=With)||(LA783_0>=For && LA783_0<=Var)||(LA783_0>=As && LA783_0<=Of)||LA783_0==LeftSquareBracket||LA783_0==RULE_DOUBLE||(LA783_0>=RULE_HEX_INT && LA783_0<=RULE_OCTAL_INT)||LA783_0==RULE_SCIENTIFIC_INT||LA783_0==RULE_IDENTIFIER||LA783_0==RULE_STRING||LA783_0==RULE_INT) ) {
            alt783=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 783, 0, input);
            throw nvae;
        }
        switch (alt783) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_109); if (state.failed) return ;
                }
                }
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_109);
                ruleAsyncNoTrailingLineBreak();
                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();
                state._fsp--;
                if (state.failed) return ;
                }
                }
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
                }
                }
                break;
        }
        }
        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred310_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred312_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred314_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred316_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred324_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred325_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_96);
        ruleLiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred326_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_96);
        norm1_LiteralOrComputedPropertyName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred327_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred328_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
    }
    public final void synpred329_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }
        }
    }
    public final void synpred330_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred331_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred332_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,LeftSquareBracket,FOLLOW_129); if (state.failed) return ;
        }
        }
        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred333_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_197); if (state.failed) return ;
        pushFollow(FOLLOW_73);
        ruleTAnonymousFormalParameterList();
        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_51); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred334_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred335_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred336_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred338_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_96);
        ruleBindingIdentifier();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,Colon,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred340_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred341_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;
        }
    }
    public final void synpred342_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred343_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_14); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        }
        }
    }
    public final void synpred344_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt794=2;
        int LA794_0 = input.LA(1);
        if ( (LA794_0==LessThanSign) ) {
            alt794=1;
        }
        switch (alt794) {
            case 1 :
                {
                pushFollow(FOLLOW_14);
                ruleTypeVariables();
                state._fsp--;
                if (state.failed) return ;
                }
                break;
        }
        {
        {
        pushFollow(FOLLOW_46);
        ruleIdentifierName();
        state._fsp--;
        if (state.failed) return ;
        }
        }
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final void synpred348_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;
        }
        }
    }
    public final boolean synpred334_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred286_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred286_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred297_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred297_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred300_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred300_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred72_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred72_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred327_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred327_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred348_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred348_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred276_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred276_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred78_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred78_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred138_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred138_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred243_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA15 dfa15 = new DFA15(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA196 dfa196 = new DFA196(this);
    protected DFA188 dfa188 = new DFA188(this);
    protected DFA181 dfa181 = new DFA181(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA207 dfa207 = new DFA207(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA237 dfa237 = new DFA237(this);
    protected DFA238 dfa238 = new DFA238(this);
    protected DFA239 dfa239 = new DFA239(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA241 dfa241 = new DFA241(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA245 dfa245 = new DFA245(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA271 dfa271 = new DFA271(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA276 dfa276 = new DFA276(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA289 dfa289 = new DFA289(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA293 dfa293 = new DFA293(this);
    protected DFA294 dfa294 = new DFA294(this);
    protected DFA325 dfa325 = new DFA325(this);
    protected DFA333 dfa333 = new DFA333(this);
    protected DFA348 dfa348 = new DFA348(this);
    protected DFA349 dfa349 = new DFA349(this);
    protected DFA350 dfa350 = new DFA350(this);
    protected DFA351 dfa351 = new DFA351(this);
    protected DFA354 dfa354 = new DFA354(this);
    protected DFA355 dfa355 = new DFA355(this);
    protected DFA356 dfa356 = new DFA356(this);
    protected DFA357 dfa357 = new DFA357(this);
    protected DFA395 dfa395 = new DFA395(this);
    protected DFA394 dfa394 = new DFA394(this);
    protected DFA397 dfa397 = new DFA397(this);
    protected DFA396 dfa396 = new DFA396(this);
    protected DFA399 dfa399 = new DFA399(this);
    protected DFA398 dfa398 = new DFA398(this);
    protected DFA401 dfa401 = new DFA401(this);
    protected DFA400 dfa400 = new DFA400(this);
    protected DFA403 dfa403 = new DFA403(this);
    protected DFA405 dfa405 = new DFA405(this);
    protected DFA436 dfa436 = new DFA436(this);
    protected DFA442 dfa442 = new DFA442(this);
    protected DFA482 dfa482 = new DFA482(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA495 dfa495 = new DFA495(this);
    protected DFA491 dfa491 = new DFA491(this);
    protected DFA507 dfa507 = new DFA507(this);
    protected DFA503 dfa503 = new DFA503(this);
    protected DFA508 dfa508 = new DFA508(this);
    protected DFA512 dfa512 = new DFA512(this);
    protected DFA516 dfa516 = new DFA516(this);
    protected DFA520 dfa520 = new DFA520(this);
    protected DFA558 dfa558 = new DFA558(this);
    protected DFA564 dfa564 = new DFA564(this);
    protected DFA568 dfa568 = new DFA568(this);
    protected DFA569 dfa569 = new DFA569(this);
    protected DFA587 dfa587 = new DFA587(this);
    protected DFA599 dfa599 = new DFA599(this);
    protected DFA600 dfa600 = new DFA600(this);
    protected DFA602 dfa602 = new DFA602(this);
    protected DFA615 dfa615 = new DFA615(this);
    protected DFA621 dfa621 = new DFA621(this);
    protected DFA622 dfa622 = new DFA622(this);
    protected DFA623 dfa623 = new DFA623(this);
    protected DFA624 dfa624 = new DFA624(this);
    protected DFA631 dfa631 = new DFA631(this);
    protected DFA711 dfa711 = new DFA711(this);
    protected DFA714 dfa714 = new DFA714(this);
    protected DFA716 dfa716 = new DFA716(this);
    protected DFA719 dfa719 = new DFA719(this);
    protected DFA721 dfa721 = new DFA721(this);
    protected DFA723 dfa723 = new DFA723(this);
    protected DFA725 dfa725 = new DFA725(this);
    protected DFA727 dfa727 = new DFA727(this);
    protected DFA766 dfa766 = new DFA766(this);
    protected DFA771 dfa771 = new DFA771(this);
    protected DFA776 dfa776 = new DFA776(this);
    protected DFA781 dfa781 = new DFA781(this);
    static final String dfa_1s = "\125\uffff";
    static final String dfa_2s = "\1\4\13\0\1\uffff\2\0\106\uffff";
    static final String dfa_3s = "\1\u0095\13\0\1\uffff\2\0\106\uffff";
    static final String dfa_4s = "\14\uffff\1\4\2\uffff\1\7\1\10\77\uffff\1\1\1\2\1\3\1\5\1\6";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\15\106\uffff}>";
    static final String[] dfa_6s = {
            "\3\20\1\uffff\1\20\1\13\1\4\1\7\2\20\1\6\1\20\3\uffff\1\2\1\3\1\20\1\17\1\16\1\5\1\20\1\10\6\20\1\uffff\1\12\1\11\7\20\2\uffff\1\14\4\20\1\15\2\20\4\uffff\10\20\5\uffff\1\20\1\uffff\2\20\10\uffff\3\20\1\uffff\1\20\2\uffff\1\20\2\uffff\1\20\2\uffff\1\20\1\uffff\1\20\1\uffff\1\20\1\uffff\2\20\3\uffff\1\1\1\20\2\uffff\1\20\2\uffff\1\20\3\uffff\1\20\1\uffff\4\20\1\uffff\1\20\1\uffff\1\20\2\uffff\1\20\12\uffff\2\20\7\uffff\1\20",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);
    class DFA3 extends DFA {
        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "102:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ( ( ( ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>N4TypeAliasDeclarationParserRuleCall_4= ruleN4TypeAliasDeclaration ) | ( ( ruleImportDeclaration )=>ImportDeclarationParserRuleCall_5= ruleImportDeclaration ) | ExportDeclarationParserRuleCall_6= ruleExportDeclaration | RootStatementParserRuleCall_7= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA3_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}
                        else if ( (LA3_0==Type) ) {s = 13;}
                        else if ( (LA3_0==Import) ) {s = 14;}
                        else if ( (LA3_0==Export) ) {s = 15;}
                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=True)||(LA3_0>=Void && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||(LA3_0>=HyphenMinusHyphenMinus && LA3_0<=SolidusEqualsSign)||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_HEX_INT && LA3_0<=RULE_LEGACY_OCTAL_INT)||LA3_0==RULE_SCIENTIFIC_INT||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_INT) ) {s = 16;}
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 82;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA3_13 = input.LA(1);
                        int index3_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalN4JSParser()) ) {s = 83;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA3_14 = input.LA(1);
                        int index3_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalN4JSParser()) ) {s = 84;}
                        else if ( (true) ) {s = 16;}
                        input.seek(index3_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\27\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\5\uffff\7\11";
    static final String dfa_9s = "\1\62\2\uffff\7\62\1\55\5\uffff\7\55";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5\1\6\7\uffff";
    static final String dfa_11s = "\1\5\2\uffff\1\11\1\1\1\4\1\14\1\6\1\15\1\0\1\16\5\uffff\1\2\1\7\1\12\1\17\1\3\1\10\1\13}>";
    static final String[] dfa_12s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16\4\uffff\1\17",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\22\1\25\2\uffff\1\24\1\14\3\uffff\1\20\1\21\3\uffff\1\23\1\uffff\1\26\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16"
    };
    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);
    class DFA21 extends DFA {
        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "245:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_0_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_0_6= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_3_0_0_7= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_1_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_1_6= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_3_0_1_7= ruleInterfaceExtendsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_4_4= ruleVersionDeclaration )? LeftCurlyBracketKeyword_1_4_5= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_7_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_7_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_8= RightCurlyBracket ) | ( ( ( ruleN4ModifierWithoutConst ) )* TypeKeyword_1_5_2= Type ( (NameBindingIdentifierParserRuleCall_1_5_3_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_5_4= ruleTypeVariables )? EqualsSignKeyword_1_5_5= EqualsSign ( (DeclaredTypeRefTypeRefParserRuleCall_1_5_6_0= ruleTypeRef ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_9 = input.LA(1);
                        int index21_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_9==Enum) ) {s = 14;}
                        else if ( (LA21_9==Private) ) {s = 3;}
                        else if ( (LA21_9==Project) ) {s = 4;}
                        else if ( (LA21_9==Protected) ) {s = 5;}
                        else if ( (LA21_9==Public) ) {s = 6;}
                        else if ( (LA21_9==External) ) {s = 7;}
                        else if ( (LA21_9==Abstract) ) {s = 8;}
                        else if ( (LA21_9==Static) ) {s = 9;}
                        else if ( (LA21_9==Const) ) {s = 10;}
                        else if ( (LA21_9==Interface||LA21_9==Class) ) {s = 13;}
                        else if ( (LA21_9==Type) ) {s = 15;}
                        else if ( (LA21_9==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_9==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        input.seek(index21_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_4 = input.LA(1);
                        int index21_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_4==Type) ) {s = 15;}
                        else if ( (LA21_4==Private) ) {s = 3;}
                        else if ( (LA21_4==Project) ) {s = 4;}
                        else if ( (LA21_4==Protected) ) {s = 5;}
                        else if ( (LA21_4==Public) ) {s = 6;}
                        else if ( (LA21_4==External) ) {s = 7;}
                        else if ( (LA21_4==Abstract) ) {s = 8;}
                        else if ( (LA21_4==Static) ) {s = 9;}
                        else if ( (LA21_4==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_4==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_4==Const) ) {s = 10;}
                        else if ( (LA21_4==Enum) ) {s = 14;}
                        else if ( (LA21_4==Interface||LA21_4==Class) ) {s = 13;}
                        input.seek(index21_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA21_16 = input.LA(1);
                        int index21_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_16==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_16==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_16==Private) ) {s = 16;}
                        else if ( (LA21_16==Project) ) {s = 17;}
                        else if ( (LA21_16==Protected) ) {s = 18;}
                        else if ( (LA21_16==Public) ) {s = 19;}
                        else if ( (LA21_16==External) ) {s = 20;}
                        else if ( (LA21_16==Abstract) ) {s = 21;}
                        else if ( (LA21_16==Static) ) {s = 22;}
                        else if ( (LA21_16==Const) ) {s = 10;}
                        else if ( (LA21_16==Enum) ) {s = 14;}
                        else if ( (LA21_16==Interface||LA21_16==Class) ) {s = 13;}
                        input.seek(index21_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA21_20 = input.LA(1);
                        int index21_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_20==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_20==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_20==Private) ) {s = 16;}
                        else if ( (LA21_20==Project) ) {s = 17;}
                        else if ( (LA21_20==Protected) ) {s = 18;}
                        else if ( (LA21_20==Public) ) {s = 19;}
                        else if ( (LA21_20==External) ) {s = 20;}
                        else if ( (LA21_20==Abstract) ) {s = 21;}
                        else if ( (LA21_20==Static) ) {s = 22;}
                        else if ( (LA21_20==Const) ) {s = 10;}
                        else if ( (LA21_20==Enum) ) {s = 14;}
                        else if ( (LA21_20==Interface||LA21_20==Class) ) {s = 13;}
                        input.seek(index21_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA21_5 = input.LA(1);
                        int index21_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_5==Interface||LA21_5==Class) ) {s = 13;}
                        else if ( (LA21_5==Private) ) {s = 3;}
                        else if ( (LA21_5==Project) ) {s = 4;}
                        else if ( (LA21_5==Protected) ) {s = 5;}
                        else if ( (LA21_5==Public) ) {s = 6;}
                        else if ( (LA21_5==External) ) {s = 7;}
                        else if ( (LA21_5==Abstract) ) {s = 8;}
                        else if ( (LA21_5==Static) ) {s = 9;}
                        else if ( (LA21_5==Const) ) {s = 10;}
                        else if ( (LA21_5==Type) ) {s = 15;}
                        else if ( (LA21_5==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_5==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_5==Enum) ) {s = 14;}
                        input.seek(index21_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA21_0 = input.LA(1);
                        int index21_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA21_0>=10 && LA21_0<=35 && (s=T2S.M_1[LA21_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA21_0==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_0==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_0==Interface||LA21_0==Class) ) {s = 13;}
                        else if ( (LA21_0==Enum) ) {s = 14;}
                        else if ( (LA21_0==Type) ) {s = 15;}
                        input.seek(index21_0);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA21_7 = input.LA(1);
                        int index21_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_7==Type) ) {s = 15;}
                        else if ( (LA21_7==Private) ) {s = 3;}
                        else if ( (LA21_7==Project) ) {s = 4;}
                        else if ( (LA21_7==Protected) ) {s = 5;}
                        else if ( (LA21_7==Public) ) {s = 6;}
                        else if ( (LA21_7==External) ) {s = 7;}
                        else if ( (LA21_7==Abstract) ) {s = 8;}
                        else if ( (LA21_7==Static) ) {s = 9;}
                        else if ( (LA21_7==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_7==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_7==Const) ) {s = 10;}
                        else if ( (LA21_7==Enum) ) {s = 14;}
                        else if ( (LA21_7==Interface||LA21_7==Class) ) {s = 13;}
                        input.seek(index21_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA21_17 = input.LA(1);
                        int index21_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_17==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_17==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_17==Private) ) {s = 16;}
                        else if ( (LA21_17==Project) ) {s = 17;}
                        else if ( (LA21_17==Protected) ) {s = 18;}
                        else if ( (LA21_17==Public) ) {s = 19;}
                        else if ( (LA21_17==External) ) {s = 20;}
                        else if ( (LA21_17==Abstract) ) {s = 21;}
                        else if ( (LA21_17==Static) ) {s = 22;}
                        else if ( (LA21_17==Const) ) {s = 10;}
                        else if ( (LA21_17==Enum) ) {s = 14;}
                        else if ( (LA21_17==Interface||LA21_17==Class) ) {s = 13;}
                        input.seek(index21_17);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA21_21 = input.LA(1);
                        int index21_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_21==Interface||LA21_21==Class) ) {s = 13;}
                        else if ( (LA21_21==Private) ) {s = 16;}
                        else if ( (LA21_21==Project) ) {s = 17;}
                        else if ( (LA21_21==Protected) ) {s = 18;}
                        else if ( (LA21_21==Public) ) {s = 19;}
                        else if ( (LA21_21==External) ) {s = 20;}
                        else if ( (LA21_21==Abstract) ) {s = 21;}
                        else if ( (LA21_21==Static) ) {s = 22;}
                        else if ( (LA21_21==Const) ) {s = 10;}
                        else if ( (LA21_21==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_21==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_21==Enum) ) {s = 14;}
                        input.seek(index21_21);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA21_3 = input.LA(1);
                        int index21_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_3==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_3==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_3==Private) ) {s = 3;}
                        else if ( (LA21_3==Project) ) {s = 4;}
                        else if ( (LA21_3==Protected) ) {s = 5;}
                        else if ( (LA21_3==Public) ) {s = 6;}
                        else if ( (LA21_3==External) ) {s = 7;}
                        else if ( (LA21_3==Abstract) ) {s = 8;}
                        else if ( (LA21_3==Static) ) {s = 9;}
                        else if ( (LA21_3==Const) ) {s = 10;}
                        else if ( (LA21_3==Enum) ) {s = 14;}
                        else if ( (LA21_3==Interface||LA21_3==Class) ) {s = 13;}
                        else if ( (LA21_3==Type) ) {s = 15;}
                        input.seek(index21_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA21_18 = input.LA(1);
                        int index21_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_18==Interface||LA21_18==Class) ) {s = 13;}
                        else if ( (LA21_18==Private) ) {s = 16;}
                        else if ( (LA21_18==Project) ) {s = 17;}
                        else if ( (LA21_18==Protected) ) {s = 18;}
                        else if ( (LA21_18==Public) ) {s = 19;}
                        else if ( (LA21_18==External) ) {s = 20;}
                        else if ( (LA21_18==Abstract) ) {s = 21;}
                        else if ( (LA21_18==Static) ) {s = 22;}
                        else if ( (LA21_18==Const) ) {s = 10;}
                        else if ( (LA21_18==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_18==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_18==Enum) ) {s = 14;}
                        input.seek(index21_18);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA21_22 = input.LA(1);
                        int index21_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_22==Enum) ) {s = 14;}
                        else if ( (LA21_22==Private) ) {s = 16;}
                        else if ( (LA21_22==Project) ) {s = 17;}
                        else if ( (LA21_22==Protected) ) {s = 18;}
                        else if ( (LA21_22==Public) ) {s = 19;}
                        else if ( (LA21_22==External) ) {s = 20;}
                        else if ( (LA21_22==Abstract) ) {s = 21;}
                        else if ( (LA21_22==Static) ) {s = 22;}
                        else if ( (LA21_22==Const) ) {s = 10;}
                        else if ( (LA21_22==Interface||LA21_22==Class) ) {s = 13;}
                        else if ( (LA21_22==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_22==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        input.seek(index21_22);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA21_6 = input.LA(1);
                        int index21_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_6==Enum) ) {s = 14;}
                        else if ( (LA21_6==Private) ) {s = 3;}
                        else if ( (LA21_6==Project) ) {s = 4;}
                        else if ( (LA21_6==Protected) ) {s = 5;}
                        else if ( (LA21_6==Public) ) {s = 6;}
                        else if ( (LA21_6==External) ) {s = 7;}
                        else if ( (LA21_6==Abstract) ) {s = 8;}
                        else if ( (LA21_6==Static) ) {s = 9;}
                        else if ( (LA21_6==Const) ) {s = 10;}
                        else if ( (LA21_6==Interface||LA21_6==Class) ) {s = 13;}
                        else if ( (LA21_6==Type) ) {s = 15;}
                        else if ( (LA21_6==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_6==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        input.seek(index21_6);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA21_8 = input.LA(1);
                        int index21_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_8==Interface||LA21_8==Class) ) {s = 13;}
                        else if ( (LA21_8==Private) ) {s = 3;}
                        else if ( (LA21_8==Project) ) {s = 4;}
                        else if ( (LA21_8==Protected) ) {s = 5;}
                        else if ( (LA21_8==Public) ) {s = 6;}
                        else if ( (LA21_8==External) ) {s = 7;}
                        else if ( (LA21_8==Abstract) ) {s = 8;}
                        else if ( (LA21_8==Static) ) {s = 9;}
                        else if ( (LA21_8==Const) ) {s = 10;}
                        else if ( (LA21_8==Type) ) {s = 15;}
                        else if ( (LA21_8==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_8==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_8==Enum) ) {s = 14;}
                        input.seek(index21_8);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA21_10 = input.LA(1);
                        int index21_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_10==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_10==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        else if ( (LA21_10==Private) ) {s = 16;}
                        else if ( (LA21_10==Project) ) {s = 17;}
                        else if ( (LA21_10==Protected) ) {s = 18;}
                        else if ( (LA21_10==Public) ) {s = 19;}
                        else if ( (LA21_10==External) ) {s = 20;}
                        else if ( (LA21_10==Abstract) ) {s = 21;}
                        else if ( (LA21_10==Static) ) {s = 22;}
                        else if ( (LA21_10==Const) ) {s = 10;}
                        else if ( (LA21_10==Enum) ) {s = 14;}
                        else if ( (LA21_10==Interface||LA21_10==Class) ) {s = 13;}
                        input.seek(index21_10);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA21_19 = input.LA(1);
                        int index21_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA21_19==Enum) ) {s = 14;}
                        else if ( (LA21_19==Private) ) {s = 16;}
                        else if ( (LA21_19==Project) ) {s = 17;}
                        else if ( (LA21_19==Protected) ) {s = 18;}
                        else if ( (LA21_19==Public) ) {s = 19;}
                        else if ( (LA21_19==External) ) {s = 20;}
                        else if ( (LA21_19==Abstract) ) {s = 21;}
                        else if ( (LA21_19==Static) ) {s = 22;}
                        else if ( (LA21_19==Const) ) {s = 10;}
                        else if ( (LA21_19==Interface||LA21_19==Class) ) {s = 13;}
                        else if ( (LA21_19==Async) && (synpred8_InternalN4JSParser())) {s = 11;}
                        else if ( (LA21_19==Function) && (synpred8_InternalN4JSParser())) {s = 12;}
                        input.seek(index21_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\43\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };
    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);
    class DFA15 extends DFA {
        public DFA15(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 15;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "283:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_0_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_0_6= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_3_0_0_7= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (VersionDeclarationParserRuleCall_1_3_0_1_5= ruleVersionDeclaration )? (TypeVariablesParserRuleCall_1_3_0_1_6= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_3_0_1_7= ruleInterfaceExtendsList )? ) )";
        }
    }
    static final String dfa_19s = "\102\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\3\0\1\uffff\1\0\60\uffff";
    static final String dfa_21s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\3\0\1\uffff\1\0\60\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\15\1\uffff\1\16\60\uffff}>";
    static final String[] dfa_24s = {
            "\3\22\1\uffff\1\22\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\1\22\1\uffff\1\22\1\5\1\uffff\1\10\1\uffff\2\22\1\16\1\22\2\uffff\1\12\1\11\2\22\1\uffff\1\22\1\uffff\2\22\2\uffff\1\14\4\22\1\15\1\22\6\uffff\1\22\1\21\3\22\1\uffff\1\20\5\uffff\1\22\1\uffff\2\22\10\uffff\1\22\3\uffff\1\22\2\uffff\1\22\2\uffff\1\22\2\uffff\1\22\1\uffff\1\22\1\uffff\1\22\2\uffff\1\22\3\uffff\1\1\1\22\2\uffff\1\22\2\uffff\1\22\3\uffff\1\22\1\uffff\4\22\1\uffff\1\22\1\uffff\1\22\2\uffff\1\22\12\uffff\2\22\7\uffff\1\22",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);
    class DFA23 extends DFA {
        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "509:4: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Type | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_0 = input.LA(1);
                        int index23_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA23_0==CommercialAt) ) {s = 1;}
                        else if ( (LA23_0==Private) ) {s = 2;}
                        else if ( (LA23_0==Project) ) {s = 3;}
                        else if ( (LA23_0==Protected) ) {s = 4;}
                        else if ( (LA23_0==Public) ) {s = 5;}
                        else if ( (LA23_0==External) ) {s = 6;}
                        else if ( (LA23_0==Abstract) ) {s = 7;}
                        else if ( (LA23_0==Static) ) {s = 8;}
                        else if ( (LA23_0==Const) && (synpred11_InternalN4JSParser())) {s = 9;}
                        else if ( (LA23_0==Class) ) {s = 10;}
                        else if ( (LA23_0==Interface) ) {s = 11;}
                        else if ( (LA23_0==Enum) && (synpred11_InternalN4JSParser())) {s = 12;}
                        else if ( (LA23_0==Type) ) {s = 13;}
                        else if ( (LA23_0==Async) ) {s = 14;}
                        else if ( (LA23_0==Function) ) {s = 15;}
                        else if ( (LA23_0==Var) && (synpred11_InternalN4JSParser())) {s = 16;}
                        else if ( (LA23_0==Let) ) {s = 17;}
                        else if ( ((LA23_0>=Intersection && LA23_0<=Implements)||LA23_0==Promisify||LA23_0==Delete||LA23_0==Import||(LA23_0>=Target && LA23_0<=Typeof)||LA23_0==Await||(LA23_0>=False && LA23_0<=Super)||LA23_0==Union||(LA23_0>=Yield && LA23_0<=This)||(LA23_0>=From && LA23_0<=True)||LA23_0==Void||LA23_0==Get||(LA23_0>=New && LA23_0<=Set)||LA23_0==PlusSignPlusSign||(LA23_0>=HyphenMinusHyphenMinus && LA23_0<=SolidusEqualsSign)||LA23_0==As||LA23_0==Of||LA23_0==ExclamationMark||LA23_0==LeftParenthesis||LA23_0==PlusSign||LA23_0==HyphenMinus||LA23_0==Solidus||LA23_0==LessThanSign||LA23_0==LeftSquareBracket||LA23_0==LeftCurlyBracket||LA23_0==Tilde||LA23_0==RULE_DOUBLE||(LA23_0>=RULE_HEX_INT && LA23_0<=RULE_LEGACY_OCTAL_INT)||LA23_0==RULE_SCIENTIFIC_INT||LA23_0==RULE_IDENTIFIER||LA23_0==RULE_STRING||(LA23_0>=RULE_TEMPLATE_HEAD && LA23_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA23_0==RULE_INT) ) {s = 18;}
                        input.seek(index23_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA23_1 = input.LA(1);
                        int index23_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA23_2 = input.LA(1);
                        int index23_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA23_3 = input.LA(1);
                        int index23_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA23_4 = input.LA(1);
                        int index23_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA23_5 = input.LA(1);
                        int index23_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA23_6 = input.LA(1);
                        int index23_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA23_7 = input.LA(1);
                        int index23_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA23_8 = input.LA(1);
                        int index23_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA23_10 = input.LA(1);
                        int index23_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA23_11 = input.LA(1);
                        int index23_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA23_13 = input.LA(1);
                        int index23_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA23_14 = input.LA(1);
                        int index23_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA23_15 = input.LA(1);
                        int index23_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA23_17 = input.LA(1);
                        int index23_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred11_InternalN4JSParser()) ) {s = 16;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index23_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\21\uffff\11\20\50\uffff";
    static final String dfa_26s = "\1\11\1\uffff\7\11\1\4\7\uffff\1\4\7\11\1\17\40\uffff\7\11\1\uffff";
    static final String dfa_27s = "\1\152\1\uffff\7\100\1\176\7\uffff\1\u00a5\10\u0099\40\uffff\7\100\1\uffff";
    static final String dfa_28s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\2\6\1\7\11\uffff\40\3\7\uffff\1\6";
    static final String dfa_29s = "\1\30\1\uffff\1\14\1\27\1\12\1\25\1\11\1\22\1\7\1\5\7\uffff\1\0\1\10\1\1\1\17\1\4\1\26\1\6\1\23\1\20\40\uffff\1\21\1\3\1\15\1\13\1\24\1\16\1\2\1\uffff}>";
    static final String[] dfa_30s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20",
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20",
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20",
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20",
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20",
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20",
            "\1\13\1\4\1\7\2\uffff\1\6\1\17\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\4\uffff\1\15\10\uffff\1\20\4\uffff\1\20",
            "\3\20\1\uffff\1\20\1\21\1\24\1\27\2\uffff\1\26\1\17\3\uffff\1\22\1\23\3\uffff\1\25\1\uffff\1\30\1\uffff\1\20\1\uffff\1\31\1\20\2\uffff\1\12\1\11\3\uffff\1\20\1\uffff\2\20\2\uffff\1\14\1\20\3\uffff\1\20\7\uffff\2\20\1\uffff\2\20\1\uffff\1\20\21\uffff\1\20\3\uffff\1\20\23\uffff\2\20\2\uffff\1\20\17\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\53\1\46\1\60\1\uffff\1\55\1\61\1\63\1\42\2\uffff\1\41\2\uffff\1\70\1\uffff\1\62\1\40\3\uffff\1\64\1\uffff\1\43\1\uffff\1\50\1\uffff\1\57\1\56\7\uffff\1\52\1\uffff\1\34\1\54\3\uffff\1\45\3\uffff\1\51\7\uffff\1\35\1\37\1\uffff\1\65\1\36\23\uffff\1\44\3\uffff\1\47\11\uffff\1\20\3\uffff\2\20\1\67\1\20\6\uffff\1\71\1\uffff\1\20\1\32\14\uffff\1\33\30\uffff\1\20\1\uffff\1\20\13\uffff\1\66",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20\37\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\46\uffff\1\20\1\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20\37\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\46\uffff\1\20\1\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20\37\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\46\uffff\1\20\1\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20\37\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\46\uffff\1\20\1\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20\37\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\46\uffff\1\20\1\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20\37\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\46\uffff\1\20\1\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20\37\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\46\uffff\1\20\1\uffff\1\20",
            "\1\17\120\uffff\1\20\3\uffff\2\20\1\uffff\1\20\10\uffff\1\20\41\uffff\1\101\4\uffff\1\20\1\uffff\1\20",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20",
            "\1\13\1\74\1\77\2\uffff\1\76\1\17\3\uffff\1\72\1\73\3\uffff\1\75\1\uffff\1\100\3\uffff\1\16\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\20\4\uffff\1\20",
            ""
    };
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final char[] dfa_26 = DFA.unpackEncodedStringToUnsignedChars(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[][] dfa_30 = unpackEncodedStringArray(dfa_30s);
    class DFA29 extends DFA {
        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = dfa_19;
            this.eof = dfa_25;
            this.min = dfa_26;
            this.max = dfa_27;
            this.accept = dfa_28;
            this.special = dfa_29;
            this.transition = dfa_30;
        }
        public String getDescription() {
            return "661:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ( ruleVersionDeclaration )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ( ( ( ( ( ruleN4ModifierWithoutConst ) )* Type ( ( ruleBindingIdentifier ) )? ) )=>N4TypeAliasDeclarationParserRuleCall_4= ruleN4TypeAliasDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_5= ruleFunctionDeclaration ) | ExportedVariableStatementParserRuleCall_6= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_17 = input.LA(1);
                        int index29_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA29_17>=4 && LA29_17<=165 && (s=T2S.M_2[LA29_17-(4)])>=0) && (synpred14_InternalN4JSParser())) { /* 32 cases */ }
                        else if ( (LA29_17==EOF||LA29_17==Comma||(LA29_17>=Colon && LA29_17<=Semicolon)||LA29_17==EqualsSign||LA29_17==RightCurlyBracket||LA29_17==RULE_ML_COMMENT||LA29_17==RULE_EOL) ) {s = 16;}
                        input.seek(index29_17);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_19 = input.LA(1);
                        int index29_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_19==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_19==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_19==Private) ) {s = 58;}
                        else if ( (LA29_19==Project) ) {s = 59;}
                        else if ( (LA29_19==Protected) ) {s = 60;}
                        else if ( (LA29_19==Public) ) {s = 61;}
                        else if ( (LA29_19==External) ) {s = 62;}
                        else if ( (LA29_19==Abstract) ) {s = 63;}
                        else if ( (LA29_19==Static) ) {s = 64;}
                        else if ( (LA29_19==Const) ) {s = 9;}
                        else if ( (LA29_19==EOF||LA29_19==Let||LA29_19==Var||LA29_19==Comma||(LA29_19>=Colon && LA29_19<=Semicolon)||LA29_19==EqualsSign||LA29_19==RightCurlyBracket||LA29_19==RULE_ML_COMMENT||LA29_19==RULE_EOL) ) {s = 16;}
                        else if ( (LA29_19==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_19==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_19==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        input.seek(index29_19);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_64 = input.LA(1);
                        int index29_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_64==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_64==Private) ) {s = 58;}
                        else if ( (LA29_64==Project) ) {s = 59;}
                        else if ( (LA29_64==Protected) ) {s = 60;}
                        else if ( (LA29_64==Public) ) {s = 61;}
                        else if ( (LA29_64==External) ) {s = 62;}
                        else if ( (LA29_64==Abstract) ) {s = 63;}
                        else if ( (LA29_64==Static) ) {s = 64;}
                        else if ( (LA29_64==Const) ) {s = 9;}
                        else if ( (LA29_64==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_64==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_64==Let||LA29_64==Var) ) {s = 16;}
                        else if ( (LA29_64==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_64==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_64);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_59 = input.LA(1);
                        int index29_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_59==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_59==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_59==Private) ) {s = 58;}
                        else if ( (LA29_59==Project) ) {s = 59;}
                        else if ( (LA29_59==Protected) ) {s = 60;}
                        else if ( (LA29_59==Public) ) {s = 61;}
                        else if ( (LA29_59==External) ) {s = 62;}
                        else if ( (LA29_59==Abstract) ) {s = 63;}
                        else if ( (LA29_59==Static) ) {s = 64;}
                        else if ( (LA29_59==Const) ) {s = 9;}
                        else if ( (LA29_59==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_59==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_59==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_59==Let||LA29_59==Var) ) {s = 16;}
                        input.seek(index29_59);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_21 = input.LA(1);
                        int index29_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_21==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_21==Private) ) {s = 58;}
                        else if ( (LA29_21==Project) ) {s = 59;}
                        else if ( (LA29_21==Protected) ) {s = 60;}
                        else if ( (LA29_21==Public) ) {s = 61;}
                        else if ( (LA29_21==External) ) {s = 62;}
                        else if ( (LA29_21==Abstract) ) {s = 63;}
                        else if ( (LA29_21==Static) ) {s = 64;}
                        else if ( (LA29_21==Const) ) {s = 9;}
                        else if ( (LA29_21==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_21==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_21==EOF||LA29_21==Let||LA29_21==Var||LA29_21==Comma||(LA29_21>=Colon && LA29_21<=Semicolon)||LA29_21==EqualsSign||LA29_21==RightCurlyBracket||LA29_21==RULE_ML_COMMENT||LA29_21==RULE_EOL) ) {s = 16;}
                        else if ( (LA29_21==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_21==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_9 = input.LA(1);
                        int index29_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_9==Interface) ) {s = 17;}
                        else if ( (LA29_9==Private) ) {s = 18;}
                        else if ( (LA29_9==Project) ) {s = 19;}
                        else if ( (LA29_9==Protected) ) {s = 20;}
                        else if ( (LA29_9==Public) ) {s = 21;}
                        else if ( (LA29_9==External) ) {s = 22;}
                        else if ( (LA29_9==Abstract) ) {s = 23;}
                        else if ( (LA29_9==Static) ) {s = 24;}
                        else if ( (LA29_9==Const) ) {s = 9;}
                        else if ( (LA29_9==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_9==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( ((LA29_9>=Intersection && LA29_9<=Implements)||LA29_9==Promisify||LA29_9==Target||LA29_9==Await||LA29_9==Union||(LA29_9>=Yield && LA29_9<=This)||LA29_9==From||LA29_9==Type||(LA29_9>=Get && LA29_9<=Let)||(LA29_9>=Out && LA29_9<=Set)||LA29_9==Var||LA29_9==As||LA29_9==Of||(LA29_9>=CommercialAt && LA29_9<=LeftSquareBracket)||LA29_9==LeftCurlyBracket||LA29_9==RULE_IDENTIFIER) ) {s = 16;}
                        else if ( (LA29_9==Async) ) {s = 25;}
                        else if ( (LA29_9==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_23 = input.LA(1);
                        int index29_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_23==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_23==Private) ) {s = 58;}
                        else if ( (LA29_23==Project) ) {s = 59;}
                        else if ( (LA29_23==Protected) ) {s = 60;}
                        else if ( (LA29_23==Public) ) {s = 61;}
                        else if ( (LA29_23==External) ) {s = 62;}
                        else if ( (LA29_23==Abstract) ) {s = 63;}
                        else if ( (LA29_23==Static) ) {s = 64;}
                        else if ( (LA29_23==Const) ) {s = 9;}
                        else if ( (LA29_23==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_23==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_23==EOF||LA29_23==Let||LA29_23==Var||LA29_23==Comma||(LA29_23>=Colon && LA29_23<=Semicolon)||LA29_23==EqualsSign||LA29_23==RightCurlyBracket||LA29_23==RULE_ML_COMMENT||LA29_23==RULE_EOL) ) {s = 16;}
                        else if ( (LA29_23==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_23==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_23);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_8 = input.LA(1);
                        int index29_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_8==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_8==Private) ) {s = 2;}
                        else if ( (LA29_8==Project) ) {s = 3;}
                        else if ( (LA29_8==Protected) ) {s = 4;}
                        else if ( (LA29_8==Public) ) {s = 5;}
                        else if ( (LA29_8==External) ) {s = 6;}
                        else if ( (LA29_8==Abstract) ) {s = 7;}
                        else if ( (LA29_8==Static) ) {s = 8;}
                        else if ( (LA29_8==Const) ) {s = 9;}
                        else if ( (LA29_8==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_8==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_8==Let||LA29_8==Var) ) {s = 16;}
                        else if ( (LA29_8==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_8==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_8==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_18 = input.LA(1);
                        int index29_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_18==EOF||LA29_18==Let||LA29_18==Var||LA29_18==Comma||(LA29_18>=Colon && LA29_18<=Semicolon)||LA29_18==EqualsSign||LA29_18==RightCurlyBracket||LA29_18==RULE_ML_COMMENT||LA29_18==RULE_EOL) ) {s = 16;}
                        else if ( (LA29_18==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_18==Private) ) {s = 58;}
                        else if ( (LA29_18==Project) ) {s = 59;}
                        else if ( (LA29_18==Protected) ) {s = 60;}
                        else if ( (LA29_18==Public) ) {s = 61;}
                        else if ( (LA29_18==External) ) {s = 62;}
                        else if ( (LA29_18==Abstract) ) {s = 63;}
                        else if ( (LA29_18==Static) ) {s = 64;}
                        else if ( (LA29_18==Const) ) {s = 9;}
                        else if ( (LA29_18==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_18==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_18==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_18==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA29_6 = input.LA(1);
                        int index29_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_6==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_6==Private) ) {s = 2;}
                        else if ( (LA29_6==Project) ) {s = 3;}
                        else if ( (LA29_6==Protected) ) {s = 4;}
                        else if ( (LA29_6==Public) ) {s = 5;}
                        else if ( (LA29_6==External) ) {s = 6;}
                        else if ( (LA29_6==Abstract) ) {s = 7;}
                        else if ( (LA29_6==Static) ) {s = 8;}
                        else if ( (LA29_6==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_6==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_6==Const) ) {s = 9;}
                        else if ( (LA29_6==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_6==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_6==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_6==Let||LA29_6==Var) ) {s = 16;}
                        input.seek(index29_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA29_4 = input.LA(1);
                        int index29_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_4==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_4==Private) ) {s = 2;}
                        else if ( (LA29_4==Project) ) {s = 3;}
                        else if ( (LA29_4==Protected) ) {s = 4;}
                        else if ( (LA29_4==Public) ) {s = 5;}
                        else if ( (LA29_4==External) ) {s = 6;}
                        else if ( (LA29_4==Abstract) ) {s = 7;}
                        else if ( (LA29_4==Static) ) {s = 8;}
                        else if ( (LA29_4==Const) ) {s = 9;}
                        else if ( (LA29_4==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_4==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_4==Let||LA29_4==Var) ) {s = 16;}
                        else if ( (LA29_4==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_4==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_4==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_4);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA29_61 = input.LA(1);
                        int index29_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_61==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_61==Private) ) {s = 58;}
                        else if ( (LA29_61==Project) ) {s = 59;}
                        else if ( (LA29_61==Protected) ) {s = 60;}
                        else if ( (LA29_61==Public) ) {s = 61;}
                        else if ( (LA29_61==External) ) {s = 62;}
                        else if ( (LA29_61==Abstract) ) {s = 63;}
                        else if ( (LA29_61==Static) ) {s = 64;}
                        else if ( (LA29_61==Const) ) {s = 9;}
                        else if ( (LA29_61==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_61==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_61==Let||LA29_61==Var) ) {s = 16;}
                        else if ( (LA29_61==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_61==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_61);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA29_2 = input.LA(1);
                        int index29_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_2==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_2==Private) ) {s = 2;}
                        else if ( (LA29_2==Project) ) {s = 3;}
                        else if ( (LA29_2==Protected) ) {s = 4;}
                        else if ( (LA29_2==Public) ) {s = 5;}
                        else if ( (LA29_2==External) ) {s = 6;}
                        else if ( (LA29_2==Abstract) ) {s = 7;}
                        else if ( (LA29_2==Static) ) {s = 8;}
                        else if ( (LA29_2==Const) ) {s = 9;}
                        else if ( (LA29_2==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_2==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_2==Let||LA29_2==Var) ) {s = 16;}
                        else if ( (LA29_2==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_2==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_2==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_2);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA29_60 = input.LA(1);
                        int index29_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_60==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_60==Private) ) {s = 58;}
                        else if ( (LA29_60==Project) ) {s = 59;}
                        else if ( (LA29_60==Protected) ) {s = 60;}
                        else if ( (LA29_60==Public) ) {s = 61;}
                        else if ( (LA29_60==External) ) {s = 62;}
                        else if ( (LA29_60==Abstract) ) {s = 63;}
                        else if ( (LA29_60==Static) ) {s = 64;}
                        else if ( (LA29_60==Const) ) {s = 9;}
                        else if ( (LA29_60==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_60==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_60==Let||LA29_60==Var) ) {s = 16;}
                        else if ( (LA29_60==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_60==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_60);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA29_63 = input.LA(1);
                        int index29_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_63==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_63==Private) ) {s = 58;}
                        else if ( (LA29_63==Project) ) {s = 59;}
                        else if ( (LA29_63==Protected) ) {s = 60;}
                        else if ( (LA29_63==Public) ) {s = 61;}
                        else if ( (LA29_63==External) ) {s = 62;}
                        else if ( (LA29_63==Abstract) ) {s = 63;}
                        else if ( (LA29_63==Static) ) {s = 64;}
                        else if ( (LA29_63==Const) ) {s = 9;}
                        else if ( (LA29_63==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_63==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_63==Let||LA29_63==Var) ) {s = 16;}
                        else if ( (LA29_63==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_63==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_63);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA29_20 = input.LA(1);
                        int index29_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_20==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_20==Private) ) {s = 58;}
                        else if ( (LA29_20==Project) ) {s = 59;}
                        else if ( (LA29_20==Protected) ) {s = 60;}
                        else if ( (LA29_20==Public) ) {s = 61;}
                        else if ( (LA29_20==External) ) {s = 62;}
                        else if ( (LA29_20==Abstract) ) {s = 63;}
                        else if ( (LA29_20==Static) ) {s = 64;}
                        else if ( (LA29_20==Const) ) {s = 9;}
                        else if ( (LA29_20==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_20==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_20==EOF||LA29_20==Let||LA29_20==Var||LA29_20==Comma||(LA29_20>=Colon && LA29_20<=Semicolon)||LA29_20==EqualsSign||LA29_20==RightCurlyBracket||LA29_20==RULE_ML_COMMENT||LA29_20==RULE_EOL) ) {s = 16;}
                        else if ( (LA29_20==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_20==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_20);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA29_25 = input.LA(1);
                        int index29_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_25==RULE_NO_LINE_TERMINATOR) && (synpred17_InternalN4JSParser())) {s = 65;}
                        else if ( (LA29_25==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_25==EOF||LA29_25==Comma||(LA29_25>=Colon && LA29_25<=Semicolon)||LA29_25==EqualsSign||LA29_25==RightCurlyBracket||LA29_25==RULE_ML_COMMENT||LA29_25==RULE_EOL) ) {s = 16;}
                        input.seek(index29_25);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA29_58 = input.LA(1);
                        int index29_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_58==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_58==Private) ) {s = 58;}
                        else if ( (LA29_58==Project) ) {s = 59;}
                        else if ( (LA29_58==Protected) ) {s = 60;}
                        else if ( (LA29_58==Public) ) {s = 61;}
                        else if ( (LA29_58==External) ) {s = 62;}
                        else if ( (LA29_58==Abstract) ) {s = 63;}
                        else if ( (LA29_58==Static) ) {s = 64;}
                        else if ( (LA29_58==Const) ) {s = 9;}
                        else if ( (LA29_58==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_58==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_58==Let||LA29_58==Var) ) {s = 16;}
                        else if ( (LA29_58==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_58==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_58);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA29_7 = input.LA(1);
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_7==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_7==Private) ) {s = 2;}
                        else if ( (LA29_7==Project) ) {s = 3;}
                        else if ( (LA29_7==Protected) ) {s = 4;}
                        else if ( (LA29_7==Public) ) {s = 5;}
                        else if ( (LA29_7==External) ) {s = 6;}
                        else if ( (LA29_7==Abstract) ) {s = 7;}
                        else if ( (LA29_7==Static) ) {s = 8;}
                        else if ( (LA29_7==Const) ) {s = 9;}
                        else if ( (LA29_7==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_7==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_7==Let||LA29_7==Var) ) {s = 16;}
                        else if ( (LA29_7==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_7==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_7==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA29_24 = input.LA(1);
                        int index29_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_24==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_24==Private) ) {s = 58;}
                        else if ( (LA29_24==Project) ) {s = 59;}
                        else if ( (LA29_24==Protected) ) {s = 60;}
                        else if ( (LA29_24==Public) ) {s = 61;}
                        else if ( (LA29_24==External) ) {s = 62;}
                        else if ( (LA29_24==Abstract) ) {s = 63;}
                        else if ( (LA29_24==Static) ) {s = 64;}
                        else if ( (LA29_24==Const) ) {s = 9;}
                        else if ( (LA29_24==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_24==EOF||LA29_24==Let||LA29_24==Var||LA29_24==Comma||(LA29_24>=Colon && LA29_24<=Semicolon)||LA29_24==EqualsSign||LA29_24==RightCurlyBracket||LA29_24==RULE_ML_COMMENT||LA29_24==RULE_EOL) ) {s = 16;}
                        else if ( (LA29_24==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_24==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_24==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_24);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA29_62 = input.LA(1);
                        int index29_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_62==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_62==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_62==Private) ) {s = 58;}
                        else if ( (LA29_62==Project) ) {s = 59;}
                        else if ( (LA29_62==Protected) ) {s = 60;}
                        else if ( (LA29_62==Public) ) {s = 61;}
                        else if ( (LA29_62==External) ) {s = 62;}
                        else if ( (LA29_62==Abstract) ) {s = 63;}
                        else if ( (LA29_62==Static) ) {s = 64;}
                        else if ( (LA29_62==Const) ) {s = 9;}
                        else if ( (LA29_62==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_62==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_62==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_62==Let||LA29_62==Var) ) {s = 16;}
                        input.seek(index29_62);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA29_5 = input.LA(1);
                        int index29_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_5==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_5==Private) ) {s = 2;}
                        else if ( (LA29_5==Project) ) {s = 3;}
                        else if ( (LA29_5==Protected) ) {s = 4;}
                        else if ( (LA29_5==Public) ) {s = 5;}
                        else if ( (LA29_5==External) ) {s = 6;}
                        else if ( (LA29_5==Abstract) ) {s = 7;}
                        else if ( (LA29_5==Static) ) {s = 8;}
                        else if ( (LA29_5==Const) ) {s = 9;}
                        else if ( (LA29_5==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_5==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_5==Let||LA29_5==Var) ) {s = 16;}
                        else if ( (LA29_5==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_5==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_5==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        input.seek(index29_5);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA29_22 = input.LA(1);
                        int index29_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_22==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_22==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_22==Private) ) {s = 58;}
                        else if ( (LA29_22==Project) ) {s = 59;}
                        else if ( (LA29_22==Protected) ) {s = 60;}
                        else if ( (LA29_22==Public) ) {s = 61;}
                        else if ( (LA29_22==External) ) {s = 62;}
                        else if ( (LA29_22==Abstract) ) {s = 63;}
                        else if ( (LA29_22==Static) ) {s = 64;}
                        else if ( (LA29_22==Const) ) {s = 9;}
                        else if ( (LA29_22==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_22==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_22==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_22==EOF||LA29_22==Let||LA29_22==Var||LA29_22==Comma||(LA29_22>=Colon && LA29_22<=Semicolon)||LA29_22==EqualsSign||LA29_22==RightCurlyBracket||LA29_22==RULE_ML_COMMENT||LA29_22==RULE_EOL) ) {s = 16;}
                        input.seek(index29_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA29_3 = input.LA(1);
                        int index29_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_3==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_3==Private) ) {s = 2;}
                        else if ( (LA29_3==Project) ) {s = 3;}
                        else if ( (LA29_3==Protected) ) {s = 4;}
                        else if ( (LA29_3==Public) ) {s = 5;}
                        else if ( (LA29_3==External) ) {s = 6;}
                        else if ( (LA29_3==Abstract) ) {s = 7;}
                        else if ( (LA29_3==Static) ) {s = 8;}
                        else if ( (LA29_3==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_3==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_3==Const) ) {s = 9;}
                        else if ( (LA29_3==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_3==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_3==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_3==Let||LA29_3==Var) ) {s = 16;}
                        input.seek(index29_3);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA29_0 = input.LA(1);
                        int index29_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA29_0==CommercialAt) && (synpred12_InternalN4JSParser())) {s = 1;}
                        else if ( (LA29_0==Private) ) {s = 2;}
                        else if ( (LA29_0==Project) ) {s = 3;}
                        else if ( (LA29_0==Protected) ) {s = 4;}
                        else if ( (LA29_0==Public) ) {s = 5;}
                        else if ( (LA29_0==External) ) {s = 6;}
                        else if ( (LA29_0==Abstract) ) {s = 7;}
                        else if ( (LA29_0==Static) ) {s = 8;}
                        else if ( (LA29_0==Const) ) {s = 9;}
                        else if ( (LA29_0==Class) && (synpred13_InternalN4JSParser())) {s = 10;}
                        else if ( (LA29_0==Interface) && (synpred14_InternalN4JSParser())) {s = 11;}
                        else if ( (LA29_0==Enum) && (synpred15_InternalN4JSParser())) {s = 12;}
                        else if ( (LA29_0==Type) && (synpred16_InternalN4JSParser())) {s = 13;}
                        else if ( (LA29_0==Async) && (synpred17_InternalN4JSParser())) {s = 14;}
                        else if ( (LA29_0==Function) && (synpred17_InternalN4JSParser())) {s = 15;}
                        else if ( (LA29_0==Let||LA29_0==Var) ) {s = 16;}
                        input.seek(index29_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_31s = "\36\uffff";
    static final String dfa_32s = "\16\uffff\11\12\7\uffff";
    static final String dfa_33s = "\10\11\1\4\5\uffff\1\4\7\11\1\17\7\11";
    static final String dfa_34s = "\10\100\1\176\5\uffff\11\u0099\7\100";
    static final String dfa_35s = "\11\uffff\1\1\1\2\1\3\1\4\1\5\20\uffff";
    static final String dfa_36s = "\36\uffff}>";
    static final String[] dfa_37s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\4\uffff\1\15\10\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\16\1\21\1\24\2\uffff\1\23\1\11\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\12\1\uffff\1\26\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\41\uffff\1\11\4\uffff\1\12\1\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\31\1\34\2\uffff\1\33\1\11\3\uffff\1\27\1\30\3\uffff\1\32\1\uffff\1\35\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12"
    };
    static final short[] dfa_31 = DFA.unpackEncodedString(dfa_31s);
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final char[] dfa_33 = DFA.unpackEncodedStringToUnsignedChars(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[][] dfa_37 = unpackEncodedStringArray(dfa_37s);
    class DFA46 extends DFA {
        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = dfa_31;
            this.eof = dfa_32;
            this.min = dfa_33;
            this.max = dfa_34;
            this.accept = dfa_35;
            this.special = dfa_36;
            this.transition = dfa_37;
        }
        public String getDescription() {
            return "811:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_2_0_0_6= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_2_0_1_6= ruleInterfaceExtendsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) | ( ( ( ruleN4ModifierWithoutConst ) )* TypeKeyword_1_4_2= Type ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_4_4= ruleTypeVariables )? EqualsSignKeyword_1_4_5= EqualsSign ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_6_0= ruleTypeRef ) ) ) )";
        }
    }
    static final String dfa_38s = "\14\uffff";
    static final String dfa_39s = "\4\uffff\10\1";
    static final String dfa_40s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_41s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_42s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_43s = "\14\uffff}>";
    static final String[] dfa_44s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };
    static final short[] dfa_38 = DFA.unpackEncodedString(dfa_38s);
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final char[] dfa_40 = DFA.unpackEncodedStringToUnsignedChars(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[][] dfa_44 = unpackEncodedStringArray(dfa_44s);
    class DFA31 extends DFA {
        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = dfa_38;
            this.eof = dfa_39;
            this.min = dfa_40;
            this.max = dfa_41;
            this.accept = dfa_42;
            this.special = dfa_43;
            this.transition = dfa_44;
        }
        public String getDescription() {
            return "()* loopback of 823:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA41 extends DFA {
        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "857:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsImplementsParserRuleCall_1_2_0_0_6= ruleClassExtendsImplements )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceExtendsListParserRuleCall_1_2_0_1_6= ruleInterfaceExtendsList )? ) )";
        }
    }
    static final String dfa_45s = "\1\uffff\33\35\2\uffff";
    static final String dfa_46s = "\1\4\33\122\2\uffff";
    static final String dfa_47s = "\1\176\33\160\2\uffff";
    static final String dfa_48s = "\34\uffff\1\2\1\1";
    static final String[] dfa_49s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };
    static final short[] dfa_45 = DFA.unpackEncodedString(dfa_45s);
    static final char[] dfa_46 = DFA.unpackEncodedStringToUnsignedChars(dfa_46s);
    static final char[] dfa_47 = DFA.unpackEncodedStringToUnsignedChars(dfa_47s);
    static final short[] dfa_48 = DFA.unpackEncodedString(dfa_48s);
    static final short[][] dfa_49 = unpackEncodedStringArray(dfa_49s);
    class DFA54 extends DFA {
        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = dfa_31;
            this.eof = dfa_45;
            this.min = dfa_46;
            this.max = dfa_47;
            this.accept = dfa_48;
            this.special = dfa_36;
            this.transition = dfa_49;
        }
        public String getDescription() {
            return "1147:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_50s = "\135\uffff";
    static final String dfa_51s = "\1\2\1\uffff\1\7\4\uffff\1\134\125\uffff";
    static final String dfa_52s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_53s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\125\uffff";
    static final String dfa_54s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\125\1";
    static final String dfa_55s = "\1\3\1\1\1\2\2\uffff\1\4\1\uffff\1\0\125\uffff}>";
    static final String[] dfa_56s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\2\6\6\uffff\1\6\1\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\12\uffff\2\6\7\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\50\1\44\1\54\1\uffff\1\52\1\23\1\14\1\17\1\120\1\127\1\16\1\32\1\132\2\uffff\1\12\1\13\1\103\1\27\1\26\1\15\1\122\1\20\1\124\1\46\1\105\1\31\1\53\1\121\1\uffff\1\22\1\21\1\73\1\61\1\125\1\47\1\116\1\37\1\51\1\133\1\131\1\24\1\43\1\75\1\60\1\72\1\25\1\104\1\123\4\uffff\1\117\1\40\1\34\1\57\1\55\1\41\1\126\1\33\5\uffff\1\106\1\uffff\1\107\1\77\6\uffff\1\10\1\uffff\1\42\1\115\1\114\1\uffff\1\45\2\uffff\1\113\2\uffff\1\56\2\uffff\1\110\1\uffff\1\111\1\uffff\1\76\1\uffff\1\35\1\62\3\uffff\1\11\1\100\2\uffff\1\30\1\uffff\1\130\1\112\3\uffff\1\63\1\uffff\1\70\1\65\1\66\1\67\1\uffff\1\71\1\uffff\1\36\2\uffff\1\74\12\uffff\1\102\1\101\7\uffff\1\64",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final char[] dfa_52 = DFA.unpackEncodedStringToUnsignedChars(dfa_52s);
    static final char[] dfa_53 = DFA.unpackEncodedStringToUnsignedChars(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[] dfa_55 = DFA.unpackEncodedString(dfa_55s);
    static final short[][] dfa_56 = unpackEncodedStringArray(dfa_56s);
    class DFA57 extends DFA {
        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = dfa_50;
            this.eof = dfa_51;
            this.min = dfa_52;
            this.max = dfa_53;
            this.accept = dfa_54;
            this.special = dfa_55;
            this.transition = dfa_56;
        }
        public String getDescription() {
            return "1285:2: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_7 = input.LA(1);
                        int index57_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA57_7==EOF) && (synpred21_InternalN4JSParser())) {s = 92;}
                        input.seek(index57_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA57_1 = input.LA(1);
                        int index57_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index57_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA57_2 = input.LA(1);
                        int index57_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA57_2==EOF) ) {s = 7;}
                        else if ((LA57_2>=-1 && LA57_2<=149 && (s=T2S.M_3[LA57_2-(-1)])>=0) && (synpred21_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index57_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA57_0 = input.LA(1);
                        int index57_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA57_0==Semicolon) ) {s = 1;}
                        else if ( (LA57_0==EOF) ) {s = 2;}
                        else if ( (LA57_0==RULE_EOL) && (synpred21_InternalN4JSParser())) {s = 3;}
                        else if ( (LA57_0==RULE_ML_COMMENT) && (synpred21_InternalN4JSParser())) {s = 4;}
                        else if ( (LA57_0==RightCurlyBracket) ) {s = 5;}
                        else if ( ((LA57_0>=Intersection && LA57_0<=Implements)||(LA57_0>=Promisify && LA57_0<=Default)||(LA57_0>=Private && LA57_0<=Break)||(LA57_0>=Class && LA57_0<=With)||(LA57_0>=For && LA57_0<=Var)||LA57_0==PlusSignPlusSign||(LA57_0>=HyphenMinusHyphenMinus && LA57_0<=SolidusEqualsSign)||LA57_0==CommercialAtCommercialAt||(LA57_0>=As && LA57_0<=If)||LA57_0==Of||LA57_0==ExclamationMark||LA57_0==LeftParenthesis||LA57_0==PlusSign||LA57_0==HyphenMinus||LA57_0==Solidus||LA57_0==LessThanSign||(LA57_0>=CommercialAt && LA57_0<=LeftSquareBracket)||LA57_0==LeftCurlyBracket||LA57_0==Tilde||LA57_0==RULE_DOUBLE||(LA57_0>=RULE_HEX_INT && LA57_0<=RULE_LEGACY_OCTAL_INT)||LA57_0==RULE_SCIENTIFIC_INT||LA57_0==RULE_IDENTIFIER||LA57_0==RULE_STRING||(LA57_0>=RULE_TEMPLATE_HEAD && LA57_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA57_0==RULE_INT) ) {s = 6;}
                        input.seek(index57_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA57_5 = input.LA(1);
                        int index57_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred21_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index57_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_57s = "\131\uffff";
    static final String dfa_58s = "\1\2\130\uffff";
    static final String dfa_59s = "\1\4\1\0\127\uffff";
    static final String dfa_60s = "\1\u0099\1\0\127\uffff";
    static final String dfa_61s = "\2\uffff\1\2\125\uffff\1\1";
    static final String dfa_62s = "\1\uffff\1\0\127\uffff}>";
    static final String[] dfa_63s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final char[] dfa_59 = DFA.unpackEncodedStringToUnsignedChars(dfa_59s);
    static final char[] dfa_60 = DFA.unpackEncodedStringToUnsignedChars(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final short[] dfa_62 = DFA.unpackEncodedString(dfa_62s);
    static final short[][] dfa_63 = unpackEncodedStringArray(dfa_63s);
    class DFA85 extends DFA {
        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = dfa_57;
            this.eof = dfa_58;
            this.min = dfa_59;
            this.max = dfa_60;
            this.accept = dfa_61;
            this.special = dfa_62;
            this.transition = dfa_63;
        }
        public String getDescription() {
            return "1715:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_1 = input.LA(1);
                        int index85_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred29_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index85_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA86 extends DFA {
        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = dfa_57;
            this.eof = dfa_58;
            this.min = dfa_59;
            this.max = dfa_60;
            this.accept = dfa_61;
            this.special = dfa_62;
            this.transition = dfa_63;
        }
        public String getDescription() {
            return "1733:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_1 = input.LA(1);
                        int index86_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred30_InternalN4JSParser()) ) {s = 88;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index86_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_64s = "\100\uffff";
    static final String dfa_65s = "\1\4\1\0\76\uffff";
    static final String dfa_66s = "\1\u0095\1\0\76\uffff";
    static final String dfa_67s = "\2\uffff\1\2\74\uffff\1\1";
    static final String dfa_68s = "\1\uffff\1\0\76\uffff}>";
    static final String[] dfa_69s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final char[] dfa_65 = DFA.unpackEncodedStringToUnsignedChars(dfa_65s);
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[][] dfa_69 = unpackEncodedStringArray(dfa_69s);
    class DFA92 extends DFA {
        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = dfa_64;
            this.eof = dfa_64;
            this.min = dfa_65;
            this.max = dfa_66;
            this.accept = dfa_67;
            this.special = dfa_68;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "2030:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA96 extends DFA {
        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = dfa_64;
            this.eof = dfa_64;
            this.min = dfa_65;
            this.max = dfa_66;
            this.accept = dfa_67;
            this.special = dfa_68;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "2179:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_1 = input.LA(1);
                        int index96_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred47_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index96_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA100 extends DFA {
        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_64;
            this.eof = dfa_64;
            this.min = dfa_65;
            this.max = dfa_66;
            this.accept = dfa_67;
            this.special = dfa_68;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "2328:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_1 = input.LA(1);
                        int index100_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index100_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA104 extends DFA {
        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = dfa_64;
            this.eof = dfa_64;
            this.min = dfa_65;
            this.max = dfa_66;
            this.accept = dfa_67;
            this.special = dfa_68;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "2477:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_1 = input.LA(1);
                        int index104_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSParser()) ) {s = 63;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index104_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_70s = "\121\uffff";
    static final String dfa_71s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_72s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\60\uffff";
    static final String dfa_73s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_74s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\60\uffff}>";
    static final String[] dfa_75s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\41\1\uffff\1\41\1\5\1\110\1\10\1\112\1\27\1\41\1\12\1\35\1\107\1\uffff\1\41\1\11\2\41\1\113\1\31\1\103\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\111\4\uffff\1\103\1\21\1\15\1\41\1\40\1\22\1\114\1\14\5\uffff\1\41\1\uffff\2\41\10\uffff\1\23\1\103\1\102\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\12\uffff\2\41\7\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final char[] dfa_72 = DFA.unpackEncodedStringToUnsignedChars(dfa_72s);
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final short[][] dfa_75 = unpackEncodedStringArray(dfa_75s);
    class DFA133 extends DFA {
        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "3095:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_0 = input.LA(1);
                        int index133_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA133_0>=10 && LA133_0<=110 && (s=T2S.M_4[LA133_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA133_0==Var) && (synpred66_InternalN4JSParser())) {s = 12;}
                        else if ((LA133_0>=4 && LA133_0<=126 && (s=T2S.M_5[LA133_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA133_0==Delete||LA133_0==Import||LA133_0==Typeof||LA133_0==Class||(LA133_0>=False && LA133_0<=Super)||(LA133_0>=Null && LA133_0<=True)||LA133_0==Void||LA133_0==New||LA133_0==PlusSignPlusSign||(LA133_0>=HyphenMinusHyphenMinus && LA133_0<=SolidusEqualsSign)||LA133_0==ExclamationMark||LA133_0==LeftParenthesis||LA133_0==PlusSign||LA133_0==HyphenMinus||LA133_0==Solidus||LA133_0==LessThanSign||(LA133_0>=CommercialAt && LA133_0<=LeftSquareBracket)||LA133_0==Tilde||LA133_0==RULE_DOUBLE||(LA133_0>=RULE_HEX_INT && LA133_0<=RULE_LEGACY_OCTAL_INT)||LA133_0==RULE_SCIENTIFIC_INT||LA133_0==RULE_STRING||(LA133_0>=RULE_TEMPLATE_HEAD && LA133_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA133_0==RULE_INT) ) {s = 33;}
                        else if ( (LA133_0==If) ) {s = 66;}
                        else if ( (LA133_0==While||LA133_0==For||LA133_0==Do) ) {s = 67;}
                        else if ( (LA133_0==Continue) ) {s = 70;}
                        else if ( (LA133_0==Break) ) {s = 71;}
                        else if ( (LA133_0==Return) ) {s = 72;}
                        else if ( (LA133_0==With) ) {s = 73;}
                        else if ( (LA133_0==Switch) ) {s = 74;}
                        else if ( (LA133_0==Throw) ) {s = 75;}
                        else if ( (LA133_0==Try) ) {s = 76;}
                        else if ( (LA133_0==Debugger) ) {s = 77;}
                        input.seek(index133_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA133_1 = input.LA(1);
                        int index133_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA133_2 = input.LA(1);
                        int index133_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA133_3 = input.LA(1);
                        int index133_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA133_4 = input.LA(1);
                        int index133_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA133_5 = input.LA(1);
                        int index133_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA133_6 = input.LA(1);
                        int index133_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA133_7 = input.LA(1);
                        int index133_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA133_8 = input.LA(1);
                        int index133_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA133_9 = input.LA(1);
                        int index133_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred66_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index133_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA133_10 = input.LA(1);
                        int index133_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA133_11 = input.LA(1);
                        int index133_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA133_13 = input.LA(1);
                        int index133_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred66_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA133_15 = input.LA(1);
                        int index133_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA133_16 = input.LA(1);
                        int index133_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA133_17 = input.LA(1);
                        int index133_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA133_18 = input.LA(1);
                        int index133_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA133_19 = input.LA(1);
                        int index133_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA133_20 = input.LA(1);
                        int index133_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA133_21 = input.LA(1);
                        int index133_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA133_22 = input.LA(1);
                        int index133_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA133_23 = input.LA(1);
                        int index133_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA133_24 = input.LA(1);
                        int index133_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA133_25 = input.LA(1);
                        int index133_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA133_26 = input.LA(1);
                        int index133_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA133_27 = input.LA(1);
                        int index133_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA133_28 = input.LA(1);
                        int index133_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA133_29 = input.LA(1);
                        int index133_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA133_30 = input.LA(1);
                        int index133_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA133_31 = input.LA(1);
                        int index133_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA133_32 = input.LA(1);
                        int index133_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred67_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 33;}
                        input.seek(index133_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_76s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_77s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\61\uffff";
    static final String dfa_78s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\41\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_79s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\61\uffff}>";
    static final String[] dfa_80s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\106\1\115\1\6\1\13\3\uffff\1\2\1\3\1\40\1\uffff\1\40\1\5\1\110\1\10\1\112\1\26\1\40\1\12\1\34\1\107\1\uffff\1\40\1\11\2\40\1\113\1\30\1\103\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\111\4\uffff\1\103\1\20\1\15\1\40\1\37\1\21\1\114\1\14\5\uffff\1\40\1\uffff\2\40\10\uffff\1\22\1\103\1\102\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\12\uffff\2\40\7\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final char[] dfa_77 = DFA.unpackEncodedStringToUnsignedChars(dfa_77s);
    static final short[] dfa_78 = DFA.unpackEncodedString(dfa_78s);
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final short[][] dfa_80 = unpackEncodedStringArray(dfa_80s);
    class DFA134 extends DFA {
        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_78;
            this.special = dfa_79;
            this.transition = dfa_80;
        }
        public String getDescription() {
            return "3174:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_0 = input.LA(1);
                        int index134_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA134_0>=10 && LA134_0<=110 && (s=T2S.M_4[LA134_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA134_0==Var) && (synpred70_InternalN4JSParser())) {s = 12;}
                        else if ((LA134_0>=4 && LA134_0<=126 && (s=T2S.M_7[LA134_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA134_0==Delete||LA134_0==Import||LA134_0==Typeof||LA134_0==Class||(LA134_0>=False && LA134_0<=Super)||LA134_0==Yield||(LA134_0>=Null && LA134_0<=True)||LA134_0==Void||LA134_0==New||LA134_0==PlusSignPlusSign||(LA134_0>=HyphenMinusHyphenMinus && LA134_0<=SolidusEqualsSign)||LA134_0==ExclamationMark||LA134_0==LeftParenthesis||LA134_0==PlusSign||LA134_0==HyphenMinus||LA134_0==Solidus||LA134_0==LessThanSign||(LA134_0>=CommercialAt && LA134_0<=LeftSquareBracket)||LA134_0==Tilde||LA134_0==RULE_DOUBLE||(LA134_0>=RULE_HEX_INT && LA134_0<=RULE_LEGACY_OCTAL_INT)||LA134_0==RULE_SCIENTIFIC_INT||LA134_0==RULE_STRING||(LA134_0>=RULE_TEMPLATE_HEAD && LA134_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA134_0==RULE_INT) ) {s = 32;}
                        else if ( (LA134_0==If) ) {s = 66;}
                        else if ( (LA134_0==While||LA134_0==For||LA134_0==Do) ) {s = 67;}
                        else if ( (LA134_0==Continue) ) {s = 70;}
                        else if ( (LA134_0==Break) ) {s = 71;}
                        else if ( (LA134_0==Return) ) {s = 72;}
                        else if ( (LA134_0==With) ) {s = 73;}
                        else if ( (LA134_0==Switch) ) {s = 74;}
                        else if ( (LA134_0==Throw) ) {s = 75;}
                        else if ( (LA134_0==Try) ) {s = 76;}
                        else if ( (LA134_0==Debugger) ) {s = 77;}
                        input.seek(index134_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_1 = input.LA(1);
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred68_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA134_2 = input.LA(1);
                        int index134_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA134_3 = input.LA(1);
                        int index134_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA134_4 = input.LA(1);
                        int index134_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA134_5 = input.LA(1);
                        int index134_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA134_6 = input.LA(1);
                        int index134_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA134_7 = input.LA(1);
                        int index134_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA134_8 = input.LA(1);
                        int index134_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA134_9 = input.LA(1);
                        int index134_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred70_InternalN4JSParser()) ) {s = 12;}
                        input.seek(index134_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA134_10 = input.LA(1);
                        int index134_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA134_11 = input.LA(1);
                        int index134_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred69_InternalN4JSParser()) ) {s = 79;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA134_13 = input.LA(1);
                        int index134_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred70_InternalN4JSParser()) ) {s = 12;}
                        else if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA134_15 = input.LA(1);
                        int index134_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA134_16 = input.LA(1);
                        int index134_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA134_17 = input.LA(1);
                        int index134_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA134_18 = input.LA(1);
                        int index134_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA134_19 = input.LA(1);
                        int index134_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA134_20 = input.LA(1);
                        int index134_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA134_21 = input.LA(1);
                        int index134_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA134_22 = input.LA(1);
                        int index134_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA134_23 = input.LA(1);
                        int index134_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA134_24 = input.LA(1);
                        int index134_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA134_25 = input.LA(1);
                        int index134_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA134_26 = input.LA(1);
                        int index134_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA134_27 = input.LA(1);
                        int index134_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA134_28 = input.LA(1);
                        int index134_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA134_29 = input.LA(1);
                        int index134_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA134_30 = input.LA(1);
                        int index134_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA134_31 = input.LA(1);
                        int index134_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred71_InternalN4JSParser()) ) {s = 80;}
                        else if ( (true) ) {s = 32;}
                        input.seek(index134_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_81s = "\117\uffff";
    static final String dfa_82s = "\1\4\1\0\115\uffff";
    static final String dfa_83s = "\1\u0095\1\0\115\uffff";
    static final String dfa_84s = "\2\uffff\1\2\113\uffff\1\1";
    static final String dfa_85s = "\1\uffff\1\0\115\uffff}>";
    static final String[] dfa_86s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\1\uffff\12\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\2\2\10\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final char[] dfa_82 = DFA.unpackEncodedStringToUnsignedChars(dfa_82s);
    static final char[] dfa_83 = DFA.unpackEncodedStringToUnsignedChars(dfa_83s);
    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final short[] dfa_85 = DFA.unpackEncodedString(dfa_85s);
    static final short[][] dfa_86 = unpackEncodedStringArray(dfa_86s);
    class DFA135 extends DFA {
        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = dfa_81;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "3258:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_1 = input.LA(1);
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred72_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA136 extends DFA {
        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = dfa_81;
            this.eof = dfa_81;
            this.min = dfa_82;
            this.max = dfa_83;
            this.accept = dfa_84;
            this.special = dfa_85;
            this.transition = dfa_86;
        }
        public String getDescription() {
            return "3283:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_1 = input.LA(1);
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred73_InternalN4JSParser()) ) {s = 78;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA139 extends DFA {
        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = dfa_38;
            this.eof = dfa_39;
            this.min = dfa_40;
            this.max = dfa_41;
            this.accept = dfa_42;
            this.special = dfa_43;
            this.transition = dfa_44;
        }
        public String getDescription() {
            return "()* loopback of 3408:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_87s = "\35\uffff";
    static final String dfa_88s = "\1\4\34\uffff";
    static final String dfa_89s = "\1\176\34\uffff";
    static final String dfa_90s = "\1\uffff\33\2\1\1";
    static final String dfa_91s = "\1\0\34\uffff}>";
    static final String[] dfa_92s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final char[] dfa_88 = DFA.unpackEncodedStringToUnsignedChars(dfa_88s);
    static final char[] dfa_89 = DFA.unpackEncodedStringToUnsignedChars(dfa_89s);
    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final short[][] dfa_92 = unpackEncodedStringArray(dfa_92s);
    class DFA151 extends DFA {
        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "()* loopback of 3890:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_0 = input.LA(1);
                        int index151_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA151_0>=4 && LA151_0<=126 && (s=T2S.M_8[LA151_0-(4)])>=0) && (synpred90_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA151_0==CommercialAt) ) {s = 28;}
                        input.seek(index151_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA153 extends DFA {
        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "()* loopback of 3936:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA153_0>=4 && LA153_0<=126 && (s=T2S.M_8[LA153_0-(4)])>=0) && (synpred91_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA153_0==CommercialAt) ) {s = 28;}
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_93s = "\34\uffff";
    static final String dfa_94s = "\1\4\33\uffff";
    static final String dfa_95s = "\1\176\33\uffff";
    static final String dfa_96s = "\1\uffff\32\2\1\1";
    static final String dfa_97s = "\1\0\33\uffff}>";
    static final String[] dfa_98s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final char[] dfa_94 = DFA.unpackEncodedStringToUnsignedChars(dfa_94s);
    static final char[] dfa_95 = DFA.unpackEncodedStringToUnsignedChars(dfa_95s);
    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final short[] dfa_97 = DFA.unpackEncodedString(dfa_97s);
    static final short[][] dfa_98 = unpackEncodedStringArray(dfa_98s);
    class DFA155 extends DFA {
        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_94;
            this.max = dfa_95;
            this.accept = dfa_96;
            this.special = dfa_97;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "()* loopback of 3982:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_0 = input.LA(1);
                        int index155_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA155_0>=4 && LA155_0<=126 && (s=T2S.M_10[LA155_0-(4)])>=0) && (synpred92_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA155_0==CommercialAt) ) {s = 27;}
                        input.seek(index155_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA157 extends DFA {
        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_94;
            this.max = dfa_95;
            this.accept = dfa_96;
            this.special = dfa_97;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "()* loopback of 4028:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA157_0>=4 && LA157_0<=126 && (s=T2S.M_10[LA157_0-(4)])>=0) && (synpred93_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA157_0==CommercialAt) ) {s = 27;}
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA159 extends DFA {
        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "()* loopback of 4074:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_0 = input.LA(1);
                        int index159_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA159_0>=4 && LA159_0<=126 && (s=T2S.M_8[LA159_0-(4)])>=0) && (synpred94_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA159_0==CommercialAt) ) {s = 28;}
                        input.seek(index159_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA162 extends DFA {
        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = dfa_87;
            this.eof = dfa_87;
            this.min = dfa_88;
            this.max = dfa_89;
            this.accept = dfa_90;
            this.special = dfa_91;
            this.transition = dfa_92;
        }
        public String getDescription() {
            return "()* loopback of 4130:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_0 = input.LA(1);
                        int index162_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA162_0>=4 && LA162_0<=126 && (s=T2S.M_8[LA162_0-(4)])>=0) && (synpred95_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA162_0==CommercialAt) ) {s = 28;}
                        input.seek(index162_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA165 extends DFA {
        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_94;
            this.max = dfa_95;
            this.accept = dfa_96;
            this.special = dfa_97;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "()* loopback of 4186:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_0 = input.LA(1);
                        int index165_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA165_0>=4 && LA165_0<=126 && (s=T2S.M_10[LA165_0-(4)])>=0) && (synpred96_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA165_0==CommercialAt) ) {s = 27;}
                        input.seek(index165_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA168 extends DFA {
        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = dfa_93;
            this.eof = dfa_93;
            this.min = dfa_94;
            this.max = dfa_95;
            this.accept = dfa_96;
            this.special = dfa_97;
            this.transition = dfa_98;
        }
        public String getDescription() {
            return "()* loopback of 4242:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_0 = input.LA(1);
                        int index168_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA168_0>=4 && LA168_0<=126 && (s=T2S.M_10[LA168_0-(4)])>=0) && (synpred97_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA168_0==CommercialAt) ) {s = 27;}
                        input.seek(index168_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_99s = "\1\1\1\4\1\0\2\uffff\1\2\1\uffff\1\3\125\uffff}>";
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    class DFA177 extends DFA {
        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = dfa_50;
            this.eof = dfa_51;
            this.min = dfa_52;
            this.max = dfa_53;
            this.accept = dfa_54;
            this.special = dfa_99;
            this.transition = dfa_56;
        }
        public String getDescription() {
            return "4665:2: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_2 = input.LA(1);
                        int index177_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_2==EOF) ) {s = 7;}
                        else if ((LA177_2>=-1 && LA177_2<=149 && (s=T2S.M_3[LA177_2-(-1)])>=0) && (synpred104_InternalN4JSParser())) { /* 85 cases */ }
                        input.seek(index177_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA177_0 = input.LA(1);
                        int index177_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_0==Semicolon) ) {s = 1;}
                        else if ( (LA177_0==EOF) ) {s = 2;}
                        else if ( (LA177_0==RULE_EOL) && (synpred104_InternalN4JSParser())) {s = 3;}
                        else if ( (LA177_0==RULE_ML_COMMENT) && (synpred104_InternalN4JSParser())) {s = 4;}
                        else if ( (LA177_0==RightCurlyBracket) ) {s = 5;}
                        else if ( ((LA177_0>=Intersection && LA177_0<=Implements)||(LA177_0>=Promisify && LA177_0<=Default)||(LA177_0>=Private && LA177_0<=Break)||(LA177_0>=Class && LA177_0<=With)||(LA177_0>=For && LA177_0<=Var)||LA177_0==PlusSignPlusSign||(LA177_0>=HyphenMinusHyphenMinus && LA177_0<=SolidusEqualsSign)||LA177_0==CommercialAtCommercialAt||(LA177_0>=As && LA177_0<=If)||LA177_0==Of||LA177_0==ExclamationMark||LA177_0==LeftParenthesis||LA177_0==PlusSign||LA177_0==HyphenMinus||LA177_0==Solidus||LA177_0==LessThanSign||(LA177_0>=CommercialAt && LA177_0<=LeftSquareBracket)||LA177_0==LeftCurlyBracket||LA177_0==Tilde||LA177_0==RULE_DOUBLE||(LA177_0>=RULE_HEX_INT && LA177_0<=RULE_LEGACY_OCTAL_INT)||LA177_0==RULE_SCIENTIFIC_INT||LA177_0==RULE_IDENTIFIER||LA177_0==RULE_STRING||(LA177_0>=RULE_TEMPLATE_HEAD && LA177_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA177_0==RULE_INT) ) {s = 6;}
                        input.seek(index177_0);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA177_5 = input.LA(1);
                        int index177_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_InternalN4JSParser()) ) {s = 91;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index177_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA177_7 = input.LA(1);
                        int index177_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA177_7==EOF) && (synpred104_InternalN4JSParser())) {s = 92;}
                        input.seek(index177_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA177_1 = input.LA(1);
                        int index177_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred104_InternalN4JSParser()) ) {s = 4;}
                        else if ( (true) ) {s = 6;}
                        input.seek(index177_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_100s = "\103\uffff";
    static final String dfa_101s = "\1\4\1\0\101\uffff";
    static final String dfa_102s = "\1\u0095\1\0\101\uffff";
    static final String dfa_103s = "\2\uffff\1\2\77\uffff\1\1";
    static final String dfa_104s = "\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_105s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\2\2\10\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final char[] dfa_101 = DFA.unpackEncodedStringToUnsignedChars(dfa_101s);
    static final char[] dfa_102 = DFA.unpackEncodedStringToUnsignedChars(dfa_102s);
    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final short[] dfa_104 = DFA.unpackEncodedString(dfa_104s);
    static final short[][] dfa_105 = unpackEncodedStringArray(dfa_105s);
    class DFA197 extends DFA {
        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = dfa_100;
            this.eof = dfa_100;
            this.min = dfa_101;
            this.max = dfa_102;
            this.accept = dfa_103;
            this.special = dfa_104;
            this.transition = dfa_105;
        }
        public String getDescription() {
            return "4817:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_4_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_4_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_4_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_4_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_4_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_4_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_4_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_4_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_4_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_4_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_4_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_4_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_1 = input.LA(1);
                        int index197_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred106_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index197_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_106s = "\1\4\2\uffff\1\0\76\uffff";
    static final String dfa_107s = "\1\u0095\2\uffff\1\0\76\uffff";
    static final String dfa_108s = "\1\uffff\2\1\1\uffff\1\2\74\uffff\1\3";
    static final String dfa_109s = "\1\0\2\uffff\1\1\76\uffff}>";
    static final String[] dfa_110s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\101\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\7\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_106 = DFA.unpackEncodedStringToUnsignedChars(dfa_106s);
    static final char[] dfa_107 = DFA.unpackEncodedStringToUnsignedChars(dfa_107s);
    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final short[] dfa_109 = DFA.unpackEncodedString(dfa_109s);
    static final short[][] dfa_110 = unpackEncodedStringArray(dfa_110s);
    class DFA196 extends DFA {
        public DFA196(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 196;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_106;
            this.max = dfa_107;
            this.accept = dfa_108;
            this.special = dfa_109;
            this.transition = dfa_110;
        }
        public String getDescription() {
            return "4869:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_4_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_4_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_4_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_4_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_4_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_4_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_4_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_4_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_4_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA196_0 = input.LA(1);
                        int index196_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA196_0==Var) && (synpred107_InternalN4JSParser())) {s = 1;}
                        else if ( (LA196_0==Const) && (synpred107_InternalN4JSParser())) {s = 2;}
                        else if ( (LA196_0==Let) ) {s = 3;}
                        else if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||(LA196_0>=Import && LA196_0<=Public)||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||LA196_0==Get||(LA196_0>=New && LA196_0<=Set)||LA196_0==PlusSignPlusSign||(LA196_0>=HyphenMinusHyphenMinus && LA196_0<=SolidusEqualsSign)||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||LA196_0==PlusSign||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_HEX_INT && LA196_0<=RULE_LEGACY_OCTAL_INT)||LA196_0==RULE_SCIENTIFIC_INT||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_STRING||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_INT) ) {s = 4;}
                        else if ( (LA196_0==Semicolon) ) {s = 65;}
                        input.seek(index196_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA196_3 = input.LA(1);
                        int index196_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred107_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index196_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 196, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_111s = "\40\uffff";
    static final String dfa_112s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_113s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_114s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_115s = "\35\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_116s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final char[] dfa_112 = DFA.unpackEncodedStringToUnsignedChars(dfa_112s);
    static final char[] dfa_113 = DFA.unpackEncodedStringToUnsignedChars(dfa_113s);
    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final short[] dfa_115 = DFA.unpackEncodedString(dfa_115s);
    static final short[][] dfa_116 = unpackEncodedStringArray(dfa_116s);
    class DFA188 extends DFA {
        public DFA188(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 188;
            this.eot = dfa_111;
            this.eof = dfa_111;
            this.min = dfa_112;
            this.max = dfa_113;
            this.accept = dfa_114;
            this.special = dfa_115;
            this.transition = dfa_116;
        }
        public String getDescription() {
            return "4880:6: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_4_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_4_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_4_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_4_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA188_30 = input.LA(1);
                        int index188_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index188_30);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA188_29 = input.LA(1);
                        int index188_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_InternalN4JSParser()) ) {s = 31;}
                        else if ( (true) ) {s = 28;}
                        input.seek(index188_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 188, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_117s = "\1\4\77\uffff";
    static final String dfa_118s = "\1\u0095\77\uffff";
    static final String dfa_119s = "\1\uffff\76\1\1\2";
    static final String dfa_120s = "\1\0\77\uffff}>";
    static final String[] dfa_121s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\62\3\uffff\1\32\1\12\1\66\1\uffff\1\42\1\34\1\uffff\1\15\1\uffff\1\22\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\55\1\37\1\52\1\23\1\67\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\16\3\uffff\1\21\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_117 = DFA.unpackEncodedStringToUnsignedChars(dfa_117s);
    static final char[] dfa_118 = DFA.unpackEncodedStringToUnsignedChars(dfa_118s);
    static final short[] dfa_119 = DFA.unpackEncodedString(dfa_119s);
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);
    static final short[][] dfa_121 = unpackEncodedStringArray(dfa_121s);
    class DFA181 extends DFA {
        public DFA181(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 181;
            this.eot = dfa_64;
            this.eof = dfa_64;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_121;
        }
        public String getDescription() {
            return "5055:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA181_0 = input.LA(1);
                        int index181_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA181_0>=4 && LA181_0<=149 && (s=T2S.M_17[LA181_0-(4)])>=0) && (synpred109_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA181_0==RightParenthesis) ) {s = 63;}
                        input.seek(index181_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 181, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA216 extends DFA {
        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = dfa_100;
            this.eof = dfa_100;
            this.min = dfa_101;
            this.max = dfa_102;
            this.accept = dfa_103;
            this.special = dfa_104;
            this.transition = dfa_105;
        }
        public String getDescription() {
            return "5339:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_4_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_4_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_4_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_4_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_4_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_4_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_4_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_4_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_4_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_4_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_4_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_4_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_4_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_1 = input.LA(1);
                        int index216_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 66;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index216_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA215 extends DFA {
        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_106;
            this.max = dfa_107;
            this.accept = dfa_108;
            this.special = dfa_109;
            this.transition = dfa_110;
        }
        public String getDescription() {
            return "5391:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_4_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_4_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_4_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_4_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_4_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_4_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_4_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_4_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_4_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA215_0 = input.LA(1);
                        int index215_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA215_0==Var) && (synpred111_InternalN4JSParser())) {s = 1;}
                        else if ( (LA215_0==Const) && (synpred111_InternalN4JSParser())) {s = 2;}
                        else if ( (LA215_0==Let) ) {s = 3;}
                        else if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||(LA215_0>=Import && LA215_0<=Public)||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||LA215_0==Get||(LA215_0>=New && LA215_0<=Set)||LA215_0==PlusSignPlusSign||(LA215_0>=HyphenMinusHyphenMinus && LA215_0<=SolidusEqualsSign)||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||LA215_0==PlusSign||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_HEX_INT && LA215_0<=RULE_LEGACY_OCTAL_INT)||LA215_0==RULE_SCIENTIFIC_INT||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_STRING||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_INT) ) {s = 4;}
                        else if ( (LA215_0==Semicolon) ) {s = 65;}
                        input.seek(index215_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA215_3 = input.LA(1);
                        int index215_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_InternalN4JSParser()) ) {s = 2;}
                        else if ( (true) ) {s = 4;}
                        input.seek(index215_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_122s = "\37\uffff";
    static final String dfa_123s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_124s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_125s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_126s = "\34\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_127s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final char[] dfa_124 = DFA.unpackEncodedStringToUnsignedChars(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[] dfa_126 = DFA.unpackEncodedString(dfa_126s);
    static final short[][] dfa_127 = unpackEncodedStringArray(dfa_127s);
    class DFA207 extends DFA {
        public DFA207(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 207;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_123;
            this.max = dfa_124;
            this.accept = dfa_125;
            this.special = dfa_126;
            this.transition = dfa_127;
        }
        public String getDescription() {
            return "5402:6: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_4_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_4_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_4_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_4_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_4_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_4_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_4_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_4_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_4_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_4_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_4_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA207_29 = input.LA(1);
                        int index207_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSParser()) ) {s = 30;}
                        else if ( (true) ) {s = 27;}
                        input.seek(index207_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA207_28 = input.LA(1);
                        int index207_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSParser()) ) {s = 30;}
                        else if ( (true) ) {s = 27;}
                        input.seek(index207_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 207, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_128s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\71\1\uffff\1\72\1\57\10\uffff\1\15\3\uffff\1\20\2\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\uffff\1\74\1\uffff\1\56\2\uffff\1\41\3\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_128 = unpackEncodedStringArray(dfa_128s);
    class DFA200 extends DFA {
        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = dfa_64;
            this.eof = dfa_64;
            this.min = dfa_117;
            this.max = dfa_118;
            this.accept = dfa_119;
            this.special = dfa_120;
            this.transition = dfa_128;
        }
        public String getDescription() {
            return "5577:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_4_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_0 = input.LA(1);
                        int index200_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA200_0>=4 && LA200_0<=149 && (s=T2S.M_18[LA200_0-(4)])>=0) && (synpred113_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA200_0==RightParenthesis) ) {s = 63;}
                        input.seek(index200_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_129s = "\3\uffff\33\37\2\uffff";
    static final String dfa_130s = "\1\4\2\uffff\33\135\2\uffff";
    static final String dfa_131s = "\1\176\2\uffff\33\144\2\uffff";
    static final String dfa_132s = "\1\uffff\2\1\33\uffff\1\2\1\3";
    static final String dfa_133s = "\1\25\2\uffff\1\24\1\14\1\15\1\26\1\0\1\6\1\16\1\27\1\1\1\7\1\17\1\30\1\2\1\10\1\20\1\31\1\3\1\11\1\21\1\32\1\4\1\12\1\22\1\33\1\5\1\13\1\23\2\uffff}>";
    static final String[] dfa_134s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\3\uffff\1\21\7\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "",
            "",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "\1\37\6\uffff\1\36",
            "",
            ""
    };
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final char[] dfa_130 = DFA.unpackEncodedStringToUnsignedChars(dfa_130s);
    static final char[] dfa_131 = DFA.unpackEncodedStringToUnsignedChars(dfa_131s);
    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final short[] dfa_133 = DFA.unpackEncodedString(dfa_133s);
    static final short[][] dfa_134 = unpackEncodedStringArray(dfa_134s);
    class DFA237 extends DFA {
        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = dfa_111;
            this.eof = dfa_129;
            this.min = dfa_130;
            this.max = dfa_131;
            this.accept = dfa_132;
            this.special = dfa_133;
            this.transition = dfa_134;
        }
        public String getDescription() {
            return "6704:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepDeclaredTypeRefParserRuleCall_1_0_1= ruleColonSepDeclaredTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= ruleBindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA237_7 = input.LA(1);
                        int index237_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_7==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_7==EOF||LA237_7==RightParenthesis) ) {s = 31;}
                        input.seek(index237_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA237_11 = input.LA(1);
                        int index237_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_11==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_11==EOF||LA237_11==RightParenthesis) ) {s = 31;}
                        input.seek(index237_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA237_15 = input.LA(1);
                        int index237_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_15==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_15==EOF||LA237_15==RightParenthesis) ) {s = 31;}
                        input.seek(index237_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA237_19 = input.LA(1);
                        int index237_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_19==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_19==EOF||LA237_19==RightParenthesis) ) {s = 31;}
                        input.seek(index237_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA237_23 = input.LA(1);
                        int index237_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_23==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_23==EOF||LA237_23==RightParenthesis) ) {s = 31;}
                        input.seek(index237_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA237_27 = input.LA(1);
                        int index237_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_27==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_27==EOF||LA237_27==RightParenthesis) ) {s = 31;}
                        input.seek(index237_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA237_8 = input.LA(1);
                        int index237_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_8==EOF||LA237_8==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_8==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA237_12 = input.LA(1);
                        int index237_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_12==EOF||LA237_12==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_12==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_12);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA237_16 = input.LA(1);
                        int index237_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_16==EOF||LA237_16==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_16==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA237_20 = input.LA(1);
                        int index237_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_20==EOF||LA237_20==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_20==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_20);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA237_24 = input.LA(1);
                        int index237_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_24==EOF||LA237_24==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_24==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_24);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA237_28 = input.LA(1);
                        int index237_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_28==EOF||LA237_28==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_28==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_28);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA237_4 = input.LA(1);
                        int index237_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_4==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_4==EOF||LA237_4==RightParenthesis) ) {s = 31;}
                        input.seek(index237_4);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA237_5 = input.LA(1);
                        int index237_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_5==EOF||LA237_5==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_5==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_5);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA237_9 = input.LA(1);
                        int index237_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_9==EOF||LA237_9==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_9==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_9);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA237_13 = input.LA(1);
                        int index237_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_13==EOF||LA237_13==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_13==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_13);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA237_17 = input.LA(1);
                        int index237_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_17==EOF||LA237_17==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_17==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA237_21 = input.LA(1);
                        int index237_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_21==EOF||LA237_21==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_21==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_21);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA237_25 = input.LA(1);
                        int index237_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_25==EOF||LA237_25==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_25==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_25);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA237_29 = input.LA(1);
                        int index237_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_29==EOF||LA237_29==RightParenthesis) ) {s = 31;}
                        else if ( (LA237_29==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        input.seek(index237_29);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA237_3 = input.LA(1);
                        int index237_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_3==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_3==EOF||LA237_3==RightParenthesis) ) {s = 31;}
                        input.seek(index237_3);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA237_0 = input.LA(1);
                        int index237_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_0==LeftCurlyBracket) && (synpred120_InternalN4JSParser())) {s = 1;}
                        else if ( (LA237_0==LeftSquareBracket) && (synpred120_InternalN4JSParser())) {s = 2;}
                        else if ((LA237_0>=4 && LA237_0<=126 && (s=T2S.M_19[LA237_0-(4)])>=0)) { /* 27 cases */ }
                        input.seek(index237_0);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA237_6 = input.LA(1);
                        int index237_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_6==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_6==EOF||LA237_6==RightParenthesis) ) {s = 31;}
                        input.seek(index237_6);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA237_10 = input.LA(1);
                        int index237_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_10==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_10==EOF||LA237_10==RightParenthesis) ) {s = 31;}
                        input.seek(index237_10);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA237_14 = input.LA(1);
                        int index237_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_14==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_14==EOF||LA237_14==RightParenthesis) ) {s = 31;}
                        input.seek(index237_14);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA237_18 = input.LA(1);
                        int index237_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_18==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_18==EOF||LA237_18==RightParenthesis) ) {s = 31;}
                        input.seek(index237_18);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA237_22 = input.LA(1);
                        int index237_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_22==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_22==EOF||LA237_22==RightParenthesis) ) {s = 31;}
                        input.seek(index237_22);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA237_26 = input.LA(1);
                        int index237_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA237_26==Colon) && (synpred121_InternalN4JSParser())) {s = 30;}
                        else if ( (LA237_26==EOF||LA237_26==RightParenthesis) ) {s = 31;}
                        input.seek(index237_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 237, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_135s = "\1\4\2\uffff\32\135\2\uffff";
    static final String dfa_136s = "\1\176\2\uffff\32\144\2\uffff";
    static final String dfa_137s = "\1\uffff\2\1\32\uffff\1\3\1\2";
    static final String dfa_138s = "\1\6\2\uffff\1\24\1\7\1\16\1\25\1\0\1\10\1\17\1\26\1\1\1\11\1\20\1\27\1\2\1\12\1\21\1\30\1\3\1\13\1\22\1\31\1\4\1\14\1\23\1\32\1\5\1\15\2\uffff}>";
    static final String[] dfa_139s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\3\uffff\1\20\7\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "",
            "",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "\1\35\6\uffff\1\36",
            "",
            ""
    };
    static final char[] dfa_135 = DFA.unpackEncodedStringToUnsignedChars(dfa_135s);
    static final char[] dfa_136 = DFA.unpackEncodedStringToUnsignedChars(dfa_136s);
    static final short[] dfa_137 = DFA.unpackEncodedString(dfa_137s);
    static final short[] dfa_138 = DFA.unpackEncodedString(dfa_138s);
    static final short[][] dfa_139 = unpackEncodedStringArray(dfa_139s);
    class DFA238 extends DFA {
        public DFA238(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = dfa_122;
            this.eof = dfa_122;
            this.min = dfa_135;
            this.max = dfa_136;
            this.accept = dfa_137;
            this.special = dfa_138;
            this.transition = dfa_139;
        }
        public String getDescription() {
            return "6758:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepDeclaredTypeRefParserRuleCall_1_0_1= ruleColonSepDeclaredTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= norm1_BindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA238_7 = input.LA(1);
                        int index238_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_7==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_7==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA238_11 = input.LA(1);
                        int index238_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_11==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_11==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA238_15 = input.LA(1);
                        int index238_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_15==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_15==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA238_19 = input.LA(1);
                        int index238_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_19==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_19==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA238_23 = input.LA(1);
                        int index238_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_23==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_23==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_23);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA238_27 = input.LA(1);
                        int index238_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_27==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_27==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_27);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA238_0 = input.LA(1);
                        int index238_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_0==LeftCurlyBracket) && (synpred123_InternalN4JSParser())) {s = 1;}
                        else if ( (LA238_0==LeftSquareBracket) && (synpred123_InternalN4JSParser())) {s = 2;}
                        else if ((LA238_0>=4 && LA238_0<=126 && (s=T2S.M_20[LA238_0-(4)])>=0)) { /* 26 cases */ }
                        input.seek(index238_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA238_4 = input.LA(1);
                        int index238_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_4==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_4==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA238_8 = input.LA(1);
                        int index238_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_8==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_8==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA238_12 = input.LA(1);
                        int index238_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_12==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_12==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA238_16 = input.LA(1);
                        int index238_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_16==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_16==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_16);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA238_20 = input.LA(1);
                        int index238_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_20==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_20==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA238_24 = input.LA(1);
                        int index238_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_24==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_24==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_24);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA238_28 = input.LA(1);
                        int index238_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_28==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_28==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_28);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA238_5 = input.LA(1);
                        int index238_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_5==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_5==RightParenthesis) ) {s = 29;}
                        input.seek(index238_5);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA238_9 = input.LA(1);
                        int index238_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_9==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_9==RightParenthesis) ) {s = 29;}
                        input.seek(index238_9);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA238_13 = input.LA(1);
                        int index238_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_13==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_13==RightParenthesis) ) {s = 29;}
                        input.seek(index238_13);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA238_17 = input.LA(1);
                        int index238_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_17==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_17==RightParenthesis) ) {s = 29;}
                        input.seek(index238_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA238_21 = input.LA(1);
                        int index238_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_21==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_21==RightParenthesis) ) {s = 29;}
                        input.seek(index238_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA238_25 = input.LA(1);
                        int index238_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_25==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_25==RightParenthesis) ) {s = 29;}
                        input.seek(index238_25);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA238_3 = input.LA(1);
                        int index238_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_3==RightParenthesis) ) {s = 29;}
                        else if ( (LA238_3==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        input.seek(index238_3);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA238_6 = input.LA(1);
                        int index238_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_6==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_6==RightParenthesis) ) {s = 29;}
                        input.seek(index238_6);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA238_10 = input.LA(1);
                        int index238_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_10==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_10==RightParenthesis) ) {s = 29;}
                        input.seek(index238_10);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA238_14 = input.LA(1);
                        int index238_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_14==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_14==RightParenthesis) ) {s = 29;}
                        input.seek(index238_14);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA238_18 = input.LA(1);
                        int index238_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_18==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_18==RightParenthesis) ) {s = 29;}
                        input.seek(index238_18);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA238_22 = input.LA(1);
                        int index238_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_22==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_22==RightParenthesis) ) {s = 29;}
                        input.seek(index238_22);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA238_26 = input.LA(1);
                        int index238_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_26==Colon) && (synpred124_InternalN4JSParser())) {s = 30;}
                        else if ( (LA238_26==RightParenthesis) ) {s = 29;}
                        input.seek(index238_26);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 238, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_140s = "\52\uffff";
    static final String dfa_141s = "\4\uffff\1\3\45\uffff";
    static final String dfa_142s = "\1\4\3\uffff\1\6\1\4\13\uffff\1\4\1\uffff\10\4\2\uffff\3\4\1\10\11\4";
    static final String dfa_143s = "\1\u0095\3\uffff\1\u00a5\1\176\13\uffff\1\u00a5\1\uffff\10\u00a5\2\uffff\6\176\7\u00a5";
    static final String dfa_144s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\uffff\1\5\10\uffff\1\7\1\4\15\uffff";
    static final String dfa_145s = "\4\uffff\1\0\45\uffff}>";
    static final String[] dfa_146s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\12\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\33\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\27\1\23\1\22\1\uffff\1\31\3\22\2\uffff\1\22\1\uffff\1\33\2\uffff\2\22\3\uffff\1\22\1\uffff\1\22\1\uffff\1\24\1\uffff\1\22\1\32\7\uffff\1\26\1\uffff\1\22\1\30\3\uffff\1\22\1\uffff\1\33\1\uffff\1\25\1\33\6\uffff\2\22\1\uffff\2\22\23\uffff\1\22\3\uffff\1\22\5\uffff\1\33\13\uffff\1\34\1\33\1\uffff\1\33\2\uffff\1\33\2\uffff\1\33\14\uffff\1\21",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\1\37\1\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\36",
            "",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\40\17\uffff\1\22\46\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\1\37\1\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\36",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\40\17\uffff\1\22\46\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\41\17\uffff\1\22\46\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\13\uffff\2\22\4\uffff\1\22\5\uffff\1\42\17\uffff\1\22\46\uffff\1\22",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\1\37\1\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\36",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\1\37\1\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\36",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\1\37\1\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\36",
            "",
            "",
            "\3\33\1\uffff\4\33\2\uffff\1\33\4\uffff\2\33\3\uffff\1\33\1\uffff\1\33\1\uffff\1\33\1\uffff\2\33\7\uffff\1\33\1\uffff\2\33\3\uffff\1\33\3\uffff\1\33\7\uffff\2\33\1\uffff\2\33\23\uffff\1\33\3\uffff\1\33\17\uffff\1\22\7\uffff\1\22\17\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22",
            "\4\22\1\50\7\22\1\44\13\22\1\46\2\22\1\51\12\22\1\47\10\22\1\45\1\22\4\uffff\10\22\21\uffff\5\22\17\uffff\1\22\27\uffff\1\43",
            "\1\33\7\uffff\1\33\13\uffff\1\33\2\uffff\1\33\12\uffff\1\33\5\uffff\1\33\2\uffff\1\33\2\uffff\1\22\62\uffff\1\33\24\uffff\1\33",
            "\2\33\2\uffff\1\33\7\uffff\1\33\13\uffff\1\33\2\uffff\1\33\7\uffff\1\33\2\uffff\1\33\5\uffff\1\33\1\uffff\2\33\2\uffff\1\22\45\uffff\1\33\14\uffff\1\33\1\uffff\1\33\2\uffff\1\33\2\uffff\1\33\14\uffff\1\33",
            "\2\33\2\uffff\1\33\7\uffff\1\33\13\uffff\1\33\2\uffff\1\33\7\uffff\1\33\2\uffff\1\33\5\uffff\1\33\1\uffff\2\33\2\uffff\1\22\45\uffff\1\33\14\uffff\1\33\1\uffff\1\33\2\uffff\1\33\2\uffff\1\33\14\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\33",
            "\61\22\4\uffff\10\22\15\uffff\1\22\3\uffff\5\22\4\uffff\1\33\3\uffff\2\33\1\uffff\2\22\2\uffff\1\33\1\uffff\1\35\1\33\1\uffff\1\33\2\uffff\1\22\1\33\16\uffff\1\22\46\uffff\1\33"
    };
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final char[] dfa_142 = DFA.unpackEncodedStringToUnsignedChars(dfa_142s);
    static final char[] dfa_143 = DFA.unpackEncodedStringToUnsignedChars(dfa_143s);
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final short[] dfa_145 = DFA.unpackEncodedString(dfa_145s);
    static final short[][] dfa_146 = unpackEncodedStringArray(dfa_146s);
    class DFA239 extends DFA {
        public DFA239(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = dfa_140;
            this.eof = dfa_141;
            this.min = dfa_142;
            this.max = dfa_143;
            this.accept = dfa_144;
            this.special = dfa_145;
            this.transition = dfa_146;
        }
        public String getDescription() {
            return "6889:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | JSXFragmentParserRuleCall_3= ruleJSXFragment | JSXElementParserRuleCall_4= ruleJSXElement | ImportCallExpressionParserRuleCall_5= ruleImportCallExpression | ParameterizedCallExpressionParserRuleCall_6= ruleParameterizedCallExpression | LiteralParserRuleCall_7= ruleLiteral | ArrayLiteralParserRuleCall_8= ruleArrayLiteral | ObjectLiteralParserRuleCall_9= ruleObjectLiteral | ParenExpressionParserRuleCall_10= ruleParenExpression | AnnotatedExpressionParserRuleCall_11= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_13= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_14= ruleN4ClassExpression | TemplateLiteralParserRuleCall_15= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA239_4 = input.LA(1);
                        int index239_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA239_4==EOF||(LA239_4>=Implements && LA239_4<=Instanceof)||LA239_4==ExclamationMarkEqualsSignEqualsSign||(LA239_4>=LessThanSignLessThanSignEqualsSign && LA239_4<=EqualsSignEqualsSignEqualsSign)||(LA239_4>=ExclamationMarkEqualsSign && LA239_4<=EqualsSignEqualsSign)||(LA239_4>=QuestionMarkFullStop && LA239_4<=QuestionMarkQuestionMark)||(LA239_4>=CircumflexAccentEqualsSign && LA239_4<=As)||(LA239_4>=In && LA239_4<=VerticalLineVerticalLine)||(LA239_4>=PercentSign && LA239_4<=QuestionMark)||(LA239_4>=LeftSquareBracket && LA239_4<=RightCurlyBracket)||(LA239_4>=RULE_TEMPLATE_HEAD && LA239_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA239_4==RULE_ML_COMMENT||LA239_4==RULE_EOL||LA239_4==RULE_VERSION) ) {s = 3;}
                        else if ( (LA239_4==RULE_NO_LINE_TERMINATOR) && (synpred128_InternalN4JSParser())) {s = 15;}
                        else if ( (LA239_4==Function) && (synpred128_InternalN4JSParser())) {s = 16;}
                        input.seek(index239_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 239, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_147s = "\1\4\3\uffff\1\6\1\4\15\uffff\11\4\1\uffff\3\4\1\10\11\4";
    static final String dfa_148s = "\1\u0095\3\uffff\1\u00a5\1\176\15\uffff\11\u00a5\1\uffff\6\176\7\u00a5";
    static final String dfa_149s = "\1\uffff\1\1\1\2\1\3\2\uffff\1\6\1\10\1\11\1\12\1\13\1\14\1\15\1\17\1\20\2\16\1\4\1\7\11\uffff\1\5\15\uffff";
    static final String[] dfa_150s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\14\3\uffff\2\3\2\uffff\1\6\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\15\1\uffff\1\7\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\7\1\1\1\7\1\3\7\uffff\2\3\1\uffff\2\3\12\uffff\1\7\10\uffff\1\3\3\uffff\1\3\5\uffff\1\12\6\uffff\1\7\2\uffff\1\5\3\uffff\1\13\1\10\2\uffff\1\11\6\uffff\1\7\1\uffff\4\7\1\uffff\1\7\1\uffff\1\3\2\uffff\1\7\12\uffff\2\16\7\uffff\1\7",
            "",
            "",
            "",
            "\2\3\7\uffff\1\20\45\uffff\1\3\1\uffff\2\3\10\uffff\14\3\1\uffff\2\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\33\uffff\2\3\4\uffff\1\17\4\uffff\1\3\1\uffff\1\3\13\uffff\1\3",
            "\1\33\1\31\1\34\1\uffff\1\25\3\34\2\uffff\1\34\1\uffff\1\22\2\uffff\2\34\3\uffff\1\34\1\uffff\1\34\1\uffff\1\26\1\uffff\1\34\1\24\7\uffff\1\32\1\uffff\1\34\1\23\3\uffff\1\34\1\uffff\1\22\1\uffff\1\30\1\22\6\uffff\2\34\1\uffff\2\34\23\uffff\1\34\3\uffff\1\34\5\uffff\1\22\13\uffff\1\21\1\22\1\uffff\1\22\2\uffff\1\22\2\uffff\1\22\14\uffff\1\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\37\1\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\35",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\37\1\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\35",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\37\1\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\35",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\37\1\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\35",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\1\37\1\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\35",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\40\17\uffff\1\34\46\uffff\1\34",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\40\17\uffff\1\34\46\uffff\1\34",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\41\17\uffff\1\34\46\uffff\1\34",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\13\uffff\2\34\4\uffff\1\34\5\uffff\1\42\17\uffff\1\34\46\uffff\1\34",
            "",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34",
            "\3\22\1\uffff\4\22\2\uffff\1\22\4\uffff\2\22\3\uffff\1\22\1\uffff\1\22\1\uffff\1\22\1\uffff\2\22\7\uffff\1\22\2\uffff\1\22\3\uffff\1\22\3\uffff\1\22\7\uffff\2\22\1\uffff\2\22\23\uffff\1\22\3\uffff\1\22\17\uffff\1\34\7\uffff\1\34\17\uffff\1\22",
            "\4\34\1\46\7\34\1\50\13\34\1\47\2\34\1\45\12\34\1\44\10\34\1\43\1\34\4\uffff\10\34\21\uffff\5\34\17\uffff\1\34\27\uffff\1\51",
            "\1\22\7\uffff\1\22\13\uffff\1\22\2\uffff\1\22\12\uffff\1\22\5\uffff\1\22\2\uffff\1\22\2\uffff\1\34\62\uffff\1\22\24\uffff\1\22",
            "\2\22\2\uffff\1\22\7\uffff\1\22\13\uffff\1\22\2\uffff\1\22\7\uffff\1\22\2\uffff\1\22\5\uffff\1\22\1\uffff\2\22\2\uffff\1\34\45\uffff\1\22\14\uffff\1\22\1\uffff\1\22\2\uffff\1\22\2\uffff\1\22\14\uffff\1\22",
            "\2\22\2\uffff\1\22\7\uffff\1\22\13\uffff\1\22\2\uffff\1\22\7\uffff\1\22\2\uffff\1\22\5\uffff\1\22\1\uffff\2\22\2\uffff\1\34\45\uffff\1\22\14\uffff\1\22\1\uffff\1\22\2\uffff\1\22\2\uffff\1\22\14\uffff\1\22",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\22",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\22",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\22",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\22",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\22",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\22",
            "\61\34\4\uffff\10\34\15\uffff\1\34\3\uffff\5\34\4\uffff\1\22\3\uffff\2\22\1\uffff\2\34\2\uffff\1\22\1\uffff\1\36\1\22\1\uffff\1\22\2\uffff\1\34\1\22\16\uffff\1\34\46\uffff\1\22"
    };
    static final char[] dfa_147 = DFA.unpackEncodedStringToUnsignedChars(dfa_147s);
    static final char[] dfa_148 = DFA.unpackEncodedStringToUnsignedChars(dfa_148s);
    static final short[] dfa_149 = DFA.unpackEncodedString(dfa_149s);
    static final short[][] dfa_150 = unpackEncodedStringArray(dfa_150s);
    class DFA240 extends DFA {
        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = dfa_140;
            this.eof = dfa_141;
            this.min = dfa_147;
            this.max = dfa_148;
            this.accept = dfa_149;
            this.special = dfa_145;
            this.transition = dfa_150;
        }
        public String getDescription() {
            return "6941:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | JSXFragmentParserRuleCall_3= ruleJSXFragment | JSXElementParserRuleCall_4= ruleJSXElement | ImportCallExpressionParserRuleCall_5= norm1_ImportCallExpression | ParameterizedCallExpressionParserRuleCall_6= norm1_ParameterizedCallExpression | LiteralParserRuleCall_7= ruleLiteral | ArrayLiteralParserRuleCall_8= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_9= norm1_ObjectLiteral | ParenExpressionParserRuleCall_10= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_11= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_12= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_13= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_14= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_15= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA240_4 = input.LA(1);
                        int index240_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_4==EOF||(LA240_4>=Implements && LA240_4<=Instanceof)||LA240_4==ExclamationMarkEqualsSignEqualsSign||(LA240_4>=LessThanSignLessThanSignEqualsSign && LA240_4<=EqualsSignEqualsSignEqualsSign)||(LA240_4>=ExclamationMarkEqualsSign && LA240_4<=EqualsSignEqualsSign)||(LA240_4>=QuestionMarkFullStop && LA240_4<=QuestionMarkQuestionMark)||(LA240_4>=CircumflexAccentEqualsSign && LA240_4<=As)||(LA240_4>=In && LA240_4<=VerticalLineVerticalLine)||(LA240_4>=PercentSign && LA240_4<=QuestionMark)||(LA240_4>=LeftSquareBracket && LA240_4<=RightCurlyBracket)||(LA240_4>=RULE_TEMPLATE_HEAD && LA240_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA240_4==RULE_ML_COMMENT||LA240_4==RULE_EOL||LA240_4==RULE_VERSION) ) {s = 3;}
                        else if ( (LA240_4==RULE_NO_LINE_TERMINATOR) && (synpred129_InternalN4JSParser())) {s = 15;}
                        else if ( (LA240_4==Function) && (synpred129_InternalN4JSParser())) {s = 16;}
                        input.seek(index240_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 240, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_151s = "\34\4\2\uffff";
    static final String dfa_152s = "\1\176\33\u00a5\2\uffff";
    static final String[] dfa_153s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\47\uffff\1\1",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "\62\35\1\uffff\26\35\1\uffff\2\35\1\uffff\10\35\1\uffff\20\35\1\uffff\6\35\15\uffff\1\35\15\uffff\2\35\11\uffff\1\35\1\uffff\1\35\13\uffff\1\34",
            "",
            ""
    };
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final short[][] dfa_153 = unpackEncodedStringArray(dfa_153s);
    class DFA241 extends DFA {
        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = dfa_31;
            this.eof = dfa_45;
            this.min = dfa_151;
            this.max = dfa_152;
            this.accept = dfa_48;
            this.special = dfa_36;
            this.transition = dfa_153;
        }
        public String getDescription() {
            return "7051:1: ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1= ruleBindingIdentifier ) ) VersionRequestParserRuleCall_1_2= ruleVersionRequest ) )";
        }
    }
    static final String dfa_154s = "\1\uffff\32\33\2\uffff";
    static final String dfa_155s = "\1\4\32\6\2\uffff";
    static final String dfa_156s = "\1\176\32\u00a5\2\uffff";
    static final String dfa_157s = "\33\uffff\1\1\1\2";
    static final String dfa_158s = "\35\uffff}>";
    static final String[] dfa_159s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\47\uffff\1\1",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "\2\33\55\uffff\1\33\1\uffff\2\33\10\uffff\14\33\1\uffff\2\33\1\uffff\2\33\2\uffff\4\33\1\uffff\20\33\1\uffff\6\33\33\uffff\2\33\11\uffff\1\33\1\uffff\1\33\13\uffff\1\34",
            "",
            ""
    };
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final char[] dfa_155 = DFA.unpackEncodedStringToUnsignedChars(dfa_155s);
    static final char[] dfa_156 = DFA.unpackEncodedStringToUnsignedChars(dfa_156s);
    static final short[] dfa_157 = DFA.unpackEncodedString(dfa_157s);
    static final short[] dfa_158 = DFA.unpackEncodedString(dfa_158s);
    static final short[][] dfa_159 = unpackEncodedStringArray(dfa_159s);
    class DFA242 extends DFA {
        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = dfa_87;
            this.eof = dfa_154;
            this.min = dfa_155;
            this.max = dfa_156;
            this.accept = dfa_157;
            this.special = dfa_158;
            this.transition = dfa_159;
        }
        public String getDescription() {
            return "7078:1: ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_0_0_1= norm1_BindingIdentifier ) ) | ( ( (IdIdentifiableElementBindingIdentifierParserRuleCall_1_1_0_1= norm1_BindingIdentifier ) ) VersionRequestParserRuleCall_1_2= ruleVersionRequest ) )";
        }
    }
    static final String dfa_160s = "\5\uffff";
    static final String dfa_161s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_162s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_163s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_164s = "\5\uffff}>";
    static final String[] dfa_165s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\7\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\1\uffff\2\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\2\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\12\uffff\2\4\7\uffff\1\4",
            ""
    };
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final char[] dfa_161 = DFA.unpackEncodedStringToUnsignedChars(dfa_161s);
    static final char[] dfa_162 = DFA.unpackEncodedStringToUnsignedChars(dfa_162s);
    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final short[][] dfa_165 = unpackEncodedStringArray(dfa_165s);
    class DFA245 extends DFA {
        public DFA245(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 245;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_162;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_165;
        }
        public String getDescription() {
            return "()* loopback of 7166:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }
    class DFA251 extends DFA {
        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_162;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_165;
        }
        public String getDescription() {
            return "()* loopback of 7236:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_166s = "\116\uffff";
    static final String dfa_167s = "\1\4\1\uffff\104\0\10\uffff";
    static final String dfa_168s = "\1\u0095\1\uffff\104\0\10\uffff";
    static final String dfa_169s = "\1\uffff\1\1\104\uffff\2\5\1\6\1\uffff\1\7\1\2\1\3\1\4";
    static final String dfa_170s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\10\uffff}>";
    static final String[] dfa_171s = {
            "\1\17\1\14\1\75\1\42\1\5\1\76\1\100\1\67\1\25\1\26\1\66\1\36\1\7\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\6\1\51\1\74\1\4\1\20\1\22\1\23\1\24\1\60\1\45\1\47\1\16\1\53\1\55\1\3\1\21\1\31\1\61\1\72\1\56\1\12\1\57\1\13\1\2\1\54\1\uffff\1\112\2\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\2\uffff\1\110\1\1\1\105\2\uffff\1\15\2\uffff\1\11\3\uffff\1\104\1\uffff\3\104\2\uffff\1\104\1\uffff\1\10\2\uffff\1\103\23\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_166 = DFA.unpackEncodedString(dfa_166s);
    static final char[] dfa_167 = DFA.unpackEncodedStringToUnsignedChars(dfa_167s);
    static final char[] dfa_168 = DFA.unpackEncodedStringToUnsignedChars(dfa_168s);
    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final short[] dfa_170 = DFA.unpackEncodedString(dfa_170s);
    static final short[][] dfa_171 = unpackEncodedStringArray(dfa_171s);
    class DFA263 extends DFA {
        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = dfa_166;
            this.eof = dfa_166;
            this.min = dfa_167;
            this.max = dfa_168;
            this.accept = dfa_169;
            this.special = dfa_170;
            this.transition = dfa_171;
        }
        public String getDescription() {
            return "7457:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ruleAsyncNoTrailingLineBreak ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName | PropertySpreadParserRuleCall_6= rulePropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA263_0 = input.LA(1);
                        int index263_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA263_0>=4 && LA263_0<=129 && (s=T2S.M_21[LA263_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA263_0==RULE_DOUBLE||(LA263_0>=RULE_HEX_INT && LA263_0<=RULE_OCTAL_INT)||LA263_0==RULE_SCIENTIFIC_INT||LA263_0==RULE_INT) ) {s = 68;}
                        else if ( (LA263_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA263_0==LessThanSign) && (synpred133_InternalN4JSParser())) {s = 70;}
                        else if ( (LA263_0==Asterisk) && (synpred133_InternalN4JSParser())) {s = 71;}
                        else if ( (LA263_0==LeftParenthesis||LA263_0==QuestionMark) ) {s = 72;}
                        else if ( (LA263_0==FullStopFullStopFullStop) ) {s = 74;}
                        input.seek(index263_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA263_2 = input.LA(1);
                        int index263_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA263_3 = input.LA(1);
                        int index263_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA263_4 = input.LA(1);
                        int index263_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA263_5 = input.LA(1);
                        int index263_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA263_6 = input.LA(1);
                        int index263_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA263_7 = input.LA(1);
                        int index263_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA263_8 = input.LA(1);
                        int index263_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA263_9 = input.LA(1);
                        int index263_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA263_10 = input.LA(1);
                        int index263_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA263_11 = input.LA(1);
                        int index263_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA263_12 = input.LA(1);
                        int index263_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA263_13 = input.LA(1);
                        int index263_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA263_14 = input.LA(1);
                        int index263_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA263_15 = input.LA(1);
                        int index263_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA263_16 = input.LA(1);
                        int index263_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA263_17 = input.LA(1);
                        int index263_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA263_18 = input.LA(1);
                        int index263_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA263_19 = input.LA(1);
                        int index263_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA263_20 = input.LA(1);
                        int index263_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA263_21 = input.LA(1);
                        int index263_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA263_22 = input.LA(1);
                        int index263_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA263_23 = input.LA(1);
                        int index263_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA263_24 = input.LA(1);
                        int index263_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA263_25 = input.LA(1);
                        int index263_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA263_26 = input.LA(1);
                        int index263_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA263_27 = input.LA(1);
                        int index263_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA263_28 = input.LA(1);
                        int index263_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA263_29 = input.LA(1);
                        int index263_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA263_30 = input.LA(1);
                        int index263_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA263_31 = input.LA(1);
                        int index263_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA263_32 = input.LA(1);
                        int index263_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA263_33 = input.LA(1);
                        int index263_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA263_34 = input.LA(1);
                        int index263_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA263_35 = input.LA(1);
                        int index263_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA263_36 = input.LA(1);
                        int index263_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA263_37 = input.LA(1);
                        int index263_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA263_38 = input.LA(1);
                        int index263_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA263_39 = input.LA(1);
                        int index263_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA263_40 = input.LA(1);
                        int index263_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA263_41 = input.LA(1);
                        int index263_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA263_42 = input.LA(1);
                        int index263_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA263_43 = input.LA(1);
                        int index263_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA263_44 = input.LA(1);
                        int index263_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA263_45 = input.LA(1);
                        int index263_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA263_46 = input.LA(1);
                        int index263_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA263_47 = input.LA(1);
                        int index263_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA263_48 = input.LA(1);
                        int index263_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA263_49 = input.LA(1);
                        int index263_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA263_50 = input.LA(1);
                        int index263_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred131_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA263_51 = input.LA(1);
                        int index263_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred132_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA263_52 = input.LA(1);
                        int index263_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA263_53 = input.LA(1);
                        int index263_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA263_54 = input.LA(1);
                        int index263_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA263_55 = input.LA(1);
                        int index263_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA263_56 = input.LA(1);
                        int index263_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA263_57 = input.LA(1);
                        int index263_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA263_58 = input.LA(1);
                        int index263_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA263_59 = input.LA(1);
                        int index263_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA263_60 = input.LA(1);
                        int index263_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA263_61 = input.LA(1);
                        int index263_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA263_62 = input.LA(1);
                        int index263_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA263_63 = input.LA(1);
                        int index263_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA263_64 = input.LA(1);
                        int index263_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA263_65 = input.LA(1);
                        int index263_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA263_66 = input.LA(1);
                        int index263_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA263_67 = input.LA(1);
                        int index263_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA263_68 = input.LA(1);
                        int index263_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index263_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA263_69 = input.LA(1);
                        int index263_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred130_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index263_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 263, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA264 extends DFA {
        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = dfa_166;
            this.eof = dfa_166;
            this.min = dfa_167;
            this.max = dfa_168;
            this.accept = dfa_169;
            this.special = dfa_170;
            this.transition = dfa_171;
        }
        public String getDescription() {
            return "7693:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) ( ( QuestionMark ) )? Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ruleAsyncNoTrailingLineBreak ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName | PropertySpreadParserRuleCall_6= norm1_PropertySpread )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA264_0 = input.LA(1);
                        int index264_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA264_0>=4 && LA264_0<=129 && (s=T2S.M_21[LA264_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA264_0==RULE_DOUBLE||(LA264_0>=RULE_HEX_INT && LA264_0<=RULE_OCTAL_INT)||LA264_0==RULE_SCIENTIFIC_INT||LA264_0==RULE_INT) ) {s = 68;}
                        else if ( (LA264_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA264_0==LessThanSign) && (synpred137_InternalN4JSParser())) {s = 70;}
                        else if ( (LA264_0==Asterisk) && (synpred137_InternalN4JSParser())) {s = 71;}
                        else if ( (LA264_0==LeftParenthesis||LA264_0==QuestionMark) ) {s = 72;}
                        else if ( (LA264_0==FullStopFullStopFullStop) ) {s = 74;}
                        input.seek(index264_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA264_2 = input.LA(1);
                        int index264_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA264_3 = input.LA(1);
                        int index264_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA264_4 = input.LA(1);
                        int index264_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA264_5 = input.LA(1);
                        int index264_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA264_6 = input.LA(1);
                        int index264_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA264_7 = input.LA(1);
                        int index264_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA264_8 = input.LA(1);
                        int index264_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA264_9 = input.LA(1);
                        int index264_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA264_10 = input.LA(1);
                        int index264_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA264_11 = input.LA(1);
                        int index264_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA264_12 = input.LA(1);
                        int index264_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA264_13 = input.LA(1);
                        int index264_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA264_14 = input.LA(1);
                        int index264_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA264_15 = input.LA(1);
                        int index264_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA264_16 = input.LA(1);
                        int index264_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA264_17 = input.LA(1);
                        int index264_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA264_18 = input.LA(1);
                        int index264_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA264_19 = input.LA(1);
                        int index264_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA264_20 = input.LA(1);
                        int index264_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA264_21 = input.LA(1);
                        int index264_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA264_22 = input.LA(1);
                        int index264_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA264_23 = input.LA(1);
                        int index264_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA264_24 = input.LA(1);
                        int index264_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA264_25 = input.LA(1);
                        int index264_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA264_26 = input.LA(1);
                        int index264_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA264_27 = input.LA(1);
                        int index264_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA264_28 = input.LA(1);
                        int index264_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA264_29 = input.LA(1);
                        int index264_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA264_30 = input.LA(1);
                        int index264_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA264_31 = input.LA(1);
                        int index264_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA264_32 = input.LA(1);
                        int index264_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA264_33 = input.LA(1);
                        int index264_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA264_34 = input.LA(1);
                        int index264_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA264_35 = input.LA(1);
                        int index264_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA264_36 = input.LA(1);
                        int index264_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA264_37 = input.LA(1);
                        int index264_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA264_38 = input.LA(1);
                        int index264_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA264_39 = input.LA(1);
                        int index264_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA264_40 = input.LA(1);
                        int index264_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA264_41 = input.LA(1);
                        int index264_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA264_42 = input.LA(1);
                        int index264_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA264_43 = input.LA(1);
                        int index264_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA264_44 = input.LA(1);
                        int index264_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA264_45 = input.LA(1);
                        int index264_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA264_46 = input.LA(1);
                        int index264_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA264_47 = input.LA(1);
                        int index264_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA264_48 = input.LA(1);
                        int index264_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA264_49 = input.LA(1);
                        int index264_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA264_50 = input.LA(1);
                        int index264_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred135_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA264_51 = input.LA(1);
                        int index264_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred136_InternalN4JSParser()) ) {s = 77;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA264_52 = input.LA(1);
                        int index264_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA264_53 = input.LA(1);
                        int index264_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA264_54 = input.LA(1);
                        int index264_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA264_55 = input.LA(1);
                        int index264_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA264_56 = input.LA(1);
                        int index264_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA264_57 = input.LA(1);
                        int index264_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA264_58 = input.LA(1);
                        int index264_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA264_59 = input.LA(1);
                        int index264_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA264_60 = input.LA(1);
                        int index264_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA264_61 = input.LA(1);
                        int index264_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA264_62 = input.LA(1);
                        int index264_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA264_63 = input.LA(1);
                        int index264_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA264_64 = input.LA(1);
                        int index264_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA264_65 = input.LA(1);
                        int index264_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA264_66 = input.LA(1);
                        int index264_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA264_67 = input.LA(1);
                        int index264_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA264_68 = input.LA(1);
                        int index264_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        input.seek(index264_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA264_69 = input.LA(1);
                        int index264_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred137_InternalN4JSParser()) ) {s = 71;}
                        else if ( (true) ) {s = 72;}
                        input.seek(index264_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 264, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_172s = "\115\uffff";
    static final String dfa_173s = "\1\4\104\0\10\uffff";
    static final String dfa_174s = "\1\u0095\104\0\10\uffff";
    static final String dfa_175s = "\105\uffff\2\4\1\5\1\uffff\1\6\1\1\1\2\1\3";
    static final String dfa_176s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\10\uffff}>";
    static final String[] dfa_177s = {
            "\1\16\1\13\1\74\1\41\1\4\1\75\1\77\1\66\1\24\1\25\1\65\1\35\1\6\1\32\1\33\1\76\1\64\1\26\1\31\1\37\1\100\1\43\1\67\1\45\1\5\1\50\1\73\1\3\1\17\1\21\1\22\1\23\1\57\1\44\1\46\1\15\1\52\1\54\1\2\1\20\1\30\1\60\1\71\1\55\1\11\1\56\1\12\1\1\1\53\1\uffff\1\111\2\uffff\1\34\1\61\1\63\1\42\1\101\1\62\1\47\1\51\21\uffff\1\70\1\27\1\36\1\40\1\72\5\uffff\1\107\1\uffff\1\106\7\uffff\1\105\2\uffff\1\107\1\uffff\1\104\2\uffff\1\14\2\uffff\1\10\3\uffff\1\103\1\uffff\3\103\2\uffff\1\103\1\uffff\1\7\2\uffff\1\102\23\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_172 = DFA.unpackEncodedString(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final char[] dfa_174 = DFA.unpackEncodedStringToUnsignedChars(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[] dfa_176 = DFA.unpackEncodedString(dfa_176s);
    static final short[][] dfa_177 = unpackEncodedStringArray(dfa_177s);
    class DFA272 extends DFA {
        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_172;
            this.eof = dfa_172;
            this.min = dfa_173;
            this.max = dfa_174;
            this.accept = dfa_175;
            this.special = dfa_176;
            this.transition = dfa_177;
        }
        public String getDescription() {
            return "7936:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_2_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_2_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_3_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_5_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0= rulePropertyNameValuePairSingleNamePart ) ) ) | (FullStopFullStopFullStopKeyword_1_5_1= FullStopFullStopFullStop ( (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0= norm1_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA272_0 = input.LA(1);
                        int index272_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA272_0>=4 && LA272_0<=129 && (s=T2S.M_23[LA272_0-(4)])>=0)) { /* 66 cases */ }
                        else if ( (LA272_0==RULE_DOUBLE||(LA272_0>=RULE_HEX_INT && LA272_0<=RULE_OCTAL_INT)||LA272_0==RULE_SCIENTIFIC_INT||LA272_0==RULE_INT) ) {s = 67;}
                        else if ( (LA272_0==LeftSquareBracket) ) {s = 68;}
                        else if ( (LA272_0==LessThanSign) && (synpred144_InternalN4JSParser())) {s = 69;}
                        else if ( (LA272_0==Asterisk) && (synpred144_InternalN4JSParser())) {s = 70;}
                        else if ( (LA272_0==LeftParenthesis||LA272_0==QuestionMark) ) {s = 71;}
                        else if ( (LA272_0==FullStopFullStopFullStop) ) {s = 73;}
                        input.seek(index272_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA272_1 = input.LA(1);
                        int index272_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA272_2 = input.LA(1);
                        int index272_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA272_3 = input.LA(1);
                        int index272_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA272_4 = input.LA(1);
                        int index272_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA272_5 = input.LA(1);
                        int index272_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA272_6 = input.LA(1);
                        int index272_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA272_7 = input.LA(1);
                        int index272_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA272_8 = input.LA(1);
                        int index272_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA272_9 = input.LA(1);
                        int index272_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA272_10 = input.LA(1);
                        int index272_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA272_11 = input.LA(1);
                        int index272_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA272_12 = input.LA(1);
                        int index272_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA272_13 = input.LA(1);
                        int index272_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA272_14 = input.LA(1);
                        int index272_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA272_15 = input.LA(1);
                        int index272_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA272_16 = input.LA(1);
                        int index272_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA272_17 = input.LA(1);
                        int index272_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA272_18 = input.LA(1);
                        int index272_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA272_19 = input.LA(1);
                        int index272_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA272_20 = input.LA(1);
                        int index272_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA272_21 = input.LA(1);
                        int index272_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA272_22 = input.LA(1);
                        int index272_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA272_23 = input.LA(1);
                        int index272_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA272_24 = input.LA(1);
                        int index272_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA272_25 = input.LA(1);
                        int index272_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA272_26 = input.LA(1);
                        int index272_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA272_27 = input.LA(1);
                        int index272_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA272_28 = input.LA(1);
                        int index272_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA272_29 = input.LA(1);
                        int index272_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA272_30 = input.LA(1);
                        int index272_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA272_31 = input.LA(1);
                        int index272_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA272_32 = input.LA(1);
                        int index272_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA272_33 = input.LA(1);
                        int index272_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA272_34 = input.LA(1);
                        int index272_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA272_35 = input.LA(1);
                        int index272_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA272_36 = input.LA(1);
                        int index272_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA272_37 = input.LA(1);
                        int index272_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA272_38 = input.LA(1);
                        int index272_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA272_39 = input.LA(1);
                        int index272_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA272_40 = input.LA(1);
                        int index272_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA272_41 = input.LA(1);
                        int index272_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA272_42 = input.LA(1);
                        int index272_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA272_43 = input.LA(1);
                        int index272_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA272_44 = input.LA(1);
                        int index272_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA272_45 = input.LA(1);
                        int index272_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA272_46 = input.LA(1);
                        int index272_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA272_47 = input.LA(1);
                        int index272_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA272_48 = input.LA(1);
                        int index272_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA272_49 = input.LA(1);
                        int index272_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred139_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA272_50 = input.LA(1);
                        int index272_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred141_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA272_51 = input.LA(1);
                        int index272_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA272_52 = input.LA(1);
                        int index272_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA272_53 = input.LA(1);
                        int index272_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA272_54 = input.LA(1);
                        int index272_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA272_55 = input.LA(1);
                        int index272_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA272_56 = input.LA(1);
                        int index272_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA272_57 = input.LA(1);
                        int index272_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA272_58 = input.LA(1);
                        int index272_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA272_59 = input.LA(1);
                        int index272_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA272_60 = input.LA(1);
                        int index272_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA272_61 = input.LA(1);
                        int index272_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA272_62 = input.LA(1);
                        int index272_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA272_63 = input.LA(1);
                        int index272_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA272_64 = input.LA(1);
                        int index272_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA272_65 = input.LA(1);
                        int index272_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA272_66 = input.LA(1);
                        int index272_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA272_67 = input.LA(1);
                        int index272_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index272_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA272_68 = input.LA(1);
                        int index272_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred138_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred144_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index272_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 272, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_178s = "\17\uffff";
    static final String dfa_179s = "\10\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_180s = "\1\u0095\7\u00a5\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_181s = "\10\uffff\1\1\5\uffff\1\2";
    static final String dfa_182s = "\17\uffff}>";
    static final String[] dfa_183s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\23\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            "\1\16\11\uffff\1\10",
            ""
    };
    static final short[] dfa_178 = DFA.unpackEncodedString(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final char[] dfa_180 = DFA.unpackEncodedStringToUnsignedChars(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[] dfa_182 = DFA.unpackEncodedString(dfa_182s);
    static final short[][] dfa_183 = unpackEncodedStringArray(dfa_183s);
    class DFA265 extends DFA {
        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_179;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "7954:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_184s = "\10\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_185s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\7\uffff\1\16\14\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\23\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\2\uffff\1\10\3\uffff\1\10\2\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\5\uffff\1\16\1\uffff\2\10\11\uffff\1\10\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            "\1\16\21\uffff\1\10",
            ""
    };
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final short[][] dfa_185 = unpackEncodedStringArray(dfa_185s);
    class DFA268 extends DFA {
        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "8310:6: ( (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_186s = "\15\uffff";
    static final String dfa_187s = "\2\uffff\11\13\1\uffff\1\13";
    static final String dfa_188s = "\1\4\1\uffff\5\4\4\140\1\uffff\1\4";
    static final String dfa_189s = "\1\176\1\uffff\11\u00a5\1\uffff\1\176";
    static final String dfa_190s = "\1\uffff\1\1\11\uffff\1\2\1\uffff";
    static final String dfa_191s = "\15\uffff}>";
    static final String[] dfa_192s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final char[] dfa_188 = DFA.unpackEncodedStringToUnsignedChars(dfa_188s);
    static final char[] dfa_189 = DFA.unpackEncodedStringToUnsignedChars(dfa_189s);
    static final short[] dfa_190 = DFA.unpackEncodedString(dfa_190s);
    static final short[] dfa_191 = DFA.unpackEncodedString(dfa_191s);
    static final short[][] dfa_192 = unpackEncodedStringArray(dfa_192s);
    class DFA271 extends DFA {
        public DFA271(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = dfa_186;
            this.eof = dfa_187;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_191;
            this.transition = dfa_192;
        }
        public String getDescription() {
            return "8367:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }
    class DFA280 extends DFA {
        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_172;
            this.eof = dfa_172;
            this.min = dfa_173;
            this.max = dfa_174;
            this.accept = dfa_175;
            this.special = dfa_176;
            this.transition = dfa_177;
        }
        public String getDescription() {
            return "8407:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_2_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_2_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_3_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_5_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (ExpressionPropertyNameValuePairSingleNamePartParserRuleCall_1_4_2_0= norm1_PropertyNameValuePairSingleNamePart ) ) ) | (FullStopFullStopFullStopKeyword_1_5_1= FullStopFullStopFullStop ( (ExpressionAssignmentExpressionParserRuleCall_1_5_2_0= norm3_AssignmentExpression ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA280_0 = input.LA(1);
                        int index280_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA280_0>=4 && LA280_0<=129 && (s=T2S.M_23[LA280_0-(4)])>=0)) { /* 66 cases */ }
                        else if ( (LA280_0==RULE_DOUBLE||(LA280_0>=RULE_HEX_INT && LA280_0<=RULE_OCTAL_INT)||LA280_0==RULE_SCIENTIFIC_INT||LA280_0==RULE_INT) ) {s = 67;}
                        else if ( (LA280_0==LeftSquareBracket) ) {s = 68;}
                        else if ( (LA280_0==LessThanSign) && (synpred153_InternalN4JSParser())) {s = 69;}
                        else if ( (LA280_0==Asterisk) && (synpred153_InternalN4JSParser())) {s = 70;}
                        else if ( (LA280_0==LeftParenthesis||LA280_0==QuestionMark) ) {s = 71;}
                        else if ( (LA280_0==FullStopFullStopFullStop) ) {s = 73;}
                        input.seek(index280_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA280_1 = input.LA(1);
                        int index280_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA280_2 = input.LA(1);
                        int index280_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA280_3 = input.LA(1);
                        int index280_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA280_4 = input.LA(1);
                        int index280_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA280_5 = input.LA(1);
                        int index280_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA280_6 = input.LA(1);
                        int index280_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA280_7 = input.LA(1);
                        int index280_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA280_8 = input.LA(1);
                        int index280_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA280_9 = input.LA(1);
                        int index280_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA280_10 = input.LA(1);
                        int index280_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA280_11 = input.LA(1);
                        int index280_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA280_12 = input.LA(1);
                        int index280_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA280_13 = input.LA(1);
                        int index280_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA280_14 = input.LA(1);
                        int index280_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA280_15 = input.LA(1);
                        int index280_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA280_16 = input.LA(1);
                        int index280_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA280_17 = input.LA(1);
                        int index280_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA280_18 = input.LA(1);
                        int index280_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA280_19 = input.LA(1);
                        int index280_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA280_20 = input.LA(1);
                        int index280_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA280_21 = input.LA(1);
                        int index280_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA280_22 = input.LA(1);
                        int index280_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA280_23 = input.LA(1);
                        int index280_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA280_24 = input.LA(1);
                        int index280_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA280_25 = input.LA(1);
                        int index280_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA280_26 = input.LA(1);
                        int index280_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA280_27 = input.LA(1);
                        int index280_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA280_28 = input.LA(1);
                        int index280_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA280_29 = input.LA(1);
                        int index280_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA280_30 = input.LA(1);
                        int index280_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA280_31 = input.LA(1);
                        int index280_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA280_32 = input.LA(1);
                        int index280_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA280_33 = input.LA(1);
                        int index280_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA280_34 = input.LA(1);
                        int index280_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA280_35 = input.LA(1);
                        int index280_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA280_36 = input.LA(1);
                        int index280_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA280_37 = input.LA(1);
                        int index280_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA280_38 = input.LA(1);
                        int index280_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA280_39 = input.LA(1);
                        int index280_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA280_40 = input.LA(1);
                        int index280_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA280_41 = input.LA(1);
                        int index280_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA280_42 = input.LA(1);
                        int index280_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA280_43 = input.LA(1);
                        int index280_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA280_44 = input.LA(1);
                        int index280_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA280_45 = input.LA(1);
                        int index280_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA280_46 = input.LA(1);
                        int index280_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA280_47 = input.LA(1);
                        int index280_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA280_48 = input.LA(1);
                        int index280_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA280_49 = input.LA(1);
                        int index280_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred148_InternalN4JSParser()) ) {s = 75;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA280_50 = input.LA(1);
                        int index280_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred150_InternalN4JSParser()) ) {s = 76;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA280_51 = input.LA(1);
                        int index280_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA280_52 = input.LA(1);
                        int index280_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA280_53 = input.LA(1);
                        int index280_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA280_54 = input.LA(1);
                        int index280_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA280_55 = input.LA(1);
                        int index280_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA280_56 = input.LA(1);
                        int index280_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA280_57 = input.LA(1);
                        int index280_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA280_58 = input.LA(1);
                        int index280_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA280_59 = input.LA(1);
                        int index280_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA280_60 = input.LA(1);
                        int index280_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA280_61 = input.LA(1);
                        int index280_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA280_62 = input.LA(1);
                        int index280_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA280_63 = input.LA(1);
                        int index280_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA280_64 = input.LA(1);
                        int index280_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA280_65 = input.LA(1);
                        int index280_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA280_66 = input.LA(1);
                        int index280_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA280_67 = input.LA(1);
                        int index280_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        input.seek(index280_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA280_68 = input.LA(1);
                        int index280_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred147_InternalN4JSParser()) ) {s = 74;}
                        else if ( (synpred153_InternalN4JSParser()) ) {s = 70;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index280_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 280, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA273 extends DFA {
        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_179;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "8425:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA276 extends DFA {
        public DFA276(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "8781:6: ( (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_193s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\1\uffff\1\1\2\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1\46\uffff\1\14",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13\64\uffff\1\13",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\1\3\uffff\1\1\1\13\15\uffff\1\1"
    };
    static final short[][] dfa_193 = unpackEncodedStringArray(dfa_193s);
    class DFA279 extends DFA {
        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = dfa_186;
            this.eof = dfa_186;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_191;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "8838:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }
    class DFA282 extends DFA {
        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "8923:4: ( (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA286 extends DFA {
        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "9028:4: ( (DeclaredReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_194s = "\20\uffff";
    static final String dfa_195s = "\10\4\1\uffff\1\4\4\144\1\uffff\1\4";
    static final String dfa_196s = "\1\u0095\7\u00a5\1\uffff\1\u0095\4\156\1\uffff\1\u0095";
    static final String dfa_197s = "\10\uffff\1\1\5\uffff\1\2\1\uffff";
    static final String dfa_198s = "\20\uffff}>";
    static final String[] dfa_199s = {
            "\1\15\1\13\2\16\1\4\7\16\1\6\13\16\1\5\2\16\1\3\7\16\1\14\2\16\1\2\5\16\1\11\1\16\1\12\1\1\1\16\4\uffff\10\16\21\uffff\5\16\24\uffff\1\16\2\uffff\1\10\2\uffff\1\10\3\uffff\1\16\1\uffff\3\16\2\uffff\1\16\1\uffff\1\7\2\uffff\1\16\23\uffff\1\16",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\2\uffff\1\10\1\uffff\1\16\1\uffff\1\10\2\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10\17\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\10\uffff\1\10\4\uffff\1\16\4\uffff\1\17\1\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "\1\16\4\uffff\1\16\4\uffff\1\10",
            "",
            "\61\10\4\uffff\10\10\21\uffff\5\10\15\uffff\1\16\6\uffff\1\10\11\uffff\1\10\1\uffff\3\10\2\uffff\1\10\1\uffff\1\10\2\uffff\1\10\23\uffff\1\10"
    };
    static final short[] dfa_194 = DFA.unpackEncodedString(dfa_194s);
    static final char[] dfa_195 = DFA.unpackEncodedStringToUnsignedChars(dfa_195s);
    static final char[] dfa_196 = DFA.unpackEncodedStringToUnsignedChars(dfa_196s);
    static final short[] dfa_197 = DFA.unpackEncodedString(dfa_197s);
    static final short[] dfa_198 = DFA.unpackEncodedString(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);
    class DFA289 extends DFA {
        public DFA289(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 289;
            this.eot = dfa_194;
            this.eof = dfa_194;
            this.min = dfa_195;
            this.max = dfa_196;
            this.accept = dfa_197;
            this.special = dfa_198;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "9118:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA291 extends DFA {
        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_194;
            this.eof = dfa_194;
            this.min = dfa_195;
            this.max = dfa_196;
            this.accept = dfa_197;
            this.special = dfa_198;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "9183:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA293 extends DFA {
        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = dfa_186;
            this.eof = dfa_187;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_191;
            this.transition = dfa_192;
        }
        public String getDescription() {
            return "9232:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    class DFA294 extends DFA {
        public DFA294(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 294;
            this.eot = dfa_186;
            this.eof = dfa_186;
            this.min = dfa_188;
            this.max = dfa_189;
            this.accept = dfa_190;
            this.special = dfa_191;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "9255:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_200s = "\71\uffff";
    static final String dfa_201s = "\2\4\67\uffff";
    static final String dfa_202s = "\2\u0095\67\uffff";
    static final String dfa_203s = "\2\uffff\1\3\1\1\65\2";
    static final String dfa_204s = "\1\uffff\1\0\67\uffff}>";
    static final String[] dfa_205s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\65\3\uffff\1\36\1\14\2\uffff\1\43\1\40\1\uffff\1\17\1\uffff\1\24\1\uffff\1\33\1\32\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\56\1\5\1\53\1\25\7\uffff\1\11\1\13\1\4\1\41\1\12\12\uffff\1\60\10\uffff\1\20\3\uffff\1\23\5\uffff\1\63\5\uffff\1\3\1\57\2\uffff\1\42\3\uffff\1\64\1\61\2\uffff\1\62\6\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\7\2\uffff\1\55\12\uffff\1\70\1\67\7\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_200 = DFA.unpackEncodedString(dfa_200s);
    static final char[] dfa_201 = DFA.unpackEncodedStringToUnsignedChars(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final short[] dfa_203 = DFA.unpackEncodedString(dfa_203s);
    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final short[][] dfa_205 = unpackEncodedStringArray(dfa_205s);
    class DFA325 extends DFA {
        public DFA325(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 325;
            this.eot = dfa_200;
            this.eof = dfa_200;
            this.min = dfa_201;
            this.max = dfa_202;
            this.accept = dfa_203;
            this.special = dfa_204;
            this.transition = dfa_205;
        }
        public String getDescription() {
            return "10401:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>ConcreteTypeArgumentsParserRuleCall_1_2= ruleConcreteTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA325_1 = input.LA(1);
                        int index325_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA325_1==FullStop) && (synpred176_InternalN4JSParser())) {s = 3;}
                        else if ((LA325_1>=4 && LA325_1<=149 && (s=T2S.M_25[LA325_1-(4)])>=0) && (synpred177_InternalN4JSParser())) { /* 54 cases */ }
                        input.seek(index325_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 325, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_206s = "\70\uffff";
    static final String dfa_207s = "\2\4\66\uffff";
    static final String dfa_208s = "\2\u0095\66\uffff";
    static final String dfa_209s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_210s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_211s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\12\uffff\1\2\10\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\2\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\12\uffff\1\57\10\uffff\1\17\3\uffff\1\22\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\41\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\12\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_206 = DFA.unpackEncodedString(dfa_206s);
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[][] dfa_211 = unpackEncodedStringArray(dfa_211s);
    class DFA333 extends DFA {
        public DFA333(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 333;
            this.eot = dfa_206;
            this.eof = dfa_206;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "10539:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>ConcreteTypeArgumentsParserRuleCall_1_2= ruleConcreteTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_1_3_3_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_2_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (OptionalChainingQuestionMarkFullStopKeyword_2_1_2_1_0= QuestionMarkFullStop ) )? ( (TemplateTemplateLiteralParserRuleCall_2_1_2_2_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA333_1 = input.LA(1);
                        int index333_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA333_1==FullStop) && (synpred180_InternalN4JSParser())) {s = 3;}
                        else if ((LA333_1>=4 && LA333_1<=149 && (s=T2S.M_26[LA333_1-(4)])>=0) && (synpred181_InternalN4JSParser())) { /* 53 cases */ }
                        input.seek(index333_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 333, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_212s = "\1\1\101\uffff";
    static final String dfa_213s = "\1\7\1\uffff\1\4\77\uffff";
    static final String dfa_214s = "\1\u0099\1\uffff\1\u0095\77\uffff";
    static final String dfa_215s = "\1\uffff\1\2\1\uffff\77\1";
    static final String dfa_216s = "\1\0\1\uffff\1\1\77\uffff}>";
    static final String[] dfa_217s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\27\1\22\1\34\1\uffff\1\31\1\35\1\37\1\16\2\uffff\1\15\1\65\3\uffff\1\36\1\14\1\71\1\uffff\1\43\1\40\1\uffff\1\17\1\uffff\1\24\1\73\1\33\1\32\2\uffff\1\66\1\uffff\1\54\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\56\1\5\1\53\1\25\1\72\6\uffff\1\11\1\13\1\4\1\41\1\12\7\uffff\1\74\1\uffff\1\75\1\60\10\uffff\1\20\3\uffff\1\23\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\42\1\1\2\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\7\2\uffff\1\55\12\uffff\1\70\1\67\7\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final char[] dfa_213 = DFA.unpackEncodedStringToUnsignedChars(dfa_213s);
    static final char[] dfa_214 = DFA.unpackEncodedStringToUnsignedChars(dfa_214s);
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final short[] dfa_216 = DFA.unpackEncodedString(dfa_216s);
    static final short[][] dfa_217 = unpackEncodedStringArray(dfa_217s);
    class DFA348 extends DFA {
        public DFA348(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 348;
            this.eot = dfa_19;
            this.eof = dfa_212;
            this.min = dfa_213;
            this.max = dfa_214;
            this.accept = dfa_215;
            this.special = dfa_216;
            this.transition = dfa_217;
        }
        public String getDescription() {
            return "()* loopback of 11086:2: ( ( ( ( ( ( ruleAdditiveOperator ) ) ) )=> ( ( ( ruleAdditiveOperator ) ) ) ) ( (RhsMultiplicativeExpressionParserRuleCall_1_1_0= ruleMultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA348_0 = input.LA(1);
                        int index348_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_0==EOF||LA348_0==Instanceof||LA348_0==ExclamationMarkEqualsSignEqualsSign||(LA348_0>=LessThanSignLessThanSignEqualsSign && LA348_0<=EqualsSignEqualsSignEqualsSign)||(LA348_0>=ExclamationMarkEqualsSign && LA348_0<=AsteriskEqualsSign)||LA348_0==PlusSignEqualsSign||(LA348_0>=SolidusEqualsSign && LA348_0<=EqualsSignEqualsSign)||LA348_0==QuestionMarkQuestionMark||LA348_0==CircumflexAccentEqualsSign||(LA348_0>=In && LA348_0<=VerticalLineVerticalLine)||LA348_0==Ampersand||LA348_0==RightParenthesis||LA348_0==Comma||(LA348_0>=Colon && LA348_0<=QuestionMark)||(LA348_0>=RightSquareBracket && LA348_0<=CircumflexAccent)||(LA348_0>=VerticalLine && LA348_0<=RightCurlyBracket)||LA348_0==RULE_ML_COMMENT||LA348_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA348_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA348_0==PlusSign) && (synpred190_InternalN4JSParser())) {s = 3;}
                        input.seek(index348_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA348_2 = input.LA(1);
                        int index348_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA348_2==EqualsSign) ) {s = 1;}
                        else if ((LA348_2>=4 && LA348_2<=149 && (s=T2S.M_27[LA348_2-(4)])>=0) && (synpred190_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index348_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 348, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_218s = "\101\uffff";
    static final String dfa_219s = "\1\1\100\uffff";
    static final String dfa_220s = "\1\7\1\uffff\1\4\76\uffff";
    static final String dfa_221s = "\1\u0099\1\uffff\1\u0095\76\uffff";
    static final String dfa_222s = "\1\uffff\1\2\1\uffff\76\1";
    static final String dfa_223s = "\1\0\1\uffff\1\1\76\uffff}>";
    static final String[] dfa_224s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\3\1\1\1\2\2\uffff\6\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\64\3\uffff\1\35\1\13\1\70\1\uffff\1\42\1\37\1\uffff\1\16\1\uffff\1\23\1\72\1\32\1\31\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\55\1\5\1\52\1\24\1\71\6\uffff\1\10\1\12\1\4\1\40\1\11\7\uffff\1\73\1\uffff\1\74\1\57\10\uffff\1\17\3\uffff\1\22\2\uffff\1\100\2\uffff\1\62\2\uffff\1\75\1\uffff\1\76\1\uffff\1\56\2\uffff\1\41\1\1\2\uffff\1\63\1\60\2\uffff\1\61\2\uffff\1\77\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\12\uffff\1\67\1\66\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final char[] dfa_220 = DFA.unpackEncodedStringToUnsignedChars(dfa_220s);
    static final char[] dfa_221 = DFA.unpackEncodedStringToUnsignedChars(dfa_221s);
    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final short[][] dfa_224 = unpackEncodedStringArray(dfa_224s);
    class DFA349 extends DFA {
        public DFA349(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 349;
            this.eot = dfa_218;
            this.eof = dfa_219;
            this.min = dfa_220;
            this.max = dfa_221;
            this.accept = dfa_222;
            this.special = dfa_223;
            this.transition = dfa_224;
        }
        public String getDescription() {
            return "()* loopback of 11122:2: ( ( ( ( ( ( ruleAdditiveOperator ) ) ) )=> ( ( ( ruleAdditiveOperator ) ) ) ) ( (RhsMultiplicativeExpressionParserRuleCall_1_1_0= norm1_MultiplicativeExpression ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA349_0 = input.LA(1);
                        int index349_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_0==EOF||LA349_0==Instanceof||LA349_0==ExclamationMarkEqualsSignEqualsSign||(LA349_0>=LessThanSignLessThanSignEqualsSign && LA349_0<=EqualsSignEqualsSignEqualsSign)||(LA349_0>=ExclamationMarkEqualsSign && LA349_0<=AsteriskEqualsSign)||LA349_0==PlusSignEqualsSign||(LA349_0>=SolidusEqualsSign && LA349_0<=EqualsSignEqualsSign)||LA349_0==QuestionMarkQuestionMark||LA349_0==CircumflexAccentEqualsSign||(LA349_0>=In && LA349_0<=VerticalLineVerticalLine)||LA349_0==Ampersand||LA349_0==RightParenthesis||LA349_0==Comma||(LA349_0>=Colon && LA349_0<=QuestionMark)||(LA349_0>=RightSquareBracket && LA349_0<=CircumflexAccent)||(LA349_0>=VerticalLine && LA349_0<=RightCurlyBracket)||LA349_0==RULE_ML_COMMENT||LA349_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA349_0==HyphenMinus) ) {s = 2;}
                        else if ( (LA349_0==PlusSign) && (synpred191_InternalN4JSParser())) {s = 3;}
                        input.seek(index349_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA349_2 = input.LA(1);
                        int index349_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA349_2==EqualsSign) ) {s = 1;}
                        else if ((LA349_2>=4 && LA349_2<=149 && (s=T2S.M_28[LA349_2-(4)])>=0) && (synpred191_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index349_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 349, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_225s = "\104\uffff";
    static final String dfa_226s = "\1\1\103\uffff";
    static final String dfa_227s = "\1\7\1\uffff\1\4\1\uffff\2\4\76\uffff";
    static final String dfa_228s = "\1\u0099\1\uffff\1\u0095\1\uffff\2\u0095\76\uffff";
    static final String dfa_229s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\76\1";
    static final String dfa_230s = "\1\2\3\uffff\1\1\1\0\76\uffff}>";
    static final String[] dfa_231s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\12\uffff\2\1\7\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\1\5\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\12\uffff\1\72\1\71\7\uffff\1\47",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\60\1\7\1\55\1\27\1\74\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\1\2\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\11\2\uffff\1\57\12\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final short[] dfa_226 = DFA.unpackEncodedString(dfa_226s);
    static final char[] dfa_227 = DFA.unpackEncodedStringToUnsignedChars(dfa_227s);
    static final char[] dfa_228 = DFA.unpackEncodedStringToUnsignedChars(dfa_228s);
    static final short[] dfa_229 = DFA.unpackEncodedString(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[][] dfa_231 = unpackEncodedStringArray(dfa_231s);
    class DFA350 extends DFA {
        public DFA350(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 350;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_228;
            this.accept = dfa_229;
            this.special = dfa_230;
            this.transition = dfa_231;
        }
        public String getDescription() {
            return "()* loopback of 11163:2: ( ( ( ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA350_5 = input.LA(1);
                        int index350_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_5==EqualsSign) ) {s = 1;}
                        else if ((LA350_5>=4 && LA350_5<=149 && (s=T2S.M_29[LA350_5-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index350_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA350_4 = input.LA(1);
                        int index350_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA350_4==EqualsSign) ) {s = 1;}
                        else if ((LA350_4>=4 && LA350_4<=149 && (s=T2S.M_30[LA350_4-(4)])>=0) && (synpred192_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index350_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA350_0 = input.LA(1);
                        int index350_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA350_0==EOF||LA350_0==Instanceof||LA350_0==ExclamationMarkEqualsSignEqualsSign||(LA350_0>=LessThanSignLessThanSignEqualsSign && LA350_0<=EqualsSignEqualsSignEqualsSign)||(LA350_0>=ExclamationMarkEqualsSign && LA350_0<=AsteriskEqualsSign)||LA350_0==PlusSignEqualsSign||LA350_0==SolidusEqualsSign||(LA350_0>=LessThanSignEqualsSign && LA350_0<=EqualsSignEqualsSign)||LA350_0==QuestionMarkQuestionMark||LA350_0==CircumflexAccentEqualsSign||(LA350_0>=In && LA350_0<=VerticalLineVerticalLine)||LA350_0==Ampersand||LA350_0==RightParenthesis||(LA350_0>=Comma && LA350_0<=HyphenMinus)||(LA350_0>=Colon && LA350_0<=EqualsSign)||LA350_0==QuestionMark||(LA350_0>=RightSquareBracket && LA350_0<=CircumflexAccent)||(LA350_0>=VerticalLine && LA350_0<=RightCurlyBracket)||LA350_0==RULE_ML_COMMENT||LA350_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA350_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA350_0==LessThanSignLessThanSign) && (synpred192_InternalN4JSParser())) {s = 3;}
                        input.seek(index350_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 350, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_232s = "\1\1\102\uffff";
    static final String dfa_233s = "\1\7\1\uffff\1\4\1\uffff\2\4\75\uffff";
    static final String dfa_234s = "\1\u0099\1\uffff\1\u0095\1\uffff\2\u0095\75\uffff";
    static final String dfa_235s = "\1\uffff\1\2\1\uffff\1\1\2\uffff\75\1";
    static final String dfa_236s = "\1\2\3\uffff\1\1\1\0\75\uffff}>";
    static final String[] dfa_237s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\3\2\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\1\uffff\2\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\2\1\10\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\12\uffff\2\1\7\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\12\uffff\1\71\1\70\7\uffff\1\46",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\66\3\uffff\1\37\1\15\1\72\1\uffff\1\44\1\41\1\uffff\1\20\1\uffff\1\25\1\74\1\34\1\33\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\57\1\7\1\54\1\26\1\73\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\75\1\uffff\1\76\1\61\10\uffff\1\21\3\uffff\1\24\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\43\1\1\2\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\12\uffff\1\71\1\70\7\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final char[] dfa_233 = DFA.unpackEncodedStringToUnsignedChars(dfa_233s);
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final short[] dfa_235 = DFA.unpackEncodedString(dfa_235s);
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[][] dfa_237 = unpackEncodedStringArray(dfa_237s);
    class DFA351 extends DFA {
        public DFA351(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 351;
            this.eot = dfa_100;
            this.eof = dfa_232;
            this.min = dfa_233;
            this.max = dfa_234;
            this.accept = dfa_235;
            this.special = dfa_236;
            this.transition = dfa_237;
        }
        public String getDescription() {
            return "()* loopback of 11376:2: ( ( ( ( ( ruleShiftOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA351_5 = input.LA(1);
                        int index351_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_5==EqualsSign) ) {s = 1;}
                        else if ((LA351_5>=4 && LA351_5<=149 && (s=T2S.M_31[LA351_5-(4)])>=0) && (synpred194_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index351_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA351_4 = input.LA(1);
                        int index351_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_4==GreaterThanSign) ) {s = 5;}
                        else if ( (LA351_4==EqualsSign) ) {s = 1;}
                        else if ((LA351_4>=4 && LA351_4<=149 && (s=T2S.M_32[LA351_4-(4)])>=0) && (synpred194_InternalN4JSParser())) { /* 61 cases */ }
                        input.seek(index351_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA351_0 = input.LA(1);
                        int index351_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA351_0==EOF||LA351_0==Instanceof||LA351_0==ExclamationMarkEqualsSignEqualsSign||(LA351_0>=LessThanSignLessThanSignEqualsSign && LA351_0<=EqualsSignEqualsSignEqualsSign)||(LA351_0>=ExclamationMarkEqualsSign && LA351_0<=AsteriskEqualsSign)||LA351_0==PlusSignEqualsSign||LA351_0==SolidusEqualsSign||(LA351_0>=LessThanSignEqualsSign && LA351_0<=EqualsSignEqualsSign)||LA351_0==QuestionMarkQuestionMark||LA351_0==CircumflexAccentEqualsSign||(LA351_0>=In && LA351_0<=VerticalLineVerticalLine)||LA351_0==Ampersand||LA351_0==RightParenthesis||(LA351_0>=Comma && LA351_0<=HyphenMinus)||(LA351_0>=Colon && LA351_0<=EqualsSign)||LA351_0==QuestionMark||(LA351_0>=RightSquareBracket && LA351_0<=CircumflexAccent)||(LA351_0>=VerticalLine && LA351_0<=RightCurlyBracket)||LA351_0==RULE_ML_COMMENT||LA351_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA351_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA351_0==LessThanSignLessThanSign) && (synpred194_InternalN4JSParser())) {s = 3;}
                        input.seek(index351_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 351, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_238s = "\105\uffff";
    static final String dfa_239s = "\1\1\104\uffff";
    static final String dfa_240s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_241s = "\1\160\1\uffff\1\u0095\102\uffff";
    static final String dfa_242s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_243s = "\1\1\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_244s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\2\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\61\1\10\1\56\1\30\1\75\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\6\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\12\2\uffff\1\60\12\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_238 = DFA.unpackEncodedString(dfa_238s);
    static final short[] dfa_239 = DFA.unpackEncodedString(dfa_239s);
    static final char[] dfa_240 = DFA.unpackEncodedStringToUnsignedChars(dfa_240s);
    static final char[] dfa_241 = DFA.unpackEncodedStringToUnsignedChars(dfa_241s);
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final short[] dfa_243 = DFA.unpackEncodedString(dfa_243s);
    static final short[][] dfa_244 = unpackEncodedStringArray(dfa_244s);
    class DFA354 extends DFA {
        public DFA354(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 354;
            this.eot = dfa_238;
            this.eof = dfa_239;
            this.min = dfa_240;
            this.max = dfa_241;
            this.accept = dfa_242;
            this.special = dfa_243;
            this.transition = dfa_244;
        }
        public String getDescription() {
            return "()* loopback of 11623:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA354_2 = input.LA(1);
                        int index354_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA354_2>=4 && LA354_2<=149 && (s=T2S.M_33[LA354_2-(4)])>=0) && (synpred196_InternalN4JSParser())) { /* 64 cases */ }
                        input.seek(index354_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA354_0 = input.LA(1);
                        int index354_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA354_0==EOF||LA354_0==ExclamationMarkEqualsSignEqualsSign||(LA354_0>=LessThanSignLessThanSignEqualsSign && LA354_0<=EqualsSignEqualsSignEqualsSign)||(LA354_0>=ExclamationMarkEqualsSign && LA354_0<=AsteriskEqualsSign)||LA354_0==PlusSignEqualsSign||LA354_0==SolidusEqualsSign||LA354_0==EqualsSignEqualsSign||LA354_0==QuestionMarkQuestionMark||LA354_0==CircumflexAccentEqualsSign||(LA354_0>=In && LA354_0<=VerticalLineVerticalLine)||LA354_0==Ampersand||(LA354_0>=Comma && LA354_0<=HyphenMinus)||LA354_0==Semicolon||LA354_0==EqualsSign||LA354_0==QuestionMark||LA354_0==CircumflexAccent||(LA354_0>=VerticalLine && LA354_0<=RightCurlyBracket)) ) {s = 1;}
                        else if ( (LA354_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA354_0==LessThanSign) && (synpred196_InternalN4JSParser())) {s = 3;}
                        else if ( (LA354_0==LessThanSignEqualsSign) && (synpred196_InternalN4JSParser())) {s = 4;}
                        else if ( (LA354_0==Instanceof) && (synpred196_InternalN4JSParser())) {s = 5;}
                        input.seek(index354_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 354, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_245s = "\106\uffff";
    static final String dfa_246s = "\1\1\105\uffff";
    static final String dfa_247s = "\1\7\1\uffff\1\4\103\uffff";
    static final String dfa_248s = "\1\u0099\1\uffff\1\u0095\103\uffff";
    static final String dfa_249s = "\1\uffff\1\2\1\uffff\103\1";
    static final String dfa_250s = "\1\0\1\uffff\1\1\103\uffff}>";
    static final String[] dfa_251s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\71\3\uffff\1\42\1\20\1\75\1\uffff\1\47\1\44\1\uffff\1\23\1\uffff\1\30\1\77\1\37\1\36\2\uffff\1\72\1\uffff\1\60\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\62\1\11\1\57\1\31\1\76\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\100\1\uffff\1\101\1\64\10\uffff\1\24\3\uffff\1\27\2\uffff\1\105\2\uffff\1\67\2\uffff\1\102\1\uffff\1\103\1\uffff\1\63\2\uffff\1\46\1\7\1\1\1\uffff\1\70\1\65\2\uffff\1\66\2\uffff\1\104\3\uffff\1\50\1\uffff\1\55\1\52\1\53\1\54\1\uffff\1\56\1\uffff\1\13\2\uffff\1\61\12\uffff\1\74\1\73\7\uffff\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[] dfa_246 = DFA.unpackEncodedString(dfa_246s);
    static final char[] dfa_247 = DFA.unpackEncodedStringToUnsignedChars(dfa_247s);
    static final char[] dfa_248 = DFA.unpackEncodedStringToUnsignedChars(dfa_248s);
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final short[][] dfa_251 = unpackEncodedStringArray(dfa_251s);
    class DFA355 extends DFA {
        public DFA355(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 355;
            this.eot = dfa_245;
            this.eof = dfa_246;
            this.min = dfa_247;
            this.max = dfa_248;
            this.accept = dfa_249;
            this.special = dfa_250;
            this.transition = dfa_251;
        }
        public String getDescription() {
            return "()* loopback of 11836:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA355_0 = input.LA(1);
                        int index355_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA355_0==EOF||LA355_0==ExclamationMarkEqualsSignEqualsSign||(LA355_0>=LessThanSignLessThanSignEqualsSign && LA355_0<=EqualsSignEqualsSignEqualsSign)||(LA355_0>=ExclamationMarkEqualsSign && LA355_0<=AsteriskEqualsSign)||LA355_0==PlusSignEqualsSign||LA355_0==SolidusEqualsSign||LA355_0==EqualsSignEqualsSign||LA355_0==QuestionMarkQuestionMark||LA355_0==CircumflexAccentEqualsSign||(LA355_0>=VerticalLineEqualsSign && LA355_0<=VerticalLineVerticalLine)||LA355_0==Ampersand||LA355_0==RightParenthesis||(LA355_0>=Comma && LA355_0<=HyphenMinus)||(LA355_0>=Colon && LA355_0<=Semicolon)||LA355_0==EqualsSign||LA355_0==QuestionMark||(LA355_0>=RightSquareBracket && LA355_0<=CircumflexAccent)||(LA355_0>=VerticalLine && LA355_0<=RightCurlyBracket)||LA355_0==RULE_ML_COMMENT||LA355_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA355_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA355_0==LessThanSign) && (synpred198_InternalN4JSParser())) {s = 3;}
                        else if ( (LA355_0==LessThanSignEqualsSign) && (synpred198_InternalN4JSParser())) {s = 4;}
                        else if ( (LA355_0==Instanceof) && (synpred198_InternalN4JSParser())) {s = 5;}
                        else if ( (LA355_0==In) && (synpred198_InternalN4JSParser())) {s = 6;}
                        input.seek(index355_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA355_2 = input.LA(1);
                        int index355_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA355_2>=4 && LA355_2<=149 && (s=T2S.M_34[LA355_2-(4)])>=0) && (synpred198_InternalN4JSParser())) { /* 63 cases */ }
                        else if ( (LA355_2==GreaterThanSign) ) {s = 1;}
                        input.seek(index355_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 355, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_252s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_253s = "\1\157\1\uffff\1\u0095\101\uffff";
    static final String dfa_254s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_255s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_256s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\67\3\uffff\1\40\1\16\1\73\1\uffff\1\45\1\42\1\uffff\1\21\1\uffff\1\26\1\75\1\35\1\34\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\60\1\10\1\55\1\27\1\74\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\76\1\uffff\1\77\1\62\10\uffff\1\22\3\uffff\1\25\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\44\1\6\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\12\uffff\1\72\1\71\7\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_252 = DFA.unpackEncodedStringToUnsignedChars(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final short[] dfa_254 = DFA.unpackEncodedString(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[][] dfa_256 = unpackEncodedStringArray(dfa_256s);
    class DFA356 extends DFA {
        public DFA356(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 356;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_252;
            this.max = dfa_253;
            this.accept = dfa_254;
            this.special = dfa_255;
            this.transition = dfa_256;
        }
        public String getDescription() {
            return "()* loopback of 12049:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA356_2 = input.LA(1);
                        int index356_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA356_2>=4 && LA356_2<=149 && (s=T2S.M_35[LA356_2-(4)])>=0) && (synpred200_InternalN4JSParser())) { /* 62 cases */ }
                        else if ( (LA356_2==GreaterThanSign) ) {s = 1;}
                        input.seek(index356_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA356_0 = input.LA(1);
                        int index356_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA356_0==EOF||LA356_0==ExclamationMarkEqualsSignEqualsSign||(LA356_0>=LessThanSignLessThanSignEqualsSign && LA356_0<=EqualsSignEqualsSignEqualsSign)||(LA356_0>=ExclamationMarkEqualsSign && LA356_0<=AsteriskEqualsSign)||LA356_0==PlusSignEqualsSign||LA356_0==SolidusEqualsSign||LA356_0==EqualsSignEqualsSign||LA356_0==QuestionMarkQuestionMark||LA356_0==CircumflexAccentEqualsSign||(LA356_0>=In && LA356_0<=VerticalLineVerticalLine)||LA356_0==Ampersand||(LA356_0>=Comma && LA356_0<=HyphenMinus)||LA356_0==Semicolon||LA356_0==EqualsSign||LA356_0==QuestionMark||LA356_0==CircumflexAccent||LA356_0==VerticalLine) ) {s = 1;}
                        else if ( (LA356_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA356_0==LessThanSign) && (synpred200_InternalN4JSParser())) {s = 3;}
                        else if ( (LA356_0==LessThanSignEqualsSign) && (synpred200_InternalN4JSParser())) {s = 4;}
                        else if ( (LA356_0==Instanceof) && (synpred200_InternalN4JSParser())) {s = 5;}
                        input.seek(index356_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 356, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_257s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_258s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_259s = {
            "\1\5\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\4\1\1\2\uffff\1\1\1\uffff\1\1\3\uffff\1\6\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\2\1\2\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\70\3\uffff\1\41\1\17\1\74\1\uffff\1\46\1\43\1\uffff\1\22\1\uffff\1\27\1\76\1\36\1\35\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\61\1\11\1\56\1\30\1\75\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\77\1\uffff\1\100\1\63\10\uffff\1\23\3\uffff\1\26\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\45\1\7\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\12\uffff\1\73\1\72\7\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_257 = DFA.unpackEncodedStringToUnsignedChars(dfa_257s);
    static final short[] dfa_258 = DFA.unpackEncodedString(dfa_258s);
    static final short[][] dfa_259 = unpackEncodedStringArray(dfa_259s);
    class DFA357 extends DFA {
        public DFA357(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 357;
            this.eot = dfa_238;
            this.eof = dfa_239;
            this.min = dfa_240;
            this.max = dfa_257;
            this.accept = dfa_242;
            this.special = dfa_258;
            this.transition = dfa_259;
        }
        public String getDescription() {
            return "()* loopback of 12259:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA357_0 = input.LA(1);
                        int index357_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA357_0==EOF||LA357_0==ExclamationMarkEqualsSignEqualsSign||(LA357_0>=LessThanSignLessThanSignEqualsSign && LA357_0<=EqualsSignEqualsSignEqualsSign)||(LA357_0>=ExclamationMarkEqualsSign && LA357_0<=AsteriskEqualsSign)||LA357_0==PlusSignEqualsSign||LA357_0==SolidusEqualsSign||LA357_0==EqualsSignEqualsSign||LA357_0==QuestionMarkQuestionMark||LA357_0==CircumflexAccentEqualsSign||(LA357_0>=VerticalLineEqualsSign && LA357_0<=VerticalLineVerticalLine)||LA357_0==Ampersand||LA357_0==RightParenthesis||(LA357_0>=Comma && LA357_0<=HyphenMinus)||(LA357_0>=Colon && LA357_0<=Semicolon)||LA357_0==EqualsSign||LA357_0==QuestionMark||(LA357_0>=RightSquareBracket && LA357_0<=CircumflexAccent)||(LA357_0>=VerticalLine && LA357_0<=RightCurlyBracket)||LA357_0==RULE_ML_COMMENT||LA357_0==RULE_EOL) ) {s = 1;}
                        else if ( (LA357_0==GreaterThanSign) ) {s = 2;}
                        else if ( (LA357_0==LessThanSign) && (synpred202_InternalN4JSParser())) {s = 3;}
                        else if ( (LA357_0==LessThanSignEqualsSign) && (synpred202_InternalN4JSParser())) {s = 4;}
                        else if ( (LA357_0==Instanceof) && (synpred202_InternalN4JSParser())) {s = 5;}
                        else if ( (LA357_0==In) && (synpred202_InternalN4JSParser())) {s = 6;}
                        input.seek(index357_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA357_2 = input.LA(1);
                        int index357_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA357_2==GreaterThanSign) ) {s = 1;}
                        else if ((LA357_2>=4 && LA357_2<=149 && (s=T2S.M_36[LA357_2-(4)])>=0) && (synpred202_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index357_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 357, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_260s = "\1\4\35\0\44\uffff";
    static final String dfa_261s = "\1\u0095\35\0\44\uffff";
    static final String dfa_262s = "\36\uffff\1\4\40\uffff\1\1\1\3\1\2";
    static final String dfa_263s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\44\uffff}>";
    static final String[] dfa_264s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\1\uffff\1\36\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\2\36\10\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\12\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_260 = DFA.unpackEncodedStringToUnsignedChars(dfa_260s);
    static final char[] dfa_261 = DFA.unpackEncodedStringToUnsignedChars(dfa_261s);
    static final short[] dfa_262 = DFA.unpackEncodedString(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final short[][] dfa_264 = unpackEncodedStringArray(dfa_264s);
    class DFA395 extends DFA {
        public DFA395(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 395;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_260;
            this.max = dfa_261;
            this.accept = dfa_262;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "13861:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> ruleStrictFormalParameters ) ) ) ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA395_1 = input.LA(1);
                        int index395_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred236_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA395_2 = input.LA(1);
                        int index395_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA395_3 = input.LA(1);
                        int index395_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA395_4 = input.LA(1);
                        int index395_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA395_5 = input.LA(1);
                        int index395_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA395_6 = input.LA(1);
                        int index395_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA395_7 = input.LA(1);
                        int index395_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA395_8 = input.LA(1);
                        int index395_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA395_9 = input.LA(1);
                        int index395_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA395_10 = input.LA(1);
                        int index395_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA395_11 = input.LA(1);
                        int index395_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA395_12 = input.LA(1);
                        int index395_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA395_13 = input.LA(1);
                        int index395_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA395_14 = input.LA(1);
                        int index395_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA395_15 = input.LA(1);
                        int index395_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA395_16 = input.LA(1);
                        int index395_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA395_17 = input.LA(1);
                        int index395_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA395_18 = input.LA(1);
                        int index395_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA395_19 = input.LA(1);
                        int index395_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA395_20 = input.LA(1);
                        int index395_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA395_21 = input.LA(1);
                        int index395_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA395_22 = input.LA(1);
                        int index395_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA395_23 = input.LA(1);
                        int index395_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA395_24 = input.LA(1);
                        int index395_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA395_25 = input.LA(1);
                        int index395_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA395_26 = input.LA(1);
                        int index395_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA395_27 = input.LA(1);
                        int index395_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA395_28 = input.LA(1);
                        int index395_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA395_29 = input.LA(1);
                        int index395_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index395_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 395, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_265s = "\16\uffff";
    static final String dfa_266s = "\1\14\15\uffff";
    static final String dfa_267s = "\1\67\13\0\2\uffff";
    static final String dfa_268s = "\1\160\13\0\2\uffff";
    static final String dfa_269s = "\14\uffff\1\2\1\1";
    static final String dfa_270s = "\1\uffff\1\2\1\12\1\10\1\4\1\3\1\5\1\6\1\0\1\1\1\11\1\7\2\uffff}>";
    static final String[] dfa_271s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10\7\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_265 = DFA.unpackEncodedString(dfa_265s);
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);
    static final char[] dfa_267 = DFA.unpackEncodedStringToUnsignedChars(dfa_267s);
    static final char[] dfa_268 = DFA.unpackEncodedStringToUnsignedChars(dfa_268s);
    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final short[][] dfa_271 = unpackEncodedStringArray(dfa_271s);
    class DFA394 extends DFA {
        public DFA394(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 394;
            this.eot = dfa_265;
            this.eof = dfa_266;
            this.min = dfa_267;
            this.max = dfa_268;
            this.accept = dfa_269;
            this.special = dfa_270;
            this.transition = dfa_271;
        }
        public String getDescription() {
            return "13934:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA394_8 = input.LA(1);
                        int index394_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA394_9 = input.LA(1);
                        int index394_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_9);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA394_1 = input.LA(1);
                        int index394_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA394_5 = input.LA(1);
                        int index394_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA394_4 = input.LA(1);
                        int index394_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA394_6 = input.LA(1);
                        int index394_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA394_7 = input.LA(1);
                        int index394_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA394_11 = input.LA(1);
                        int index394_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_11);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA394_3 = input.LA(1);
                        int index394_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA394_10 = input.LA(1);
                        int index394_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA394_2 = input.LA(1);
                        int index394_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index394_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 394, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA397 extends DFA {
        public DFA397(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 397;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_260;
            this.max = dfa_261;
            this.accept = dfa_262;
            this.special = dfa_263;
            this.transition = dfa_264;
        }
        public String getDescription() {
            return "13971:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( ruleStrictFormalParameters ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> ruleStrictFormalParameters ) ) ) ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA397_1 = input.LA(1);
                        int index397_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA397_2 = input.LA(1);
                        int index397_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred243_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA397_3 = input.LA(1);
                        int index397_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA397_4 = input.LA(1);
                        int index397_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA397_5 = input.LA(1);
                        int index397_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA397_6 = input.LA(1);
                        int index397_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA397_7 = input.LA(1);
                        int index397_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA397_8 = input.LA(1);
                        int index397_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA397_9 = input.LA(1);
                        int index397_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA397_10 = input.LA(1);
                        int index397_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA397_11 = input.LA(1);
                        int index397_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA397_12 = input.LA(1);
                        int index397_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA397_13 = input.LA(1);
                        int index397_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA397_14 = input.LA(1);
                        int index397_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA397_15 = input.LA(1);
                        int index397_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA397_16 = input.LA(1);
                        int index397_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA397_17 = input.LA(1);
                        int index397_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA397_18 = input.LA(1);
                        int index397_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA397_19 = input.LA(1);
                        int index397_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA397_20 = input.LA(1);
                        int index397_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA397_21 = input.LA(1);
                        int index397_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA397_22 = input.LA(1);
                        int index397_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA397_23 = input.LA(1);
                        int index397_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA397_24 = input.LA(1);
                        int index397_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA397_25 = input.LA(1);
                        int index397_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA397_26 = input.LA(1);
                        int index397_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA397_27 = input.LA(1);
                        int index397_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA397_28 = input.LA(1);
                        int index397_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA397_29 = input.LA(1);
                        int index397_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred246_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index397_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 397, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_272s = "\1\u0099\13\0\2\uffff";
    static final String dfa_273s = "\1\uffff\1\11\1\7\1\5\1\3\1\12\1\10\1\0\1\1\1\6\1\4\1\2\2\uffff}>";
    static final String[] dfa_274s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\1\6\2\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_272 = DFA.unpackEncodedStringToUnsignedChars(dfa_272s);
    static final short[] dfa_273 = DFA.unpackEncodedString(dfa_273s);
    static final short[][] dfa_274 = unpackEncodedStringArray(dfa_274s);
    class DFA396 extends DFA {
        public DFA396(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 396;
            this.eot = dfa_265;
            this.eof = dfa_266;
            this.min = dfa_267;
            this.max = dfa_272;
            this.accept = dfa_269;
            this.special = dfa_273;
            this.transition = dfa_274;
        }
        public String getDescription() {
            return "14044:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA396_7 = input.LA(1);
                        int index396_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA396_8 = input.LA(1);
                        int index396_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_8);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA396_11 = input.LA(1);
                        int index396_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA396_4 = input.LA(1);
                        int index396_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA396_10 = input.LA(1);
                        int index396_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA396_3 = input.LA(1);
                        int index396_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_3);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA396_9 = input.LA(1);
                        int index396_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA396_2 = input.LA(1);
                        int index396_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA396_6 = input.LA(1);
                        int index396_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA396_1 = input.LA(1);
                        int index396_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_1);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA396_5 = input.LA(1);
                        int index396_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred247_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index396_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 396, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_275s = "\1\4\34\0\45\uffff";
    static final String dfa_276s = "\1\u0095\34\0\45\uffff";
    static final String dfa_277s = "\35\uffff\1\4\1\5\40\uffff\1\1\1\3\1\2";
    static final String dfa_278s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\45\uffff}>";
    static final String[] dfa_279s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\1\uffff\1\36\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\2\36\10\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\12\uffff\2\36\7\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_275 = DFA.unpackEncodedStringToUnsignedChars(dfa_275s);
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[][] dfa_279 = unpackEncodedStringArray(dfa_279s);
    class DFA399 extends DFA {
        public DFA399(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 399;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_275;
            this.max = dfa_276;
            this.accept = dfa_277;
            this.special = dfa_278;
            this.transition = dfa_279;
        }
        public String getDescription() {
            return "14081:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> norm1_StrictFormalParameters ) ) ) ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA399_1 = input.LA(1);
                        int index399_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA399_2 = input.LA(1);
                        int index399_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred249_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA399_3 = input.LA(1);
                        int index399_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA399_4 = input.LA(1);
                        int index399_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA399_5 = input.LA(1);
                        int index399_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA399_6 = input.LA(1);
                        int index399_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA399_7 = input.LA(1);
                        int index399_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA399_8 = input.LA(1);
                        int index399_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA399_9 = input.LA(1);
                        int index399_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA399_10 = input.LA(1);
                        int index399_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA399_11 = input.LA(1);
                        int index399_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA399_12 = input.LA(1);
                        int index399_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA399_13 = input.LA(1);
                        int index399_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA399_14 = input.LA(1);
                        int index399_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA399_15 = input.LA(1);
                        int index399_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA399_16 = input.LA(1);
                        int index399_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA399_17 = input.LA(1);
                        int index399_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA399_18 = input.LA(1);
                        int index399_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA399_19 = input.LA(1);
                        int index399_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA399_20 = input.LA(1);
                        int index399_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA399_21 = input.LA(1);
                        int index399_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA399_22 = input.LA(1);
                        int index399_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA399_23 = input.LA(1);
                        int index399_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA399_24 = input.LA(1);
                        int index399_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA399_25 = input.LA(1);
                        int index399_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA399_26 = input.LA(1);
                        int index399_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA399_27 = input.LA(1);
                        int index399_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA399_28 = input.LA(1);
                        int index399_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index399_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 399, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_280s = "\1\150\13\0\2\uffff";
    static final String dfa_281s = "\1\uffff\1\7\1\4\1\10\1\5\1\11\1\0\1\1\1\12\1\2\1\6\1\3\2\uffff}>";
    static final String[] dfa_282s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\3\7\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\1\6\3\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_280 = DFA.unpackEncodedStringToUnsignedChars(dfa_280s);
    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final short[][] dfa_282 = unpackEncodedStringArray(dfa_282s);
    class DFA398 extends DFA {
        public DFA398(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 398;
            this.eot = dfa_265;
            this.eof = dfa_266;
            this.min = dfa_267;
            this.max = dfa_280;
            this.accept = dfa_269;
            this.special = dfa_281;
            this.transition = dfa_282;
        }
        public String getDescription() {
            return "14156:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA398_6 = input.LA(1);
                        int index398_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA398_7 = input.LA(1);
                        int index398_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA398_9 = input.LA(1);
                        int index398_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA398_11 = input.LA(1);
                        int index398_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA398_2 = input.LA(1);
                        int index398_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA398_4 = input.LA(1);
                        int index398_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA398_10 = input.LA(1);
                        int index398_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA398_1 = input.LA(1);
                        int index398_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_1);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA398_3 = input.LA(1);
                        int index398_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA398_5 = input.LA(1);
                        int index398_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA398_8 = input.LA(1);
                        int index398_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred253_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index398_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 398, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA401 extends DFA {
        public DFA401(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 401;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_275;
            this.max = dfa_276;
            this.accept = dfa_277;
            this.special = dfa_278;
            this.transition = dfa_279;
        }
        public String getDescription() {
            return "14193:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( norm1_StrictFormalParameters ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator ( ( LeftParenthesis )=> norm1_StrictFormalParameters ) ) ) ( ruleColonSepDeclaredReturnTypeRef )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA401_1 = input.LA(1);
                        int index401_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_InternalN4JSParser()) ) {s = 63;}
                        else if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA401_2 = input.LA(1);
                        int index401_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_InternalN4JSParser()) ) {s = 65;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA401_3 = input.LA(1);
                        int index401_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA401_4 = input.LA(1);
                        int index401_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA401_5 = input.LA(1);
                        int index401_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA401_6 = input.LA(1);
                        int index401_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA401_7 = input.LA(1);
                        int index401_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA401_8 = input.LA(1);
                        int index401_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA401_9 = input.LA(1);
                        int index401_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA401_10 = input.LA(1);
                        int index401_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA401_11 = input.LA(1);
                        int index401_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA401_12 = input.LA(1);
                        int index401_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA401_13 = input.LA(1);
                        int index401_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA401_14 = input.LA(1);
                        int index401_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA401_15 = input.LA(1);
                        int index401_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA401_16 = input.LA(1);
                        int index401_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA401_17 = input.LA(1);
                        int index401_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA401_18 = input.LA(1);
                        int index401_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA401_19 = input.LA(1);
                        int index401_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA401_20 = input.LA(1);
                        int index401_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA401_21 = input.LA(1);
                        int index401_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA401_22 = input.LA(1);
                        int index401_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA401_23 = input.LA(1);
                        int index401_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA401_24 = input.LA(1);
                        int index401_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA401_25 = input.LA(1);
                        int index401_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA401_26 = input.LA(1);
                        int index401_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA401_27 = input.LA(1);
                        int index401_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA401_28 = input.LA(1);
                        int index401_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred258_InternalN4JSParser()) ) {s = 64;}
                        else if ( (true) ) {s = 30;}
                        input.seek(index401_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 401, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_283s = "\1\uffff\1\10\1\4\1\11\1\5\1\12\1\0\1\1\1\6\1\2\1\7\1\3\2\uffff}>";
    static final short[] dfa_283 = DFA.unpackEncodedString(dfa_283s);
    class DFA400 extends DFA {
        public DFA400(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 400;
            this.eot = dfa_265;
            this.eof = dfa_266;
            this.min = dfa_267;
            this.max = dfa_272;
            this.accept = dfa_269;
            this.special = dfa_283;
            this.transition = dfa_274;
        }
        public String getDescription() {
            return "14268:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA400_6 = input.LA(1);
                        int index400_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA400_7 = input.LA(1);
                        int index400_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA400_9 = input.LA(1);
                        int index400_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA400_11 = input.LA(1);
                        int index400_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA400_2 = input.LA(1);
                        int index400_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_2);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA400_4 = input.LA(1);
                        int index400_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA400_8 = input.LA(1);
                        int index400_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA400_10 = input.LA(1);
                        int index400_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA400_1 = input.LA(1);
                        int index400_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA400_3 = input.LA(1);
                        int index400_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA400_5 = input.LA(1);
                        int index400_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 13;}
                        else if ( (true) ) {s = 12;}
                        input.seek(index400_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 400, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_284s = "\114\uffff";
    static final String dfa_285s = "\1\77\113\uffff";
    static final String dfa_286s = "\1\4\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_287s = "\1\u0095\17\uffff\1\0\36\uffff\1\0\14\uffff\1\0\17\uffff";
    static final String dfa_288s = "\1\uffff\17\1\1\uffff\36\1\1\uffff\14\1\1\uffff\2\1\1\2\14\uffff";
    static final String dfa_289s = "\1\0\17\uffff\1\1\36\uffff\1\2\14\uffff\1\3\17\uffff}>";
    static final String[] dfa_290s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\2\uffff\1\77\1\20\1\77\1\uffff\1\76\2\uffff\1\3\2\uffff\1\73\1\77\1\74\1\uffff\1\56\1\uffff\1\77\1\41\2\77\1\uffff\1\2\1\60\2\uffff\1\61\2\uffff\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final char[] dfa_286 = DFA.unpackEncodedStringToUnsignedChars(dfa_286s);
    static final char[] dfa_287 = DFA.unpackEncodedStringToUnsignedChars(dfa_287s);
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final short[] dfa_289 = DFA.unpackEncodedString(dfa_289s);
    static final short[][] dfa_290 = unpackEncodedStringArray(dfa_290s);
    class DFA403 extends DFA {
        public DFA403(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 403;
            this.eot = dfa_284;
            this.eof = dfa_285;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_289;
            this.transition = dfa_290;
        }
        public String getDescription() {
            return "14327:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA403_0 = input.LA(1);
                        int index403_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA403_0>=5 && LA403_0<=126 && (s=T2S.M_37[LA403_0-(5)])>=0) && (synpred261_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA403_0==Of) ) {s = 16;}
                        else if ((LA403_0>=4 && LA403_0<=149 && (s=T2S.M_38[LA403_0-(4)])>=0) && (synpred261_InternalN4JSParser())) { /* 31 cases */ }
                        else if ( (LA403_0==SolidusEqualsSign) ) {s = 47;}
                        else if ((LA403_0>=15 && LA403_0<=141 && (s=T2S.M_39[LA403_0-(15)])>=0) && (synpred261_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA403_0==HyphenMinus) ) {s = 60;}
                        else if ( (LA403_0==Tilde) && (synpred261_InternalN4JSParser())) {s = 61;}
                        else if ( (LA403_0==ExclamationMark) && (synpred261_InternalN4JSParser())) {s = 62;}
                        else if ( (LA403_0==EOF||LA403_0==LessThanSignLessThanSignEqualsSign||LA403_0==PercentSignEqualsSign||(LA403_0>=AmpersandEqualsSign && LA403_0<=AsteriskEqualsSign)||LA403_0==PlusSignEqualsSign||LA403_0==CircumflexAccentEqualsSign||LA403_0==In||LA403_0==VerticalLineEqualsSign||LA403_0==Comma||LA403_0==Semicolon||(LA403_0>=EqualsSign && LA403_0<=GreaterThanSign)) ) {s = 63;}
                        input.seek(index403_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA403_16 = input.LA(1);
                        int index403_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index403_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA403_47 = input.LA(1);
                        int index403_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index403_47);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA403_60 = input.LA(1);
                        int index403_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index403_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 403, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_291s = "\1\77\120\uffff";
    static final String dfa_292s = "\1\4\56\uffff\1\0\14\uffff\1\0\24\uffff";
    static final String dfa_293s = "\1\u0099\56\uffff\1\0\14\uffff\1\0\24\uffff";
    static final String dfa_294s = "\1\uffff\56\1\1\uffff\14\1\1\uffff\2\1\1\2\21\uffff";
    static final String dfa_295s = "\1\0\56\uffff\1\1\14\uffff\1\2\24\uffff}>";
    static final String[] dfa_296s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\62\3\uffff\1\31\1\11\1\66\1\uffff\1\42\1\33\1\uffff\1\14\1\uffff\1\21\1\70\1\4\1\1\2\uffff\1\63\1\uffff\1\53\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\55\1\37\1\52\1\22\1\67\3\uffff\1\77\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\77\1\uffff\2\77\1\71\1\77\1\72\1\57\7\uffff\1\77\1\15\3\uffff\1\20\1\77\1\uffff\1\76\2\uffff\1\3\1\77\1\uffff\1\73\1\77\1\74\1\uffff\1\56\2\77\1\41\2\77\1\uffff\1\2\1\60\1\77\1\uffff\1\61\1\uffff\1\77\1\75\3\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\5\2\uffff\1\54\12\uffff\1\65\1\64\7\uffff\1\44\1\uffff\1\77\1\uffff\1\77",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_291 = DFA.unpackEncodedString(dfa_291s);
    static final char[] dfa_292 = DFA.unpackEncodedStringToUnsignedChars(dfa_292s);
    static final char[] dfa_293 = DFA.unpackEncodedStringToUnsignedChars(dfa_293s);
    static final short[] dfa_294 = DFA.unpackEncodedString(dfa_294s);
    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final short[][] dfa_296 = unpackEncodedStringArray(dfa_296s);
    class DFA405 extends DFA {
        public DFA405(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 405;
            this.eot = dfa_70;
            this.eof = dfa_291;
            this.min = dfa_292;
            this.max = dfa_293;
            this.accept = dfa_294;
            this.special = dfa_295;
            this.transition = dfa_296;
        }
        public String getDescription() {
            return "14411:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | Import | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA405_0 = input.LA(1);
                        int index405_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA405_0>=4 && LA405_0<=149 && (s=T2S.M_40[LA405_0-(4)])>=0) && (synpred263_InternalN4JSParser())) { /* 46 cases */ }
                        else if ( (LA405_0==SolidusEqualsSign) ) {s = 47;}
                        else if ((LA405_0>=15 && LA405_0<=141 && (s=T2S.M_39[LA405_0-(15)])>=0) && (synpred263_InternalN4JSParser())) { /* 13 cases */ }
                        else if ( (LA405_0==HyphenMinus) ) {s = 60;}
                        else if ( (LA405_0==Tilde) && (synpred263_InternalN4JSParser())) {s = 61;}
                        else if ( (LA405_0==ExclamationMark) && (synpred263_InternalN4JSParser())) {s = 62;}
                        else if ( (LA405_0==EOF||LA405_0==LessThanSignLessThanSignEqualsSign||LA405_0==PercentSignEqualsSign||(LA405_0>=AmpersandEqualsSign && LA405_0<=AsteriskEqualsSign)||LA405_0==PlusSignEqualsSign||LA405_0==CircumflexAccentEqualsSign||LA405_0==VerticalLineEqualsSign||LA405_0==RightParenthesis||LA405_0==Comma||(LA405_0>=Colon && LA405_0<=Semicolon)||(LA405_0>=EqualsSign && LA405_0<=GreaterThanSign)||LA405_0==RightSquareBracket||LA405_0==RightCurlyBracket||LA405_0==RULE_ML_COMMENT||LA405_0==RULE_EOL) ) {s = 63;}
                        input.seek(index405_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA405_47 = input.LA(1);
                        int index405_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index405_47);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA405_60 = input.LA(1);
                        int index405_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 62;}
                        else if ( (true) ) {s = 63;}
                        input.seek(index405_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 405, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_297s = "\136\uffff";
    static final String dfa_298s = "\1\2\135\uffff";
    static final String dfa_299s = "\1\4\1\0\134\uffff";
    static final String dfa_300s = "\1\u0095\1\0\134\uffff";
    static final String dfa_301s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_302s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_303s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\2\2\6\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_297 = DFA.unpackEncodedString(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final char[] dfa_299 = DFA.unpackEncodedStringToUnsignedChars(dfa_299s);
    static final char[] dfa_300 = DFA.unpackEncodedStringToUnsignedChars(dfa_300s);
    static final short[] dfa_301 = DFA.unpackEncodedString(dfa_301s);
    static final short[] dfa_302 = DFA.unpackEncodedString(dfa_302s);
    static final short[][] dfa_303 = unpackEncodedStringArray(dfa_303s);
    class DFA436 extends DFA {
        public DFA436(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 436;
            this.eot = dfa_297;
            this.eof = dfa_298;
            this.min = dfa_299;
            this.max = dfa_300;
            this.accept = dfa_301;
            this.special = dfa_302;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "15688:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA436_1 = input.LA(1);
                        int index436_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred272_InternalN4JSParser()) ) {s = 93;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index436_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 436, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_304s = "\12\uffff";
    static final String dfa_305s = "\1\uffff\7\10\2\uffff";
    static final String dfa_306s = "\1\10\7\4\2\uffff";
    static final String dfa_307s = "\1\176\7\u00a5\2\uffff";
    static final String dfa_308s = "\10\uffff\1\2\1\1";
    static final String dfa_309s = "\12\uffff}>";
    static final String[] dfa_310s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\62\10\1\uffff\27\10\1\uffff\23\10\1\11\17\10\3\uffff\1\10\1\uffff\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\12\uffff\2\10\7\uffff\1\10\1\uffff\1\10\1\uffff\1\10\13\uffff\1\10",
            "\62\10\1\uffff\27\10\1\uffff\23\10\1\11\17\10\3\uffff\1\10\1\uffff\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\12\uffff\2\10\7\uffff\1\10\1\uffff\1\10\1\uffff\1\10\13\uffff\1\10",
            "\62\10\1\uffff\27\10\1\uffff\23\10\1\11\17\10\3\uffff\1\10\1\uffff\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\12\uffff\2\10\7\uffff\1\10\1\uffff\1\10\1\uffff\1\10\13\uffff\1\10",
            "\62\10\1\uffff\27\10\1\uffff\23\10\1\11\17\10\3\uffff\1\10\1\uffff\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\12\uffff\2\10\7\uffff\1\10\1\uffff\1\10\1\uffff\1\10\13\uffff\1\10",
            "\62\10\1\uffff\27\10\1\uffff\23\10\1\11\17\10\3\uffff\1\10\1\uffff\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\12\uffff\2\10\7\uffff\1\10\1\uffff\1\10\1\uffff\1\10\13\uffff\1\10",
            "\62\10\1\uffff\27\10\1\uffff\23\10\1\11\17\10\3\uffff\1\10\1\uffff\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\12\uffff\2\10\7\uffff\1\10\1\uffff\1\10\1\uffff\1\10\13\uffff\1\10",
            "\62\10\1\uffff\27\10\1\uffff\23\10\1\11\17\10\3\uffff\1\10\1\uffff\4\10\1\uffff\1\10\1\uffff\1\10\2\uffff\1\10\12\uffff\2\10\7\uffff\1\10\1\uffff\1\10\1\uffff\1\10\13\uffff\1\10",
            "",
            ""
    };
    static final short[] dfa_304 = DFA.unpackEncodedString(dfa_304s);
    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final char[] dfa_306 = DFA.unpackEncodedStringToUnsignedChars(dfa_306s);
    static final char[] dfa_307 = DFA.unpackEncodedStringToUnsignedChars(dfa_307s);
    static final short[] dfa_308 = DFA.unpackEncodedString(dfa_308s);
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final short[][] dfa_310 = unpackEncodedStringArray(dfa_310s);
    class DFA442 extends DFA {
        public DFA442(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 442;
            this.eot = dfa_304;
            this.eof = dfa_305;
            this.min = dfa_306;
            this.max = dfa_307;
            this.accept = dfa_308;
            this.special = dfa_309;
            this.transition = dfa_310;
        }
        public String getDescription() {
            return "15901:2: ( ( (AstNamespaceModuleNamespaceVirtualTypeTypeReferenceNameParserRuleCall_0_0_0_1= ruleTypeReferenceName ) ) FullStopKeyword_0_1= FullStop )?";
        }
    }
    static final String dfa_311s = "\112\uffff";
    static final String dfa_312s = "\1\4\1\uffff\12\0\1\uffff\1\0\1\uffff\67\0\4\uffff";
    static final String dfa_313s = "\1\u0095\1\uffff\12\0\1\uffff\1\0\1\uffff\67\0\4\uffff";
    static final String dfa_314s = "\1\uffff\1\1\12\uffff\1\4\1\uffff\1\4\67\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_315s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\uffff\1\13\1\uffff\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\4\uffff}>";
    static final String[] dfa_316s = {
            "\1\74\1\67\1\100\1\42\1\76\1\101\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\15\1\77\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\102\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\106\1\uffff\1\16\7\uffff\1\14\3\uffff\1\1\1\105\11\uffff\1\104\1\uffff\3\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_311 = DFA.unpackEncodedString(dfa_311s);
    static final char[] dfa_312 = DFA.unpackEncodedStringToUnsignedChars(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[] dfa_314 = DFA.unpackEncodedString(dfa_314s);
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);
    class DFA482 extends DFA {
        public DFA482(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 482;
            this.eot = dfa_311;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "16586:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ruleAsyncNoTrailingLineBreak ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA482_0 = input.LA(1);
                        int index482_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA482_0>=10 && LA482_0<=106 && (s=T2S.M_42[LA482_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA482_0==LessThanSign) && (synpred283_InternalN4JSParser())) {s = 12;}
                        else if ( (LA482_0==Async) ) {s = 13;}
                        else if ( (LA482_0==Asterisk) && (synpred283_InternalN4JSParser())) {s = 14;}
                        else if ((LA482_0>=4 && LA482_0<=129 && (s=T2S.M_43[LA482_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA482_0==RULE_DOUBLE||(LA482_0>=RULE_HEX_INT && LA482_0<=RULE_OCTAL_INT)||LA482_0==RULE_SCIENTIFIC_INT||LA482_0==RULE_INT) ) {s = 68;}
                        else if ( (LA482_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA482_0==LeftParenthesis) ) {s = 70;}
                        input.seek(index482_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA482_2 = input.LA(1);
                        int index482_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA482_3 = input.LA(1);
                        int index482_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA482_4 = input.LA(1);
                        int index482_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA482_5 = input.LA(1);
                        int index482_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA482_6 = input.LA(1);
                        int index482_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA482_7 = input.LA(1);
                        int index482_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA482_8 = input.LA(1);
                        int index482_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA482_9 = input.LA(1);
                        int index482_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA482_10 = input.LA(1);
                        int index482_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA482_11 = input.LA(1);
                        int index482_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA482_13 = input.LA(1);
                        int index482_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA482_15 = input.LA(1);
                        int index482_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA482_16 = input.LA(1);
                        int index482_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA482_17 = input.LA(1);
                        int index482_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA482_18 = input.LA(1);
                        int index482_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA482_19 = input.LA(1);
                        int index482_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA482_20 = input.LA(1);
                        int index482_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA482_21 = input.LA(1);
                        int index482_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA482_22 = input.LA(1);
                        int index482_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA482_23 = input.LA(1);
                        int index482_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA482_24 = input.LA(1);
                        int index482_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA482_25 = input.LA(1);
                        int index482_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA482_26 = input.LA(1);
                        int index482_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA482_27 = input.LA(1);
                        int index482_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA482_28 = input.LA(1);
                        int index482_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA482_29 = input.LA(1);
                        int index482_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA482_30 = input.LA(1);
                        int index482_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA482_31 = input.LA(1);
                        int index482_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA482_32 = input.LA(1);
                        int index482_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA482_33 = input.LA(1);
                        int index482_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA482_34 = input.LA(1);
                        int index482_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA482_35 = input.LA(1);
                        int index482_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA482_36 = input.LA(1);
                        int index482_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA482_37 = input.LA(1);
                        int index482_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA482_38 = input.LA(1);
                        int index482_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA482_39 = input.LA(1);
                        int index482_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA482_40 = input.LA(1);
                        int index482_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA482_41 = input.LA(1);
                        int index482_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA482_42 = input.LA(1);
                        int index482_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA482_43 = input.LA(1);
                        int index482_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA482_44 = input.LA(1);
                        int index482_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA482_45 = input.LA(1);
                        int index482_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA482_46 = input.LA(1);
                        int index482_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA482_47 = input.LA(1);
                        int index482_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA482_48 = input.LA(1);
                        int index482_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA482_49 = input.LA(1);
                        int index482_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA482_50 = input.LA(1);
                        int index482_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA482_51 = input.LA(1);
                        int index482_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA482_52 = input.LA(1);
                        int index482_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA482_53 = input.LA(1);
                        int index482_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA482_54 = input.LA(1);
                        int index482_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA482_55 = input.LA(1);
                        int index482_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA482_56 = input.LA(1);
                        int index482_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA482_57 = input.LA(1);
                        int index482_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA482_58 = input.LA(1);
                        int index482_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA482_59 = input.LA(1);
                        int index482_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA482_60 = input.LA(1);
                        int index482_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA482_61 = input.LA(1);
                        int index482_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA482_62 = input.LA(1);
                        int index482_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA482_63 = input.LA(1);
                        int index482_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA482_64 = input.LA(1);
                        int index482_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA482_65 = input.LA(1);
                        int index482_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA482_66 = input.LA(1);
                        int index482_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA482_67 = input.LA(1);
                        int index482_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA482_68 = input.LA(1);
                        int index482_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA482_69 = input.LA(1);
                        int index482_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred283_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index482_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 482, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA483 extends DFA {
        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_311;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "16809:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ruleAsyncNoTrailingLineBreak ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA483_0 = input.LA(1);
                        int index483_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA483_0>=10 && LA483_0<=106 && (s=T2S.M_42[LA483_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA483_0==LessThanSign) && (synpred286_InternalN4JSParser())) {s = 12;}
                        else if ( (LA483_0==Async) ) {s = 13;}
                        else if ( (LA483_0==Asterisk) && (synpred286_InternalN4JSParser())) {s = 14;}
                        else if ((LA483_0>=4 && LA483_0<=129 && (s=T2S.M_43[LA483_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA483_0==RULE_DOUBLE||(LA483_0>=RULE_HEX_INT && LA483_0<=RULE_OCTAL_INT)||LA483_0==RULE_SCIENTIFIC_INT||LA483_0==RULE_INT) ) {s = 68;}
                        else if ( (LA483_0==LeftSquareBracket) ) {s = 69;}
                        else if ( (LA483_0==LeftParenthesis) ) {s = 70;}
                        input.seek(index483_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA483_2 = input.LA(1);
                        int index483_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA483_3 = input.LA(1);
                        int index483_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA483_4 = input.LA(1);
                        int index483_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA483_5 = input.LA(1);
                        int index483_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA483_6 = input.LA(1);
                        int index483_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA483_7 = input.LA(1);
                        int index483_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA483_8 = input.LA(1);
                        int index483_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA483_9 = input.LA(1);
                        int index483_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA483_10 = input.LA(1);
                        int index483_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred284_InternalN4JSParser()) ) {s = 71;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA483_11 = input.LA(1);
                        int index483_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred285_InternalN4JSParser()) ) {s = 72;}
                        else if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA483_13 = input.LA(1);
                        int index483_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA483_15 = input.LA(1);
                        int index483_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_15);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA483_16 = input.LA(1);
                        int index483_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_16);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA483_17 = input.LA(1);
                        int index483_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA483_18 = input.LA(1);
                        int index483_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_18);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA483_19 = input.LA(1);
                        int index483_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_19);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA483_20 = input.LA(1);
                        int index483_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_20);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA483_21 = input.LA(1);
                        int index483_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_21);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA483_22 = input.LA(1);
                        int index483_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_22);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA483_23 = input.LA(1);
                        int index483_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA483_24 = input.LA(1);
                        int index483_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA483_25 = input.LA(1);
                        int index483_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_25);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA483_26 = input.LA(1);
                        int index483_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_26);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA483_27 = input.LA(1);
                        int index483_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_27);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA483_28 = input.LA(1);
                        int index483_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA483_29 = input.LA(1);
                        int index483_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA483_30 = input.LA(1);
                        int index483_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA483_31 = input.LA(1);
                        int index483_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA483_32 = input.LA(1);
                        int index483_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA483_33 = input.LA(1);
                        int index483_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA483_34 = input.LA(1);
                        int index483_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA483_35 = input.LA(1);
                        int index483_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA483_36 = input.LA(1);
                        int index483_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA483_37 = input.LA(1);
                        int index483_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA483_38 = input.LA(1);
                        int index483_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA483_39 = input.LA(1);
                        int index483_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA483_40 = input.LA(1);
                        int index483_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA483_41 = input.LA(1);
                        int index483_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA483_42 = input.LA(1);
                        int index483_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA483_43 = input.LA(1);
                        int index483_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA483_44 = input.LA(1);
                        int index483_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA483_45 = input.LA(1);
                        int index483_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA483_46 = input.LA(1);
                        int index483_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA483_47 = input.LA(1);
                        int index483_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA483_48 = input.LA(1);
                        int index483_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA483_49 = input.LA(1);
                        int index483_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA483_50 = input.LA(1);
                        int index483_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA483_51 = input.LA(1);
                        int index483_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA483_52 = input.LA(1);
                        int index483_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA483_53 = input.LA(1);
                        int index483_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA483_54 = input.LA(1);
                        int index483_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA483_55 = input.LA(1);
                        int index483_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA483_56 = input.LA(1);
                        int index483_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA483_57 = input.LA(1);
                        int index483_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA483_58 = input.LA(1);
                        int index483_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA483_59 = input.LA(1);
                        int index483_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA483_60 = input.LA(1);
                        int index483_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA483_61 = input.LA(1);
                        int index483_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA483_62 = input.LA(1);
                        int index483_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA483_63 = input.LA(1);
                        int index483_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA483_64 = input.LA(1);
                        int index483_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA483_65 = input.LA(1);
                        int index483_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA483_66 = input.LA(1);
                        int index483_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA483_67 = input.LA(1);
                        int index483_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA483_68 = input.LA(1);
                        int index483_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA483_69 = input.LA(1);
                        int index483_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred286_InternalN4JSParser()) ) {s = 14;}
                        else if ( (true) ) {s = 73;}
                        input.seek(index483_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 483, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_317s = "\110\uffff";
    static final String dfa_318s = "\1\4\12\0\2\uffff\70\0\3\uffff";
    static final String dfa_319s = "\1\u0095\12\0\2\uffff\70\0\3\uffff";
    static final String dfa_320s = "\13\uffff\2\3\70\uffff\1\1\1\2\1\4";
    static final String dfa_321s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\3\uffff}>";
    static final String[] dfa_322s = {
            "\1\73\1\66\1\77\1\41\1\75\1\100\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\15\1\76\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\101\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\7\uffff\1\14\7\uffff\1\13\4\uffff\1\104\11\uffff\1\103\1\uffff\3\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final short[] dfa_317 = DFA.unpackEncodedString(dfa_317s);
    static final char[] dfa_318 = DFA.unpackEncodedStringToUnsignedChars(dfa_318s);
    static final char[] dfa_319 = DFA.unpackEncodedStringToUnsignedChars(dfa_319s);
    static final short[] dfa_320 = DFA.unpackEncodedString(dfa_320s);
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final short[][] dfa_322 = unpackEncodedStringArray(dfa_322s);
    class DFA495 extends DFA {
        public DFA495(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 495;
            this.eot = dfa_317;
            this.eof = dfa_317;
            this.min = dfa_318;
            this.max = dfa_319;
            this.accept = dfa_320;
            this.special = dfa_321;
            this.transition = dfa_322;
        }
        public String getDescription() {
            return "17039:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_1_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_1_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_3_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= ruleBlock ) )? (SemicolonKeyword_1_1_6= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA495_0 = input.LA(1);
                        int index495_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA495_0>=10 && LA495_0<=62 && (s=T2S.M_46[LA495_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA495_0==LessThanSign) && (synpred292_InternalN4JSParser())) {s = 11;}
                        else if ( (LA495_0==Asterisk) && (synpred292_InternalN4JSParser())) {s = 12;}
                        else if ((LA495_0>=4 && LA495_0<=129 && (s=T2S.M_47[LA495_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA495_0==RULE_DOUBLE||(LA495_0>=RULE_HEX_INT && LA495_0<=RULE_OCTAL_INT)||LA495_0==RULE_SCIENTIFIC_INT||LA495_0==RULE_INT) ) {s = 67;}
                        else if ( (LA495_0==LeftSquareBracket) ) {s = 68;}
                        input.seek(index495_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA495_1 = input.LA(1);
                        int index495_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA495_2 = input.LA(1);
                        int index495_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA495_3 = input.LA(1);
                        int index495_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA495_4 = input.LA(1);
                        int index495_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA495_5 = input.LA(1);
                        int index495_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA495_6 = input.LA(1);
                        int index495_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA495_7 = input.LA(1);
                        int index495_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA495_8 = input.LA(1);
                        int index495_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA495_9 = input.LA(1);
                        int index495_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred287_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA495_10 = input.LA(1);
                        int index495_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA495_13 = input.LA(1);
                        int index495_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA495_14 = input.LA(1);
                        int index495_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA495_15 = input.LA(1);
                        int index495_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA495_16 = input.LA(1);
                        int index495_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA495_17 = input.LA(1);
                        int index495_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA495_18 = input.LA(1);
                        int index495_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA495_19 = input.LA(1);
                        int index495_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA495_20 = input.LA(1);
                        int index495_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA495_21 = input.LA(1);
                        int index495_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA495_22 = input.LA(1);
                        int index495_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA495_23 = input.LA(1);
                        int index495_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA495_24 = input.LA(1);
                        int index495_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA495_25 = input.LA(1);
                        int index495_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA495_26 = input.LA(1);
                        int index495_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA495_27 = input.LA(1);
                        int index495_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA495_28 = input.LA(1);
                        int index495_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA495_29 = input.LA(1);
                        int index495_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA495_30 = input.LA(1);
                        int index495_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA495_31 = input.LA(1);
                        int index495_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA495_32 = input.LA(1);
                        int index495_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA495_33 = input.LA(1);
                        int index495_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA495_34 = input.LA(1);
                        int index495_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA495_35 = input.LA(1);
                        int index495_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA495_36 = input.LA(1);
                        int index495_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA495_37 = input.LA(1);
                        int index495_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA495_38 = input.LA(1);
                        int index495_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA495_39 = input.LA(1);
                        int index495_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA495_40 = input.LA(1);
                        int index495_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA495_41 = input.LA(1);
                        int index495_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA495_42 = input.LA(1);
                        int index495_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA495_43 = input.LA(1);
                        int index495_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA495_44 = input.LA(1);
                        int index495_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA495_45 = input.LA(1);
                        int index495_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA495_46 = input.LA(1);
                        int index495_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA495_47 = input.LA(1);
                        int index495_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA495_48 = input.LA(1);
                        int index495_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA495_49 = input.LA(1);
                        int index495_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA495_50 = input.LA(1);
                        int index495_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA495_51 = input.LA(1);
                        int index495_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA495_52 = input.LA(1);
                        int index495_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA495_53 = input.LA(1);
                        int index495_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA495_54 = input.LA(1);
                        int index495_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA495_55 = input.LA(1);
                        int index495_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA495_56 = input.LA(1);
                        int index495_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA495_57 = input.LA(1);
                        int index495_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA495_58 = input.LA(1);
                        int index495_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA495_59 = input.LA(1);
                        int index495_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA495_60 = input.LA(1);
                        int index495_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA495_61 = input.LA(1);
                        int index495_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA495_62 = input.LA(1);
                        int index495_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA495_63 = input.LA(1);
                        int index495_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA495_64 = input.LA(1);
                        int index495_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA495_65 = input.LA(1);
                        int index495_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA495_66 = input.LA(1);
                        int index495_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA495_67 = input.LA(1);
                        int index495_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA495_68 = input.LA(1);
                        int index495_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index495_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 495, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_323s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_324s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_325s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_326s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\11\uffff\1\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_323 = DFA.unpackEncodedStringToUnsignedChars(dfa_323s);
    static final char[] dfa_324 = DFA.unpackEncodedStringToUnsignedChars(dfa_324s);
    static final short[] dfa_325 = DFA.unpackEncodedString(dfa_325s);
    static final short[][] dfa_326 = unpackEncodedStringArray(dfa_326s);
    class DFA491 extends DFA {
        public DFA491(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 491;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 17397:6: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA507 extends DFA {
        public DFA507(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 507;
            this.eot = dfa_317;
            this.eof = dfa_317;
            this.min = dfa_318;
            this.max = dfa_319;
            this.accept = dfa_320;
            this.special = dfa_321;
            this.transition = dfa_322;
        }
        public String getDescription() {
            return "17469:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) ( (DeclaredOptionalQuestionMarkKeyword_1_1_1_0= QuestionMark ) )? LeftParenthesisKeyword_1_1_2= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_3_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_4= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_5_0= norm1_Block ) )? (SemicolonKeyword_1_1_6= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA507_0 = input.LA(1);
                        int index507_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA507_0>=10 && LA507_0<=62 && (s=T2S.M_46[LA507_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA507_0==LessThanSign) && (synpred300_InternalN4JSParser())) {s = 11;}
                        else if ( (LA507_0==Asterisk) && (synpred300_InternalN4JSParser())) {s = 12;}
                        else if ((LA507_0>=4 && LA507_0<=129 && (s=T2S.M_47[LA507_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA507_0==RULE_DOUBLE||(LA507_0>=RULE_HEX_INT && LA507_0<=RULE_OCTAL_INT)||LA507_0==RULE_SCIENTIFIC_INT||LA507_0==RULE_INT) ) {s = 67;}
                        else if ( (LA507_0==LeftSquareBracket) ) {s = 68;}
                        input.seek(index507_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA507_1 = input.LA(1);
                        int index507_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA507_2 = input.LA(1);
                        int index507_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA507_3 = input.LA(1);
                        int index507_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA507_4 = input.LA(1);
                        int index507_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA507_5 = input.LA(1);
                        int index507_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA507_6 = input.LA(1);
                        int index507_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA507_7 = input.LA(1);
                        int index507_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA507_8 = input.LA(1);
                        int index507_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA507_9 = input.LA(1);
                        int index507_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred295_InternalN4JSParser()) ) {s = 69;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA507_10 = input.LA(1);
                        int index507_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred297_InternalN4JSParser()) ) {s = 70;}
                        else if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA507_13 = input.LA(1);
                        int index507_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA507_14 = input.LA(1);
                        int index507_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA507_15 = input.LA(1);
                        int index507_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA507_16 = input.LA(1);
                        int index507_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA507_17 = input.LA(1);
                        int index507_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA507_18 = input.LA(1);
                        int index507_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA507_19 = input.LA(1);
                        int index507_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA507_20 = input.LA(1);
                        int index507_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA507_21 = input.LA(1);
                        int index507_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA507_22 = input.LA(1);
                        int index507_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA507_23 = input.LA(1);
                        int index507_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA507_24 = input.LA(1);
                        int index507_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA507_25 = input.LA(1);
                        int index507_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA507_26 = input.LA(1);
                        int index507_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA507_27 = input.LA(1);
                        int index507_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA507_28 = input.LA(1);
                        int index507_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA507_29 = input.LA(1);
                        int index507_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA507_30 = input.LA(1);
                        int index507_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA507_31 = input.LA(1);
                        int index507_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA507_32 = input.LA(1);
                        int index507_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA507_33 = input.LA(1);
                        int index507_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA507_34 = input.LA(1);
                        int index507_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA507_35 = input.LA(1);
                        int index507_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA507_36 = input.LA(1);
                        int index507_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA507_37 = input.LA(1);
                        int index507_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA507_38 = input.LA(1);
                        int index507_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA507_39 = input.LA(1);
                        int index507_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA507_40 = input.LA(1);
                        int index507_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA507_41 = input.LA(1);
                        int index507_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA507_42 = input.LA(1);
                        int index507_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA507_43 = input.LA(1);
                        int index507_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA507_44 = input.LA(1);
                        int index507_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA507_45 = input.LA(1);
                        int index507_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA507_46 = input.LA(1);
                        int index507_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA507_47 = input.LA(1);
                        int index507_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA507_48 = input.LA(1);
                        int index507_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA507_49 = input.LA(1);
                        int index507_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA507_50 = input.LA(1);
                        int index507_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA507_51 = input.LA(1);
                        int index507_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA507_52 = input.LA(1);
                        int index507_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA507_53 = input.LA(1);
                        int index507_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA507_54 = input.LA(1);
                        int index507_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA507_55 = input.LA(1);
                        int index507_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA507_56 = input.LA(1);
                        int index507_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA507_57 = input.LA(1);
                        int index507_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA507_58 = input.LA(1);
                        int index507_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA507_59 = input.LA(1);
                        int index507_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA507_60 = input.LA(1);
                        int index507_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA507_61 = input.LA(1);
                        int index507_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA507_62 = input.LA(1);
                        int index507_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA507_63 = input.LA(1);
                        int index507_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA507_64 = input.LA(1);
                        int index507_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA507_65 = input.LA(1);
                        int index507_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA507_66 = input.LA(1);
                        int index507_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA507_67 = input.LA(1);
                        int index507_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA507_68 = input.LA(1);
                        int index507_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred300_InternalN4JSParser()) ) {s = 12;}
                        else if ( (true) ) {s = 71;}
                        input.seek(index507_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 507, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA503 extends DFA {
        public DFA503(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 503;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 17827:6: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_327s = "\2\uffff\10\1\1\uffff";
    static final String dfa_328s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_329s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\24\uffff\1\1\11\uffff\1\1\1\uffff\3\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\12\4\uffff\1\1\4\uffff\1\12\1\uffff\3\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_327 = DFA.unpackEncodedString(dfa_327s);
    static final char[] dfa_328 = DFA.unpackEncodedStringToUnsignedChars(dfa_328s);
    static final short[][] dfa_329 = unpackEncodedStringArray(dfa_329s);
    class DFA508 extends DFA {
        public DFA508(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 508;
            this.eot = dfa_13;
            this.eof = dfa_327;
            this.min = dfa_323;
            this.max = dfa_328;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "()* loopback of 17898:2: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA512 extends DFA {
        public DFA512(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 512;
            this.eot = dfa_13;
            this.eof = dfa_327;
            this.min = dfa_323;
            this.max = dfa_328;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_329;
        }
        public String getDescription() {
            return "()* loopback of 17944:2: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA516 extends DFA {
        public DFA516(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 516;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 18058:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA520 extends DFA {
        public DFA520(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 520;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 18161:4: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_330s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_331s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_330 = DFA.unpackEncodedStringToUnsignedChars(dfa_330s);
    static final short[][] dfa_331 = unpackEncodedStringArray(dfa_331s);
    class DFA558 extends DFA {
        public DFA558(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 558;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_330;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_331;
        }
        public String getDescription() {
            return "()* loopback of 19365:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_332s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_332 = unpackEncodedStringArray(dfa_332s);
    class DFA564 extends DFA {
        public DFA564(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 564;
            this.eot = dfa_160;
            this.eof = dfa_160;
            this.min = dfa_161;
            this.max = dfa_330;
            this.accept = dfa_163;
            this.special = dfa_164;
            this.transition = dfa_332;
        }
        public String getDescription() {
            return "()* loopback of 19431:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_333s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_334s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_335s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_336s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_337s = "\1\23\1\30\40\uffff\1\0\4\uffff\1\24\1\31\1\1\1\4\1\7\1\12\1\15\1\20\1\25\1\32\1\2\1\5\1\10\1\13\1\16\1\21\1\26\1\33\1\3\1\6\1\11\1\14\1\17\1\22\1\27\5\uffff}>";
    static final String[] dfa_338s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\3\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final char[] dfa_334 = DFA.unpackEncodedStringToUnsignedChars(dfa_334s);
    static final char[] dfa_335 = DFA.unpackEncodedStringToUnsignedChars(dfa_335s);
    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final short[] dfa_337 = DFA.unpackEncodedString(dfa_337s);
    static final short[][] dfa_338 = unpackEncodedStringArray(dfa_338s);
    class DFA568 extends DFA {
        public DFA568(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 568;
            this.eot = dfa_238;
            this.eof = dfa_333;
            this.min = dfa_334;
            this.max = dfa_335;
            this.accept = dfa_336;
            this.special = dfa_337;
            this.transition = dfa_338;
        }
        public String getDescription() {
            return "19482:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA568_34 = input.LA(1);
                        int index568_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_34==EOF||LA568_34==Comma||LA568_34==EqualsSign||LA568_34==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_34==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_34);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA568_41 = input.LA(1);
                        int index568_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_41==EOF||LA568_41==Comma||LA568_41==EqualsSign||LA568_41==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_41==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_41);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA568_49 = input.LA(1);
                        int index568_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_49==EOF||LA568_49==Comma||LA568_49==EqualsSign||LA568_49==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_49==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_49);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA568_57 = input.LA(1);
                        int index568_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_57==EOF||LA568_57==Comma||LA568_57==EqualsSign||LA568_57==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_57==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_57);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA568_42 = input.LA(1);
                        int index568_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_42==EOF||LA568_42==Comma||LA568_42==EqualsSign||LA568_42==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_42==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_42);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA568_50 = input.LA(1);
                        int index568_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_50==EOF||LA568_50==Comma||LA568_50==EqualsSign||LA568_50==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_50==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_50);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA568_58 = input.LA(1);
                        int index568_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_58==EOF||LA568_58==Comma||LA568_58==EqualsSign||LA568_58==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_58==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_58);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA568_43 = input.LA(1);
                        int index568_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_43==EOF||LA568_43==Comma||LA568_43==EqualsSign||LA568_43==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_43==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_43);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA568_51 = input.LA(1);
                        int index568_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_51==EOF||LA568_51==Comma||LA568_51==EqualsSign||LA568_51==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_51==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_51);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA568_59 = input.LA(1);
                        int index568_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_59==EOF||LA568_59==Comma||LA568_59==EqualsSign||LA568_59==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_59==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_59);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA568_44 = input.LA(1);
                        int index568_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_44==EOF||LA568_44==Comma||LA568_44==EqualsSign||LA568_44==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_44==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_44);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA568_52 = input.LA(1);
                        int index568_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_52==EOF||LA568_52==Comma||LA568_52==EqualsSign||LA568_52==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_52==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA568_60 = input.LA(1);
                        int index568_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_60==EOF||LA568_60==Comma||LA568_60==EqualsSign||LA568_60==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_60==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_60);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA568_45 = input.LA(1);
                        int index568_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_45==EOF||LA568_45==Comma||LA568_45==EqualsSign||LA568_45==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_45==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA568_53 = input.LA(1);
                        int index568_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_53==EOF||LA568_53==Comma||LA568_53==EqualsSign||LA568_53==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_53==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA568_61 = input.LA(1);
                        int index568_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_61==EOF||LA568_61==Comma||LA568_61==EqualsSign||LA568_61==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_61==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_61);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA568_46 = input.LA(1);
                        int index568_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_46==EOF||LA568_46==Comma||LA568_46==EqualsSign||LA568_46==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_46==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_46);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA568_54 = input.LA(1);
                        int index568_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_54==EOF||LA568_54==Comma||LA568_54==EqualsSign||LA568_54==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_54==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA568_62 = input.LA(1);
                        int index568_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_62==EOF||LA568_62==Comma||LA568_62==EqualsSign||LA568_62==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_62==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_62);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA568_0 = input.LA(1);
                        int index568_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA568_0>=7 && LA568_0<=126 && (s=T2S.M_50[LA568_0-(7)])>=0) && (synpred325_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA568_0==Yield) ) {s = 34;}
                        else if ( (LA568_0==Null) && (synpred325_InternalN4JSParser())) {s = 35;}
                        else if ( (LA568_0==True) && (synpred325_InternalN4JSParser())) {s = 36;}
                        else if ( (LA568_0==False) && (synpred325_InternalN4JSParser())) {s = 37;}
                        else if ( (LA568_0==Enum) && (synpred325_InternalN4JSParser())) {s = 38;}
                        else if ((LA568_0>=4 && LA568_0<=86 && (s=T2S.M_51[LA568_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA568_0==RULE_STRING) && (synpred325_InternalN4JSParser())) {s = 64;}
                        else if ( (LA568_0==RULE_DOUBLE||(LA568_0>=RULE_HEX_INT && LA568_0<=RULE_OCTAL_INT)||LA568_0==RULE_SCIENTIFIC_INT||LA568_0==RULE_INT) && (synpred325_InternalN4JSParser())) {s = 65;}
                        else if ( (LA568_0==LeftSquareBracket) && (synpred325_InternalN4JSParser())) {s = 66;}
                        else if ( (LA568_0==CommercialAt) ) {s = 67;}
                        input.seek(index568_0);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA568_39 = input.LA(1);
                        int index568_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_39==EOF||LA568_39==Comma||LA568_39==EqualsSign||LA568_39==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_39==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA568_47 = input.LA(1);
                        int index568_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_47==EOF||LA568_47==Comma||LA568_47==EqualsSign||LA568_47==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_47==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_47);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA568_55 = input.LA(1);
                        int index568_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_55==EOF||LA568_55==Comma||LA568_55==EqualsSign||LA568_55==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_55==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_55);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA568_63 = input.LA(1);
                        int index568_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_63==EOF||LA568_63==Comma||LA568_63==EqualsSign||LA568_63==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_63==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_63);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA568_1 = input.LA(1);
                        int index568_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_1==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        else if ( (LA568_1==EOF||LA568_1==Comma||LA568_1==EqualsSign||LA568_1==RightCurlyBracket) ) {s = 67;}
                        input.seek(index568_1);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA568_40 = input.LA(1);
                        int index568_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_40==EOF||LA568_40==Comma||LA568_40==EqualsSign||LA568_40==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_40==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_40);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA568_48 = input.LA(1);
                        int index568_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_48==EOF||LA568_48==Comma||LA568_48==EqualsSign||LA568_48==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_48==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_48);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA568_56 = input.LA(1);
                        int index568_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA568_56==EOF||LA568_56==Comma||LA568_56==EqualsSign||LA568_56==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA568_56==Colon) && (synpred325_InternalN4JSParser())) {s = 68;}
                        input.seek(index568_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 568, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_339s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_340s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_341s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_342s = "\1\23\1\3\45\uffff\1\24\1\30\1\0\1\4\1\7\1\12\1\15\1\20\1\25\1\31\1\1\1\5\1\10\1\13\1\16\1\21\1\26\1\32\1\2\1\6\1\11\1\14\1\17\1\22\1\27\5\uffff}>";
    static final String[] dfa_343s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\3\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_339 = DFA.unpackEncodedStringToUnsignedChars(dfa_339s);
    static final char[] dfa_340 = DFA.unpackEncodedStringToUnsignedChars(dfa_340s);
    static final short[] dfa_341 = DFA.unpackEncodedString(dfa_341s);
    static final short[] dfa_342 = DFA.unpackEncodedString(dfa_342s);
    static final short[][] dfa_343 = unpackEncodedStringArray(dfa_343s);
    class DFA569 extends DFA {
        public DFA569(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 569;
            this.eot = dfa_238;
            this.eof = dfa_238;
            this.min = dfa_339;
            this.max = dfa_340;
            this.accept = dfa_341;
            this.special = dfa_342;
            this.transition = dfa_343;
        }
        public String getDescription() {
            return "19532:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA569_41 = input.LA(1);
                        int index569_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_41==Comma||LA569_41==EqualsSign||LA569_41==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA569_41==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        input.seek(index569_41);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA569_49 = input.LA(1);
                        int index569_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_49==Comma||LA569_49==EqualsSign||LA569_49==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA569_49==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        input.seek(index569_49);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA569_57 = input.LA(1);
                        int index569_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_57==Comma||LA569_57==EqualsSign||LA569_57==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA569_57==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        input.seek(index569_57);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA569_1 = input.LA(1);
                        int index569_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_1==Comma||LA569_1==EqualsSign||LA569_1==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA569_1==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        input.seek(index569_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA569_42 = input.LA(1);
                        int index569_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_42==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_42==Comma||LA569_42==EqualsSign||LA569_42==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_42);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA569_50 = input.LA(1);
                        int index569_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_50==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_50==Comma||LA569_50==EqualsSign||LA569_50==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_50);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA569_58 = input.LA(1);
                        int index569_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_58==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_58==Comma||LA569_58==EqualsSign||LA569_58==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_58);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA569_43 = input.LA(1);
                        int index569_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_43==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_43==Comma||LA569_43==EqualsSign||LA569_43==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_43);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA569_51 = input.LA(1);
                        int index569_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_51==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_51==Comma||LA569_51==EqualsSign||LA569_51==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_51);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA569_59 = input.LA(1);
                        int index569_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_59==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_59==Comma||LA569_59==EqualsSign||LA569_59==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_59);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA569_44 = input.LA(1);
                        int index569_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_44==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_44==Comma||LA569_44==EqualsSign||LA569_44==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_44);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA569_52 = input.LA(1);
                        int index569_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_52==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_52==Comma||LA569_52==EqualsSign||LA569_52==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_52);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA569_60 = input.LA(1);
                        int index569_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_60==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_60==Comma||LA569_60==EqualsSign||LA569_60==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_60);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA569_45 = input.LA(1);
                        int index569_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_45==Comma||LA569_45==EqualsSign||LA569_45==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA569_45==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        input.seek(index569_45);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA569_53 = input.LA(1);
                        int index569_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_53==Comma||LA569_53==EqualsSign||LA569_53==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA569_53==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        input.seek(index569_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA569_61 = input.LA(1);
                        int index569_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_61==Comma||LA569_61==EqualsSign||LA569_61==RightCurlyBracket) ) {s = 67;}
                        else if ( (LA569_61==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        input.seek(index569_61);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA569_46 = input.LA(1);
                        int index569_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_46==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_46==Comma||LA569_46==EqualsSign||LA569_46==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_46);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA569_54 = input.LA(1);
                        int index569_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_54==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_54==Comma||LA569_54==EqualsSign||LA569_54==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA569_62 = input.LA(1);
                        int index569_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_62==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_62==Comma||LA569_62==EqualsSign||LA569_62==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_62);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA569_0 = input.LA(1);
                        int index569_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA569_0>=7 && LA569_0<=126 && (s=T2S.M_52[LA569_0-(7)])>=0) && (synpred326_InternalN4JSParser())) { /* 38 cases */ }
                        else if ((LA569_0>=4 && LA569_0<=86 && (s=T2S.M_51[LA569_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA569_0==RULE_STRING) && (synpred326_InternalN4JSParser())) {s = 64;}
                        else if ( (LA569_0==RULE_DOUBLE||(LA569_0>=RULE_HEX_INT && LA569_0<=RULE_OCTAL_INT)||LA569_0==RULE_SCIENTIFIC_INT||LA569_0==RULE_INT) && (synpred326_InternalN4JSParser())) {s = 65;}
                        else if ( (LA569_0==LeftSquareBracket) && (synpred326_InternalN4JSParser())) {s = 66;}
                        else if ( (LA569_0==CommercialAt) ) {s = 67;}
                        input.seek(index569_0);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA569_39 = input.LA(1);
                        int index569_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_39==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_39==Comma||LA569_39==EqualsSign||LA569_39==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_39);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA569_47 = input.LA(1);
                        int index569_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_47==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_47==Comma||LA569_47==EqualsSign||LA569_47==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_47);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA569_55 = input.LA(1);
                        int index569_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_55==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_55==Comma||LA569_55==EqualsSign||LA569_55==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_55);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA569_63 = input.LA(1);
                        int index569_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_63==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_63==Comma||LA569_63==EqualsSign||LA569_63==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_63);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA569_40 = input.LA(1);
                        int index569_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_40==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_40==Comma||LA569_40==EqualsSign||LA569_40==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_40);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA569_48 = input.LA(1);
                        int index569_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_48==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_48==Comma||LA569_48==EqualsSign||LA569_48==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_48);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA569_56 = input.LA(1);
                        int index569_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA569_56==Colon) && (synpred326_InternalN4JSParser())) {s = 68;}
                        else if ( (LA569_56==Comma||LA569_56==EqualsSign||LA569_56==RightCurlyBracket) ) {s = 67;}
                        input.seek(index569_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 569, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_344s = "\107\uffff";
    static final String dfa_345s = "\1\106\106\uffff";
    static final String dfa_346s = "\1\4\6\uffff\77\0\1\uffff";
    static final String dfa_347s = "\1\u0095\6\uffff\77\0\1\uffff";
    static final String dfa_348s = "\1\uffff\6\1\77\uffff\1\2";
    static final String dfa_349s = "\1\56\6\uffff\1\7\1\46\1\37\1\71\1\60\1\11\1\0\1\27\1\20\1\47\1\36\1\70\1\57\1\10\1\1\1\30\1\21\1\50\1\40\1\72\1\61\1\12\1\2\1\31\1\22\1\51\1\41\1\73\1\62\1\14\1\3\1\32\1\23\1\52\1\42\1\74\1\63\1\13\1\64\1\15\1\4\1\33\1\24\1\53\1\43\1\75\1\65\1\16\1\5\1\34\1\25\1\54\1\44\1\76\1\66\1\17\1\6\1\35\1\26\1\55\1\45\1\77\1\67\1\uffff}>";
    static final String[] dfa_350s = {
            "\1\73\1\66\1\100\1\33\1\75\1\101\1\103\1\62\1\15\1\16\1\61\1\27\1\17\1\24\1\25\1\102\1\60\1\20\1\23\1\31\1\104\1\35\1\63\1\37\1\70\1\43\1\77\1\76\1\10\1\12\1\13\1\14\1\53\1\36\1\41\1\72\1\46\1\50\1\74\1\11\1\22\1\54\1\65\1\51\1\40\1\52\1\71\1\45\1\47\4\uffff\1\26\1\55\1\57\1\34\1\105\1\56\1\42\1\44\7\uffff\1\106\11\uffff\1\64\1\21\1\30\1\32\1\67\12\uffff\1\106\1\uffff\1\106\3\uffff\2\106\5\uffff\1\106\10\uffff\1\2\1\3\1\4\1\6\1\uffff\1\5\1\uffff\1\7\26\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };
    static final short[] dfa_344 = DFA.unpackEncodedString(dfa_344s);
    static final short[] dfa_345 = DFA.unpackEncodedString(dfa_345s);
    static final char[] dfa_346 = DFA.unpackEncodedStringToUnsignedChars(dfa_346s);
    static final char[] dfa_347 = DFA.unpackEncodedStringToUnsignedChars(dfa_347s);
    static final short[] dfa_348 = DFA.unpackEncodedString(dfa_348s);
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final short[][] dfa_350 = unpackEncodedStringArray(dfa_350s);
    class DFA587 extends DFA {
        public DFA587(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 587;
            this.eot = dfa_344;
            this.eof = dfa_345;
            this.min = dfa_346;
            this.max = dfa_347;
            this.accept = dfa_348;
            this.special = dfa_349;
            this.transition = dfa_350;
        }
        public String getDescription() {
            return "20193:3: ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | RULE_IDENTIFIER )=> ( RULE_INT | RULE_HEX_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_SCIENTIFIC_INT | RULE_LEGACY_OCTAL_INT | ruleIdentifierName ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA587_13 = input.LA(1);
                        int index587_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_13);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA587_21 = input.LA(1);
                        int index587_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_21);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA587_29 = input.LA(1);
                        int index587_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_29);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA587_37 = input.LA(1);
                        int index587_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_37);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA587_47 = input.LA(1);
                        int index587_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA587_55 = input.LA(1);
                        int index587_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_55);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA587_63 = input.LA(1);
                        int index587_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_63);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA587_7 = input.LA(1);
                        int index587_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA587_20 = input.LA(1);
                        int index587_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_20);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA587_12 = input.LA(1);
                        int index587_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_12);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA587_28 = input.LA(1);
                        int index587_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_28);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA587_44 = input.LA(1);
                        int index587_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA587_36 = input.LA(1);
                        int index587_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_36);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA587_46 = input.LA(1);
                        int index587_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA587_54 = input.LA(1);
                        int index587_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA587_62 = input.LA(1);
                        int index587_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_62);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA587_15 = input.LA(1);
                        int index587_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_15);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA587_23 = input.LA(1);
                        int index587_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_23);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA587_31 = input.LA(1);
                        int index587_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_31);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA587_39 = input.LA(1);
                        int index587_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_39);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA587_49 = input.LA(1);
                        int index587_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_49);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA587_57 = input.LA(1);
                        int index587_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_57);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA587_65 = input.LA(1);
                        int index587_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_65);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA587_14 = input.LA(1);
                        int index587_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_14);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA587_22 = input.LA(1);
                        int index587_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_22);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA587_30 = input.LA(1);
                        int index587_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_30);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA587_38 = input.LA(1);
                        int index587_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_38);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA587_48 = input.LA(1);
                        int index587_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_48);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA587_56 = input.LA(1);
                        int index587_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_56);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA587_64 = input.LA(1);
                        int index587_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_64);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA587_17 = input.LA(1);
                        int index587_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_17);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA587_9 = input.LA(1);
                        int index587_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_9);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA587_25 = input.LA(1);
                        int index587_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_25);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA587_33 = input.LA(1);
                        int index587_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA587_41 = input.LA(1);
                        int index587_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_41);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA587_51 = input.LA(1);
                        int index587_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_51);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA587_59 = input.LA(1);
                        int index587_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_59);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA587_67 = input.LA(1);
                        int index587_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_67);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA587_8 = input.LA(1);
                        int index587_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_8);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA587_16 = input.LA(1);
                        int index587_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_16);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA587_24 = input.LA(1);
                        int index587_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_24);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA587_32 = input.LA(1);
                        int index587_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_32);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA587_40 = input.LA(1);
                        int index587_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_40);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA587_50 = input.LA(1);
                        int index587_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_50);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA587_58 = input.LA(1);
                        int index587_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_58);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA587_66 = input.LA(1);
                        int index587_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_66);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA587_0 = input.LA(1);
                        int index587_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA587_0==RULE_INT) && (synpred329_InternalN4JSParser())) {s = 1;}
                        else if ( (LA587_0==RULE_HEX_INT) && (synpred329_InternalN4JSParser())) {s = 2;}
                        else if ( (LA587_0==RULE_BINARY_INT) && (synpred329_InternalN4JSParser())) {s = 3;}
                        else if ( (LA587_0==RULE_OCTAL_INT) && (synpred329_InternalN4JSParser())) {s = 4;}
                        else if ( (LA587_0==RULE_SCIENTIFIC_INT) && (synpred329_InternalN4JSParser())) {s = 5;}
                        else if ( (LA587_0==RULE_LEGACY_OCTAL_INT) && (synpred329_InternalN4JSParser())) {s = 6;}
                        else if ((LA587_0>=4 && LA587_0<=126 && (s=T2S.M_54[LA587_0-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA587_0==EOF||LA587_0==HyphenMinusHyphenMinus||LA587_0==HyphenMinus||LA587_0==Solidus||(LA587_0>=EqualsSign && LA587_0<=GreaterThanSign)||LA587_0==LeftCurlyBracket) ) {s = 70;}
                        input.seek(index587_0);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA587_19 = input.LA(1);
                        int index587_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_19);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA587_11 = input.LA(1);
                        int index587_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_11);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA587_27 = input.LA(1);
                        int index587_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_27);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA587_35 = input.LA(1);
                        int index587_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_35);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA587_43 = input.LA(1);
                        int index587_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_43);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA587_45 = input.LA(1);
                        int index587_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_45);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA587_53 = input.LA(1);
                        int index587_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA587_61 = input.LA(1);
                        int index587_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_61);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA587_69 = input.LA(1);
                        int index587_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_69);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA587_18 = input.LA(1);
                        int index587_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_18);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA587_10 = input.LA(1);
                        int index587_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_10);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA587_26 = input.LA(1);
                        int index587_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_26);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA587_34 = input.LA(1);
                        int index587_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_34);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA587_42 = input.LA(1);
                        int index587_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_42);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA587_52 = input.LA(1);
                        int index587_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_52);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA587_60 = input.LA(1);
                        int index587_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_60);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA587_68 = input.LA(1);
                        int index587_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred329_InternalN4JSParser()) ) {s = 6;}
                        else if ( (true) ) {s = 70;}
                        input.seek(index587_68);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 587, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_351s = "\23\uffff";
    static final String dfa_352s = "\1\4\1\0\21\uffff";
    static final String dfa_353s = "\1\176\1\0\21\uffff";
    static final String dfa_354s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_355s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_356s = {
            "\2\3\2\uffff\1\3\7\uffff\1\3\13\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\16\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_351 = DFA.unpackEncodedString(dfa_351s);
    static final char[] dfa_352 = DFA.unpackEncodedStringToUnsignedChars(dfa_352s);
    static final char[] dfa_353 = DFA.unpackEncodedStringToUnsignedChars(dfa_353s);
    static final short[] dfa_354 = DFA.unpackEncodedString(dfa_354s);
    static final short[] dfa_355 = DFA.unpackEncodedString(dfa_355s);
    static final short[][] dfa_356 = unpackEncodedStringArray(dfa_356s);
    class DFA599 extends DFA {
        public DFA599(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 599;
            this.eot = dfa_351;
            this.eof = dfa_351;
            this.min = dfa_352;
            this.max = dfa_353;
            this.accept = dfa_354;
            this.special = dfa_355;
            this.transition = dfa_356;
        }
        public String getDescription() {
            return "20575:1: ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=>ArrowFunctionTypeExpressionParserRuleCall_0= ruleArrowFunctionTypeExpression ) | IterableTypeExpressionParserRuleCall_1= ruleIterableTypeExpression | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA599_1 = input.LA(1);
                        int index599_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred333_InternalN4JSParser()) ) {s = 17;}
                        else if ( (true) ) {s = 18;}
                        input.seek(index599_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 599, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_357s = "\173\uffff";
    static final String dfa_358s = "\1\2\172\uffff";
    static final String dfa_359s = "\1\4\1\0\171\uffff";
    static final String dfa_360s = "\1\u0099\1\0\171\uffff";
    static final String dfa_361s = "\2\uffff\1\2\167\uffff\1\1";
    static final String dfa_362s = "\1\uffff\1\0\171\uffff}>";
    static final String[] dfa_363s = {
            "\62\2\1\uffff\27\2\1\uffff\23\2\1\uffff\6\2\1\1\10\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_357 = DFA.unpackEncodedString(dfa_357s);
    static final short[] dfa_358 = DFA.unpackEncodedString(dfa_358s);
    static final char[] dfa_359 = DFA.unpackEncodedStringToUnsignedChars(dfa_359s);
    static final char[] dfa_360 = DFA.unpackEncodedStringToUnsignedChars(dfa_360s);
    static final short[] dfa_361 = DFA.unpackEncodedString(dfa_361s);
    static final short[] dfa_362 = DFA.unpackEncodedString(dfa_362s);
    static final short[][] dfa_363 = unpackEncodedStringArray(dfa_363s);
    class DFA600 extends DFA {
        public DFA600(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 600;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_363;
        }
        public String getDescription() {
            return "20617:2: ( ( ( QuestionMark ) )=> (FollowedByQuestionMarkQuestionMarkKeyword_1_0= QuestionMark ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA600_1 = input.LA(1);
                        int index600_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred334_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index600_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 600, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_364s = {
            "\62\2\1\uffff\27\2\1\uffff\20\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_364 = unpackEncodedStringArray(dfa_364s);
    class DFA602 extends DFA {
        public DFA602(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 602;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_364;
        }
        public String getDescription() {
            return "20649:3: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA602_1 = input.LA(1);
                        int index602_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred335_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index602_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 602, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_365s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_366s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_367s = "\1\176\1\u00a5\12\uffff\1\156\1\uffff\1\u00a5\3\156\3\u00a5\11\uffff";
    static final String dfa_368s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_369s = "\1\0\1\5\12\uffff\1\2\1\uffff\1\6\1\4\1\11\1\1\1\7\1\10\1\3\11\uffff}>";
    static final String[] dfa_370s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\1\uffff\1\34\2\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\2\34\1\uffff\1\34\1\uffff\1\34\3\uffff\1\34\65\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_365 = DFA.unpackEncodedString(dfa_365s);
    static final char[] dfa_366 = DFA.unpackEncodedStringToUnsignedChars(dfa_366s);
    static final char[] dfa_367 = DFA.unpackEncodedStringToUnsignedChars(dfa_367s);
    static final short[] dfa_368 = DFA.unpackEncodedString(dfa_368s);
    static final short[] dfa_369 = DFA.unpackEncodedString(dfa_369s);
    static final short[][] dfa_370 = unpackEncodedStringArray(dfa_370s);
    class DFA615 extends DFA {
        public DFA615(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 615;
            this.eot = dfa_31;
            this.eof = dfa_365;
            this.min = dfa_366;
            this.max = dfa_367;
            this.accept = dfa_368;
            this.special = dfa_369;
            this.transition = dfa_370;
        }
        public String getDescription() {
            return "20974:2: ( ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_0_1= ruleColonSepTypeRef ) ) ) | ( (TypeRefTypeRefParserRuleCall_1_1_0= ruleTypeRef ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA615_0 = input.LA(1);
                        int index615_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_0==RULE_IDENTIFIER) ) {s = 1;}
                        else if ((LA615_0>=11 && LA615_0<=126 && (s=T2S.M_55[LA615_0-(11)])>=0) && (synpred338_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA615_0==Constructor) ) {s = 12;}
                        else if ( (LA615_0==Of) && (synpred338_InternalN4JSParser())) {s = 13;}
                        else if ( (LA615_0==Target) ) {s = 14;}
                        else if ( (LA615_0==Type) ) {s = 15;}
                        else if ( (LA615_0==Union) ) {s = 16;}
                        else if ( (LA615_0==Intersection) ) {s = 17;}
                        else if ( (LA615_0==This) ) {s = 18;}
                        else if ( (LA615_0==Promisify) ) {s = 19;}
                        else if ( (LA615_0==Await) ) {s = 20;}
                        else if ( (LA615_0==Async) && (synpred338_InternalN4JSParser())) {s = 21;}
                        else if ( (LA615_0==Implements) && (synpred338_InternalN4JSParser())) {s = 22;}
                        else if ( (LA615_0==Interface) && (synpred338_InternalN4JSParser())) {s = 23;}
                        else if ( (LA615_0==Private) && (synpred338_InternalN4JSParser())) {s = 24;}
                        else if ( (LA615_0==Protected) && (synpred338_InternalN4JSParser())) {s = 25;}
                        else if ( (LA615_0==Public) && (synpred338_InternalN4JSParser())) {s = 26;}
                        else if ( (LA615_0==Out) && (synpred338_InternalN4JSParser())) {s = 27;}
                        else if ( (LA615_0==Default||LA615_0==This_1||LA615_0==Void||LA615_0==LeftParenthesis||LA615_0==QuestionMark||LA615_0==LeftSquareBracket||LA615_0==LeftCurlyBracket||LA615_0==Tilde) ) {s = 28;}
                        input.seek(index615_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA615_17 = input.LA(1);
                        int index615_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_17==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        else if ( (LA615_17==LeftCurlyBracket) ) {s = 28;}
                        input.seek(index615_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA615_12 = input.LA(1);
                        int index615_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_12==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA615_12==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA615_20 = input.LA(1);
                        int index615_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_20==EOF||LA615_20==Ampersand||LA615_20==RightParenthesis||(LA615_20>=PlusSign && LA615_20<=Comma)||LA615_20==FullStop||(LA615_20>=LessThanSign && LA615_20<=EqualsSign)||LA615_20==QuestionMark||LA615_20==LeftSquareBracket||LA615_20==VerticalLine||LA615_20==RULE_VERSION) ) {s = 28;}
                        else if ( (LA615_20==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_20);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA615_15 = input.LA(1);
                        int index615_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_15==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA615_15==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA615_1 = input.LA(1);
                        int index615_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_1==EOF||LA615_1==Ampersand||LA615_1==RightParenthesis||(LA615_1>=PlusSign && LA615_1<=Comma)||LA615_1==FullStop||(LA615_1>=LessThanSign && LA615_1<=EqualsSign)||LA615_1==QuestionMark||LA615_1==LeftSquareBracket||LA615_1==VerticalLine||LA615_1==RULE_VERSION) ) {s = 28;}
                        else if ( (LA615_1==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_1);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA615_14 = input.LA(1);
                        int index615_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_14==EOF||LA615_14==Ampersand||LA615_14==RightParenthesis||(LA615_14>=PlusSign && LA615_14<=Comma)||LA615_14==FullStop||(LA615_14>=LessThanSign && LA615_14<=EqualsSign)||LA615_14==QuestionMark||LA615_14==LeftSquareBracket||LA615_14==VerticalLine||LA615_14==RULE_VERSION) ) {s = 28;}
                        else if ( (LA615_14==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_14);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA615_18 = input.LA(1);
                        int index615_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_18==EOF||LA615_18==Ampersand||LA615_18==RightParenthesis||(LA615_18>=PlusSign && LA615_18<=Comma)||LA615_18==FullStop||(LA615_18>=LessThanSign && LA615_18<=EqualsSign)||LA615_18==QuestionMark||LA615_18==LeftSquareBracket||LA615_18==VerticalLine||LA615_18==RULE_VERSION) ) {s = 28;}
                        else if ( (LA615_18==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_18);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA615_19 = input.LA(1);
                        int index615_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_19==EOF||LA615_19==Ampersand||LA615_19==RightParenthesis||(LA615_19>=PlusSign && LA615_19<=Comma)||LA615_19==FullStop||(LA615_19>=LessThanSign && LA615_19<=EqualsSign)||LA615_19==QuestionMark||LA615_19==LeftSquareBracket||LA615_19==VerticalLine||LA615_19==RULE_VERSION) ) {s = 28;}
                        else if ( (LA615_19==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_19);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA615_16 = input.LA(1);
                        int index615_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA615_16==LeftCurlyBracket) ) {s = 28;}
                        else if ( (LA615_16==Colon) && (synpred338_InternalN4JSParser())) {s = 29;}
                        input.seek(index615_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 615, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_371s = "\22\uffff";
    static final String dfa_372s = "\1\uffff\7\12\3\uffff\7\12";
    static final String dfa_373s = "\1\10\7\4\1\10\2\uffff\7\4";
    static final String dfa_374s = "\1\176\7\u00a5\1\176\2\uffff\7\u00a5";
    static final String dfa_375s = "\11\uffff\1\2\1\1\7\uffff";
    static final String dfa_376s = "\22\uffff}>";
    static final String[] dfa_377s = {
            "\1\4\7\uffff\1\6\13\uffff\1\5\2\uffff\1\3\12\uffff\1\2\10\uffff\1\1\112\uffff\1\7",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\10\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\1\16\7\uffff\1\20\13\uffff\1\17\2\uffff\1\15\12\uffff\1\14\10\uffff\1\13\112\uffff\1\21",
            "",
            "",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11",
            "\62\12\1\uffff\27\12\1\uffff\23\12\1\uffff\17\12\3\uffff\1\12\1\uffff\4\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\12\uffff\2\12\7\uffff\1\12\1\uffff\1\12\1\uffff\1\12\13\uffff\1\11"
    };
    static final short[] dfa_371 = DFA.unpackEncodedString(dfa_371s);
    static final short[] dfa_372 = DFA.unpackEncodedString(dfa_372s);
    static final char[] dfa_373 = DFA.unpackEncodedStringToUnsignedChars(dfa_373s);
    static final char[] dfa_374 = DFA.unpackEncodedStringToUnsignedChars(dfa_374s);
    static final short[] dfa_375 = DFA.unpackEncodedString(dfa_375s);
    static final short[] dfa_376 = DFA.unpackEncodedString(dfa_376s);
    static final short[][] dfa_377 = unpackEncodedStringArray(dfa_377s);
    class DFA621 extends DFA {
        public DFA621(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 621;
            this.eot = dfa_371;
            this.eof = dfa_372;
            this.min = dfa_373;
            this.max = dfa_374;
            this.accept = dfa_375;
            this.special = dfa_376;
            this.transition = dfa_377;
        }
        public String getDescription() {
            return "21157:2: (TypeReferenceParserRuleCall_0_0= ruleTypeReference | (TypeReferenceParserRuleCall_0_1_1= ruleTypeReference VersionRequestParserRuleCall_0_1_2= ruleVersionRequest ) )";
        }
    }
    static final String[] dfa_378s = {
            "\62\2\1\uffff\27\2\1\uffff\23\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\12\uffff\2\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_378 = unpackEncodedStringArray(dfa_378s);
    class DFA622 extends DFA {
        public DFA622(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 622;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_378;
        }
        public String getDescription() {
            return "21165:2: ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1= ruleTypeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA622_1 = input.LA(1);
                        int index622_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index622_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 622, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_379s = "\25\uffff";
    static final String dfa_380s = "\4\uffff\7\14\3\uffff\7\14";
    static final String dfa_381s = "\1\161\3\10\7\4\2\uffff\1\10\7\4";
    static final String dfa_382s = "\1\161\1\u0093\2\176\7\u00a5\2\uffff\1\176\7\u00a5";
    static final String dfa_383s = "\13\uffff\1\2\1\1\10\uffff";
    static final String dfa_384s = "\25\uffff}>";
    static final String[] dfa_385s = {
            "\1\1",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\75\uffff\1\2\14\uffff\1\12\24\uffff\1\3",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\1\7\7\uffff\1\11\13\uffff\1\10\2\uffff\1\6\12\uffff\1\5\10\uffff\1\4\112\uffff\1\12",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\15\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "",
            "",
            "\1\21\7\uffff\1\23\13\uffff\1\22\2\uffff\1\20\12\uffff\1\17\10\uffff\1\16\112\uffff\1\24",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13",
            "\62\14\1\uffff\27\14\1\uffff\23\14\1\uffff\17\14\3\uffff\1\14\1\uffff\4\14\1\uffff\1\14\1\uffff\1\14\2\uffff\1\14\12\uffff\2\14\7\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1\13"
    };
    static final short[] dfa_379 = DFA.unpackEncodedString(dfa_379s);
    static final short[] dfa_380 = DFA.unpackEncodedString(dfa_380s);
    static final char[] dfa_381 = DFA.unpackEncodedStringToUnsignedChars(dfa_381s);
    static final char[] dfa_382 = DFA.unpackEncodedStringToUnsignedChars(dfa_382s);
    static final short[] dfa_383 = DFA.unpackEncodedString(dfa_383s);
    static final short[] dfa_384 = DFA.unpackEncodedString(dfa_384s);
    static final short[][] dfa_385 = unpackEncodedStringArray(dfa_385s);
    class DFA623 extends DFA {
        public DFA623(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 623;
            this.eot = dfa_379;
            this.eof = dfa_380;
            this.min = dfa_381;
            this.max = dfa_382;
            this.accept = dfa_383;
            this.special = dfa_384;
            this.transition = dfa_385;
        }
        public String getDescription() {
            return "21184:2: ( ( ( (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0_0_0= ruleTypingStrategyUseSiteOperator ) ) TypeReferenceParserRuleCall_0_0_1= ruleTypeReference ) | ( ( (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_1_1_0= ruleTypingStrategyUseSiteOperator ) ) TypeReferenceParserRuleCall_0_1_2= ruleTypeReference VersionRequestParserRuleCall_0_1_3= ruleVersionRequest ) )";
        }
    }
    class DFA624 extends DFA {
        public DFA624(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 624;
            this.eot = dfa_357;
            this.eof = dfa_358;
            this.min = dfa_359;
            this.max = dfa_360;
            this.accept = dfa_361;
            this.special = dfa_362;
            this.transition = dfa_378;
        }
        public String getDescription() {
            return "21208:2: ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1= ruleTypeArguments )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA624_1 = input.LA(1);
                        int index624_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred341_InternalN4JSParser()) ) {s = 122;}
                        else if ( (true) ) {s = 2;}
                        input.seek(index624_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 624, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_386s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_387s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_388s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_389s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_390s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_386 = DFA.unpackEncodedStringToUnsignedChars(dfa_386s);
    static final char[] dfa_387 = DFA.unpackEncodedStringToUnsignedChars(dfa_387s);
    static final short[] dfa_388 = DFA.unpackEncodedString(dfa_388s);
    static final short[] dfa_389 = DFA.unpackEncodedString(dfa_389s);
    static final short[][] dfa_390 = unpackEncodedStringArray(dfa_390s);
    class DFA631 extends DFA {
        public DFA631(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 631;
            this.eot = dfa_225;
            this.eof = dfa_225;
            this.min = dfa_386;
            this.max = dfa_387;
            this.accept = dfa_388;
            this.special = dfa_389;
            this.transition = dfa_390;
        }
        public String getDescription() {
            return "21397:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( ruleTypeVariables )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA631_0 = input.LA(1);
                        int index631_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA631_0==Get) ) {s = 1;}
                        else if ( (LA631_0==Set) ) {s = 2;}
                        else if ( (LA631_0==LessThanSign) && (synpred344_InternalN4JSParser())) {s = 3;}
                        else if ((LA631_0>=4 && LA631_0<=126 && (s=T2S.M_56[LA631_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index631_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA631_1 = input.LA(1);
                        int index631_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_InternalN4JSParser()) ) {s = 65;}
                        else if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA631_2 = input.LA(1);
                        int index631_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred343_InternalN4JSParser()) ) {s = 67;}
                        else if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA631_4 = input.LA(1);
                        int index631_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA631_5 = input.LA(1);
                        int index631_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA631_6 = input.LA(1);
                        int index631_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA631_7 = input.LA(1);
                        int index631_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA631_8 = input.LA(1);
                        int index631_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA631_9 = input.LA(1);
                        int index631_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA631_10 = input.LA(1);
                        int index631_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA631_11 = input.LA(1);
                        int index631_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA631_12 = input.LA(1);
                        int index631_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA631_13 = input.LA(1);
                        int index631_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA631_14 = input.LA(1);
                        int index631_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA631_15 = input.LA(1);
                        int index631_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA631_16 = input.LA(1);
                        int index631_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA631_17 = input.LA(1);
                        int index631_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA631_18 = input.LA(1);
                        int index631_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA631_19 = input.LA(1);
                        int index631_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA631_20 = input.LA(1);
                        int index631_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA631_21 = input.LA(1);
                        int index631_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA631_22 = input.LA(1);
                        int index631_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA631_23 = input.LA(1);
                        int index631_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA631_24 = input.LA(1);
                        int index631_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA631_25 = input.LA(1);
                        int index631_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA631_26 = input.LA(1);
                        int index631_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA631_27 = input.LA(1);
                        int index631_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA631_28 = input.LA(1);
                        int index631_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA631_29 = input.LA(1);
                        int index631_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA631_30 = input.LA(1);
                        int index631_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA631_31 = input.LA(1);
                        int index631_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA631_32 = input.LA(1);
                        int index631_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA631_33 = input.LA(1);
                        int index631_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA631_34 = input.LA(1);
                        int index631_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA631_35 = input.LA(1);
                        int index631_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA631_36 = input.LA(1);
                        int index631_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA631_37 = input.LA(1);
                        int index631_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA631_38 = input.LA(1);
                        int index631_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA631_39 = input.LA(1);
                        int index631_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA631_40 = input.LA(1);
                        int index631_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA631_41 = input.LA(1);
                        int index631_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA631_42 = input.LA(1);
                        int index631_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA631_43 = input.LA(1);
                        int index631_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA631_44 = input.LA(1);
                        int index631_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA631_45 = input.LA(1);
                        int index631_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA631_46 = input.LA(1);
                        int index631_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA631_47 = input.LA(1);
                        int index631_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA631_48 = input.LA(1);
                        int index631_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA631_49 = input.LA(1);
                        int index631_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA631_50 = input.LA(1);
                        int index631_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA631_51 = input.LA(1);
                        int index631_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA631_52 = input.LA(1);
                        int index631_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA631_53 = input.LA(1);
                        int index631_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA631_54 = input.LA(1);
                        int index631_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA631_55 = input.LA(1);
                        int index631_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA631_56 = input.LA(1);
                        int index631_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA631_57 = input.LA(1);
                        int index631_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA631_58 = input.LA(1);
                        int index631_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA631_59 = input.LA(1);
                        int index631_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA631_60 = input.LA(1);
                        int index631_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA631_61 = input.LA(1);
                        int index631_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA631_62 = input.LA(1);
                        int index631_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA631_63 = input.LA(1);
                        int index631_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA631_64 = input.LA(1);
                        int index631_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred344_InternalN4JSParser()) ) {s = 3;}
                        else if ( (true) ) {s = 66;}
                        input.seek(index631_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 631, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    class DFA711 extends DFA {
        public DFA711(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 711;
            this.eot = dfa_194;
            this.eof = dfa_194;
            this.min = dfa_195;
            this.max = dfa_196;
            this.accept = dfa_197;
            this.special = dfa_198;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "7462:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA714 extends DFA {
        public DFA714(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 714;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "7647:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA716 extends DFA {
        public DFA716(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 716;
            this.eot = dfa_194;
            this.eof = dfa_194;
            this.min = dfa_195;
            this.max = dfa_196;
            this.accept = dfa_197;
            this.special = dfa_198;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "7698:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA719 extends DFA {
        public DFA719(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 719;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "7883:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA721 extends DFA {
        public DFA721(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 721;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_179;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "7940:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA723 extends DFA {
        public DFA723(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 723;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "8275:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA725 extends DFA {
        public DFA725(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 725;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_179;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_183;
        }
        public String getDescription() {
            return "8411:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA727 extends DFA {
        public DFA727(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 727;
            this.eot = dfa_178;
            this.eof = dfa_178;
            this.min = dfa_184;
            this.max = dfa_180;
            this.accept = dfa_181;
            this.special = dfa_182;
            this.transition = dfa_185;
        }
        public String getDescription() {
            return "8746:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }
    class DFA766 extends DFA {
        public DFA766(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 766;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 16760:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA771 extends DFA {
        public DFA771(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 771;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 16983:4: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA776 extends DFA {
        public DFA776(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 776;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 17361:6: ( ( ruleN4Modifier ) )*";
        }
    }
    class DFA781 extends DFA {
        public DFA781(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 781;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_323;
            this.max = dfa_324;
            this.accept = dfa_325;
            this.special = dfa_17;
            this.transition = dfa_326;
        }
        public String getDescription() {
            return "()* loopback of 17791:6: ( ( ruleN4Modifier ) )*";
        }
    }
    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000000000203002L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0004200C45D8CE00L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0004000005184C00L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x000D048090010130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0804200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x7C0FE6BCF5B8CF70L,0x57A24C4A92440341L,0x0000000000203002L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0804200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000010440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000001000002000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000000000203002L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L,0x0000002000040000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925D0341L,0x0000002000203002L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0020440000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0341L,0x0000002000203002L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_22;
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000000000203002L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925D0341L,0x0000002000203002L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000080000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000000000203002L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x7C0FC6BCF5B8CF70L,0x57A24C6A92440341L,0x0000002000203002L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A24C6A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000000002A03002L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C6A92440340L,0x0000002002A03002L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000480000440000L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A25C4B92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4B92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0xFE5FFFFFFFFFFFF0L,0x53A24A40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24800407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x6C0D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000000L,0x0000000010004000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000000010004000L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x7C07C6B4D598CF72L,0x57A04C4C10444200L,0x0000000000203002L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x7C07C6B4D598CF70L,0x57A04C4810440200L,0x0000000000203002L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4AB2440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x7C4FC6B4F5B8CF70L,0x57A24C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000400L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000082L,0x0000014000000800L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000000000000082L,0x0000014000200800L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x0120000000000002L,0x0000000000001002L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0080000000000002L,0x00000182008202B4L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x7C0FC6B4F5B8CF72L,0x57A24C4AD2440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000000000203002L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0x7C0FC6B4F5B8CF70L,0x57A34C4A92440340L,0x0000002000203002L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0830000200L,0x0000000000200002L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x000F849090010130L,0x57A24A0810000200L,0x0000000000200002L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0008040090010100L,0x4000000000000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A34C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x7C0FC6B4D599CF70L,0x57A04C4810440200L,0x0000000000203002L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x6C044680D5184F70L,0x400000C000440000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24840407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x0400000805184C00L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24C40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0000000000000000L,0x000102B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A34C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A24C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40004108007C0001L});
    public static final BitSet FOLLOW_181 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L});
    public static final BitSet FOLLOW_182 = new BitSet(new long[]{0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_183 = new BitSet(new long[]{0x0000000000000002L,0x0000000400004000L});
    public static final BitSet FOLLOW_184 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_185 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000100L});
    public static final BitSet FOLLOW_186 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF2L,0x57800002007C0101L,0x0000000000200000L});
    public static final BitSet FOLLOW_187 = new BitSet(new long[]{0x0000000000000000L,0x0000404000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_188 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_189 = new BitSet(new long[]{0x2000000000000000L,0x0000020000200000L});
    public static final BitSet FOLLOW_190 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_191 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_192 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_193 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_194 = new BitSet(new long[]{0x000D048090010130L,0x4002480000000000L});
    public static final BitSet FOLLOW_195 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_196 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_197 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_198 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_199 = new BitSet(new long[]{0x6C4D4680D5194F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_200 = new BitSet(new long[]{0x0008040090010102L,0x4000000000000000L});
    public static final BitSet FOLLOW_201 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_202 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_203 = new BitSet(new long[]{0x200D048090010130L,0x40025A0010200000L});
    public static final BitSet FOLLOW_204 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_205 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_206 = new BitSet(new long[]{0x0000000000000002L,0x0000021000000000L});
    public static final BitSet FOLLOW_207 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_208 = new BitSet(new long[]{0x0009040090010100L,0x4000020000000000L});
    public static final BitSet FOLLOW_209 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_210 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_211 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L,0x0000002000000000L});
    public static final BitSet FOLLOW_212 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_213 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_214 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x53A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_215 = new BitSet(new long[]{0x7C0FC4B4F5B8CF70L,0x57A24C4A92440340L,0x0000000000203002L});
}
final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 43, 38, 48, -1, 45, 49, 51, 34, -1, -1, 33, -1, -1, 56, -1, 50, 32, -1, -1, -1, 52, -1, 35, -1, 40, -1, 47, 46, -1, -1, -1, -1, -1, -1, -1, 42, -1, 28, 44, -1, -1, -1, 37, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, 29, 31, -1, 53, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54};
	final static int[] M_3 = { 7, -1, -1, -1, -1, 40, 36, 44, -1, 42, 19, 12, 15, 80, 87, 14, 26, 90, -1, -1, 10, 11, 67, 23, 22, 13, 82, 16, 84, 38, 69, 25, 43, 81, -1, 18, 17, 59, 49, 85, 39, 78, 31, 41, 91, 89, 20, 35, 61, 48, 58, 21, 68, 83, -1, -1, -1, -1, 79, 32, 28, 47, 45, 33, 86, 27, -1, -1, -1, -1, -1, 70, -1, 71, 63, -1, -1, -1, -1, -1, -1, 8, -1, 34, 77, 76, -1, 37, -1, -1, 75, -1, -1, 46, -1, -1, 72, -1, 73, -1, 62, -1, 29, 50, -1, -1, -1, 9, 64, -1, -1, 24, -1, 88, 74, -1, -1, -1, 51, -1, 56, 53, 54, 55, -1, 57, -1, 30, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 65, -1, -1, -1, -1, -1, -1, -1, 52};
	final static int[] M_4 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_5 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_10 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_17 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 50, -1, -1, -1, 26, 10, 54, -1, 34, 28, -1, 13, -1, 18, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 45, 31, 42, 19, 55, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_18 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 50, -1, -1, -1, 25, 9, 54, -1, 34, 27, -1, 12, -1, 17, 56, 4, 1, -1, -1, 51, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, 55, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 62, -1, -1, 3, -1, -1, 59, -1, 60, -1, 46, -1, -1, 33, -1, -1, -1, 2, 48, -1, -1, 49, -1, -1, 61, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_19 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 15, 12, 61, 34, 5, 62, 64, 55, 21, 22, 54, 30, 7, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 6, 41, 60, 4, 16, 18, 19, 20, 48, 37, 39, 14, 43, 45, 3, 17, 25, 49, 58, 46, 10, 47, 11, 2, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 13, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, 67};
	final static int[] M_23 = { 14, 11, 60, 33, 4, 61, 63, 54, 20, 21, 53, 29, 6, 26, 27, 62, 52, 22, 25, 31, 64, 35, 55, 37, 5, 40, 59, 3, 15, 17, 18, 19, 47, 36, 38, 13, 42, 44, 2, 16, 24, 48, 57, 45, 9, 46, 10, 1, 43, -1, -1, -1, -1, 28, 49, 51, 34, 65, 50, 39, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 23, 30, 32, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 66};
	final static int[] M_25 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 53, -1, -1, -1, 30, 12, -1, -1, 35, 32, -1, 15, -1, 20, -1, 27, 26, -1, -1, 54, -1, 44, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 46, 5, 43, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, 3, 47, -1, -1, 34, -1, -1, -1, 52, 49, -1, -1, 50, -1, -1, -1, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 7, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_26 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, -1, -1, 34, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 33, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_27 = { 23, 18, 28, -1, 25, 29, 31, 14, -1, -1, 13, 53, -1, -1, -1, 30, 12, 57, -1, 35, 32, -1, 15, -1, 20, 59, 27, 26, -1, -1, 54, -1, 44, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 46, 5, 43, 21, 58, -1, -1, -1, -1, -1, -1, 9, 11, 4, 33, 10, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, 48, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 34, 1, -1, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 7, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_28 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 52, -1, -1, -1, 29, 11, 56, -1, 34, 31, -1, 14, -1, 19, 58, 26, 25, -1, -1, 53, -1, 43, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 45, 5, 42, 20, 57, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, 59, -1, 60, 47, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, 64, -1, -1, 50, -1, -1, 61, -1, 62, -1, 46, -1, -1, 33, 1, -1, -1, 51, 48, -1, -1, 49, -1, -1, 63, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_29 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_30 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 48, 7, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 9, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_31 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, 1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_32 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 54, -1, -1, -1, 31, 13, 58, -1, 36, 33, -1, 16, -1, 21, 60, 28, 27, -1, -1, 55, -1, 45, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 47, 7, 44, 22, 59, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, 49, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 35, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_33 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 49, 8, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 6, 1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 10, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_34 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 57, -1, -1, -1, 34, 16, 61, -1, 39, 36, -1, 19, -1, 24, 63, 31, 30, -1, -1, 58, -1, 48, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 50, 9, 47, 25, 62, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 64, -1, 65, 52, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 69, -1, -1, 55, -1, -1, 66, -1, 67, -1, 51, -1, -1, 38, 7, -1, -1, 56, 53, -1, -1, 54, -1, -1, 68, -1, -1, -1, 40, -1, 45, 42, 43, 44, -1, 46, -1, 11, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 59, -1, -1, -1, -1, -1, -1, -1, 41};
	final static int[] M_35 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 55, -1, -1, -1, 32, 14, 59, -1, 37, 34, -1, 17, -1, 22, 61, 29, 28, -1, -1, 56, -1, 46, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 48, 8, 45, 23, 60, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, 50, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 36, 6, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_36 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 56, -1, -1, -1, 33, 15, 60, -1, 38, 35, -1, 18, -1, 23, 62, 30, 29, -1, -1, 57, -1, 47, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 49, 9, 46, 24, 61, -1, -1, -1, -1, -1, -1, 12, 14, 8, 36, 13, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, 51, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 37, 7, 1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_37 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_38 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, 34, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_39 = { 50, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, 58, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 52};
	final static int[] M_40 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, 34, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 43, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 45, 31, 42, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 46, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 5, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_42 = { 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_43 = { 60, 55, 64, 34, 62, 65, -1, -1, 20, 21, -1, 30, 22, 27, 28, -1, -1, 23, 26, 32, -1, 36, -1, 38, 57, 42, -1, 63, 16, 18, 19, -1, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, -1, 52, 35, 66, -1, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 67};
	final static int[] M_46 = { 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 10};
	final static int[] M_47 = { 59, 54, 63, 33, 61, 64, -1, -1, 19, 20, -1, 29, 21, 26, 27, -1, -1, 22, 25, 31, -1, 35, -1, 37, 56, 41, 13, 62, 15, 17, 18, -1, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, -1, 51, 34, 65, -1, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 66};
	final static int[] M_50 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_51 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_52 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_54 = { 59, 54, 64, 27, 61, 65, 67, 50, 13, 14, 49, 23, 15, 20, 21, 66, 48, 16, 19, 25, 68, 29, 51, 31, 56, 35, 63, 62, 8, 10, 11, 12, 43, 30, 33, 58, 38, 40, 60, 9, 18, 44, 53, 41, 32, 42, 57, 37, 39, -1, -1, -1, -1, 22, 45, 47, 28, 69, 46, 34, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 17, 24, 26, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7};
	final static int[] M_55 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_56 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}