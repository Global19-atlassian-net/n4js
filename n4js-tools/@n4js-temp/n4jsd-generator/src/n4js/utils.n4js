/**
 * Copyright (c) 2020 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */

import * as glob_lib+ from "glob"

export const PACKAGE_JSON = "package.json";

export enum IssueKind {
	WARNING, ERROR
}

export class Issue {
	kind: IssueKind;
	message: string;
 
	constructor(msg: string, kind: IssueKind = IssueKind.ERROR) {
		this.kind = kind;
		this.message = msg;
	}
}
export function error(msg: string): Issue {
	return new Issue(msg, IssueKind.ERROR);
}
export function warning(msg: string): Issue {
	return new Issue(msg, IssueKind.WARNING);
}


export function resolveGlobPattern(pathWithGlob: string): string[] {
	return glob_lib.sync(pathWithGlob, {}) as string[];
}


export function <T> pushAll(arr: T[], elemsToPush: T[]): void {
	for (const elem of elemsToPush) {
		arr.push(elem);
	}
}


export function testFlagsOR(value: number, ...flags: number): boolean {
	for (const flag of flags) {
		if (testFlag(value, flag)) {
			return true;
		}
	}
	return false;
}

export function testFlagsAND(value: number, ...flags: number): boolean {
	for (const flag of flags) {
		if (!testFlag(value, flag)) {
			return false;
		}
	}
	return true;
}

export function testFlag(value: number, flag: number): boolean {
	return (value & flag) === flag;
}
